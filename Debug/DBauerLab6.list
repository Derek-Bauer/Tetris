
DBauerLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  08007478  08007478  00008478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800869c  0800869c  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  0800869c  0800869c  0000969c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a4  080086a4  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a4  080086a4  000096a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086a8  080086a8  000096a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080086ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025e78  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ef0  20025ef0  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d249  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc1  00000000  00000000  000172f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00019eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4a  00000000  00000000  0001acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027669  00000000  00000000  0001b702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122a8  00000000  00000000  00042d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e88  00000000  00000000  00055013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136e9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e3c  00000000  00000000  00136ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0013ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007460 	.word	0x08007460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007460 	.word	0x08007460

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <appButtonInterruptInit>:





void appButtonInterruptInit(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
			buttonInterruptInit();
 8000584:	f000 f86c 	bl	8000660 <buttonInterruptInit>
	}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000590:	2006      	movs	r0, #6
 8000592:	f004 f906 	bl	80047a2 <HAL_NVIC_DisableIRQ>

			if(getGameState() == GAME_STATE_MENU){
 8000596:	f000 fe35 	bl	8001204 <getGameState>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d103      	bne.n	80005a8 <EXTI0_IRQHandler+0x1c>
				setGameState(GAME_STATE_PLAY);
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 fe1f 	bl	80011e4 <setGameState>
 80005a6:	e006      	b.n	80005b6 <EXTI0_IRQHandler+0x2a>
			}
			else if(getGameState() == GAME_STATE_PLAY){
 80005a8:	f000 fe2c 	bl	8001204 <getGameState>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d101      	bne.n	80005b6 <EXTI0_IRQHandler+0x2a>
				iWantToRotateBlock();
 80005b2:	f000 fe33 	bl	800121c <iWantToRotateBlock>
			}


			HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80005b6:	2101      	movs	r1, #1
 80005b8:	2000      	movs	r0, #0
 80005ba:	f004 f90d 	bl	80047d8 <HAL_EXTI_ClearPending>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005be:	2006      	movs	r0, #6
 80005c0:	f004 f8e1 	bl	8004786 <HAL_NVIC_EnableIRQ>
	};
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
		// IRQ HANDLER PRE
		interruptDisable(TIM7_IRQ);
 80005cc:	2037      	movs	r0, #55	@ 0x37
 80005ce:	f000 f897 	bl	8000700 <interruptDisable>


		// DO STUFF
		addToTimerRollover();
 80005d2:	f002 ffb7 	bl	8003544 <addToTimerRollover>


		// IRQ HANDLER POST
		TIM7_0->SR &= ~(1 << UPDATE_INTERRUPT_FLAG_OFFSET);
 80005d6:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <TIM7_IRQHandler+0x2c>)
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	4a06      	ldr	r2, [pc, #24]	@ (80005f4 <TIM7_IRQHandler+0x2c>)
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	6113      	str	r3, [r2, #16]
		interruptClearPending(TIM7_IRQ);
 80005e2:	2037      	movs	r0, #55	@ 0x37
 80005e4:	f000 f8b8 	bl	8000758 <interruptClearPending>
		interruptEnable(TIM7_IRQ);
 80005e8:	2037      	movs	r0, #55	@ 0x37
 80005ea:	f000 f85d 	bl	80006a8 <interruptEnable>
	};
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40001400 	.word	0x40001400

080005f8 <ApplicationInit>:


void ApplicationInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005fc:	f003 fe2b 	bl	8004256 <initialise_monitor_handles>
    LTCD__Init();
 8000600:	f000 f9de 	bl	80009c0 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 f99b 	bl	8000940 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800060a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800060e:	2000      	movs	r0, #0
 8000610:	f000 fa7a 	bl	8000b08 <LCD_Clear>
    appButtonInterruptInit();
 8000614:	f7ff ffb4 	bl	8000580 <appButtonInterruptInit>
    LEDTimer7Init();
 8000618:	f003 f824 	bl	8003664 <LEDTimer7Init>
    timerReset(TIM7_0);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <ApplicationInit+0x30>)
 800061e:	f003 f87d 	bl	800371c <timerReset>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40001400 	.word	0x40001400

0800062c <BUTTON_Clk_Enable>:
#include "stdbool.h"


#define ACTIVE 1

void BUTTON_Clk_Enable(){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <BUTTON_Clk_Enable+0x30>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <BUTTON_Clk_Enable+0x30>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <BUTTON_Clk_Enable+0x30>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
};
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <buttonInterruptInit>:
				pin_config.Pull = GPIO_NOPULL;
			BUTTON_Clk_Enable();
			HAL_GPIO_Init(GPIOA, &pin_config);
};

void buttonInterruptInit(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef pin_config = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
					pin_config.Pin = GPIO_PIN_0;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
					pin_config.Mode = GPIO_MODE_IT_RISING;
 8000678:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800067c:	60bb      	str	r3, [r7, #8]
					pin_config.Speed = GPIO_SPEED_FREQ_HIGH;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
					pin_config.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
	BUTTON_Clk_Enable();
 8000686:	f7ff ffd1 	bl	800062c <BUTTON_Clk_Enable>
	HAL_GPIO_Init(GPIOA, &pin_config);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <buttonInterruptInit+0x44>)
 8000690:	f004 f8ba 	bl	8004808 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000694:	2006      	movs	r0, #6
 8000696:	f004 f876 	bl	8004786 <HAL_NVIC_EnableIRQ>

};
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020000 	.word	0x40020000

080006a8 <interruptEnable>:
*  Created on: Oct 3, 2024
*      Author: derek
*/
#include <InterruptControl.h>

void interruptEnable(uint8_t IRQ_num){
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	if(IRQ_num < 32){
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b1f      	cmp	r3, #31
 80006b6:	d80a      	bhi.n	80006ce <interruptEnable+0x26>
			*NVIC_ISER0 |= 1<<IRQ_num;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <interruptEnable+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	79fa      	ldrb	r2, [r7, #7]
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <interruptEnable+0x50>)
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6013      	str	r3, [r2, #0]
		}
		else{
			int modIRQ = IRQ_num%32;
			*NVIC_ISER1 |= 1<<(modIRQ);
		}
};
 80006cc:	e00d      	b.n	80006ea <interruptEnable+0x42>
			int modIRQ = IRQ_num%32;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	60fb      	str	r3, [r7, #12]
			*NVIC_ISER1 |= 1<<(modIRQ);
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <interruptEnable+0x54>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2101      	movs	r1, #1
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a05      	ldr	r2, [pc, #20]	@ (80006fc <interruptEnable+0x54>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]
};
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000e104 	.word	0xe000e104

08000700 <interruptDisable>:

void interruptDisable(uint8_t IRQ_num){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	if(IRQ_num < 32){
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b1f      	cmp	r3, #31
 800070e:	d80a      	bhi.n	8000726 <interruptDisable+0x26>
			*NVIC_ICER0 |= 1<<IRQ_num;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <interruptDisable+0x50>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	2101      	movs	r1, #1
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <interruptDisable+0x50>)
 8000720:	430b      	orrs	r3, r1
 8000722:	6013      	str	r3, [r2, #0]
		}
		else{
			uint32_t modIRQ = IRQ_num%32;
			*NVIC_ICER1 |= 1<<(modIRQ);
		}
};
 8000724:	e00d      	b.n	8000742 <interruptDisable+0x42>
			uint32_t modIRQ = IRQ_num%32;
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 031f 	and.w	r3, r3, #31
 800072c:	60fb      	str	r3, [r7, #12]
			*NVIC_ICER1 |= 1<<(modIRQ);
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <interruptDisable+0x54>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2101      	movs	r1, #1
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	fa01 f202 	lsl.w	r2, r1, r2
 800073a:	4611      	mov	r1, r2
 800073c:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <interruptDisable+0x54>)
 800073e:	430b      	orrs	r3, r1
 8000740:	6013      	str	r3, [r2, #0]
};
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e180 	.word	0xe000e180
 8000754:	e000e184 	.word	0xe000e184

08000758 <interruptClearPending>:

void interruptClearPending(uint8_t IRQ_num){
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	if(IRQ_num < 32){
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b1f      	cmp	r3, #31
 8000766:	d80a      	bhi.n	800077e <interruptClearPending+0x26>
			*NVIC_ICPR0 |= 1<<IRQ_num;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <interruptClearPending+0x50>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a0c      	ldr	r2, [pc, #48]	@ (80007a8 <interruptClearPending+0x50>)
 8000778:	430b      	orrs	r3, r1
 800077a:	6013      	str	r3, [r2, #0]
		}
		else{
			uint32_t modIRQ = IRQ_num%32;
			*NVIC_ICPR1 |= 1<<(modIRQ);
		}
};
 800077c:	e00d      	b.n	800079a <interruptClearPending+0x42>
			uint32_t modIRQ = IRQ_num%32;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	60fb      	str	r3, [r7, #12]
			*NVIC_ICPR1 |= 1<<(modIRQ);
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <interruptClearPending+0x54>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2101      	movs	r1, #1
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <interruptClearPending+0x54>)
 8000796:	430b      	orrs	r3, r1
 8000798:	6013      	str	r3, [r2, #0]
};
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e280 	.word	0xe000e280
 80007ac:	e000e284 	.word	0xe000e284

080007b0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4b5a      	ldr	r3, [pc, #360]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	4a59      	ldr	r2, [pc, #356]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c6:	4b57      	ldr	r3, [pc, #348]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b53      	ldr	r3, [pc, #332]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a52      	ldr	r2, [pc, #328]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b50      	ldr	r3, [pc, #320]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b4c      	ldr	r3, [pc, #304]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a4b      	ldr	r2, [pc, #300]	@ (8000924 <LCD_GPIO_Init+0x174>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b49      	ldr	r3, [pc, #292]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b45      	ldr	r3, [pc, #276]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a44      	ldr	r2, [pc, #272]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b42      	ldr	r3, [pc, #264]	@ (8000924 <LCD_GPIO_Init+0x174>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b3e      	ldr	r3, [pc, #248]	@ (8000924 <LCD_GPIO_Init+0x174>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a3d      	ldr	r2, [pc, #244]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b3b      	ldr	r3, [pc, #236]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a36      	ldr	r2, [pc, #216]	@ (8000924 <LCD_GPIO_Init+0x174>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <LCD_GPIO_Init+0x174>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800087a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800087e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000888:	2302      	movs	r3, #2
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800088c:	230e      	movs	r3, #14
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4824      	ldr	r0, [pc, #144]	@ (8000928 <LCD_GPIO_Init+0x178>)
 8000898:	f003 ffb6 	bl	8004808 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800089c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008a0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4820      	ldr	r0, [pc, #128]	@ (800092c <LCD_GPIO_Init+0x17c>)
 80008aa:	f003 ffad 	bl	8004808 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80008ae:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481d      	ldr	r0, [pc, #116]	@ (8000930 <LCD_GPIO_Init+0x180>)
 80008bc:	f003 ffa4 	bl	8004808 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80008c0:	2348      	movs	r3, #72	@ 0x48
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	481a      	ldr	r0, [pc, #104]	@ (8000934 <LCD_GPIO_Init+0x184>)
 80008cc:	f003 ff9c 	bl	8004808 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80008d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4816      	ldr	r0, [pc, #88]	@ (8000938 <LCD_GPIO_Init+0x188>)
 80008de:	f003 ff93 	bl	8004808 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80008e2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80008e6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4813      	ldr	r0, [pc, #76]	@ (800093c <LCD_GPIO_Init+0x18c>)
 80008f0:	f003 ff8a 	bl	8004808 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80008f8:	2309      	movs	r3, #9
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480a      	ldr	r0, [pc, #40]	@ (800092c <LCD_GPIO_Init+0x17c>)
 8000904:	f003 ff80 	bl	8004808 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000908:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4809      	ldr	r0, [pc, #36]	@ (800093c <LCD_GPIO_Init+0x18c>)
 8000916:	f003 ff77 	bl	8004808 <HAL_GPIO_Init>
}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	@ 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	40020400 	.word	0x40020400
 8000930:	40020800 	.word	0x40020800
 8000934:	40020c00 	.word	0x40020c00
 8000938:	40021400 	.word	0x40021400
 800093c:	40021800 	.word	0x40021800

08000940 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b090      	sub	sp, #64	@ 0x40
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800094e:	23f0      	movs	r3, #240	@ 0xf0
 8000950:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000956:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800095a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000960:	23ff      	movs	r3, #255	@ 0xff
 8000962:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <LTCD_Layer_Init+0x78>)
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800097c:	23f0      	movs	r3, #240	@ 0xf0
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000980:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4806      	ldr	r0, [pc, #24]	@ (80009bc <LTCD_Layer_Init+0x7c>)
 80009a2:	f004 fad3 	bl	8004f4c <HAL_LTDC_ConfigLayer>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80009ac:	f000 f97e 	bl	8000cac <LCD_Error_Handler>
	}
}
 80009b0:	bf00      	nop
 80009b2:	3740      	adds	r7, #64	@ 0x40
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000170 	.word	0x20000170
 80009bc:	20000094 	.word	0x20000094

080009c0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <LTCD__Init+0xb0>)
 80009c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a74 <LTCD__Init+0xb4>)
 80009c8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <LTCD__Init+0xb0>)
 80009cc:	2209      	movs	r2, #9
 80009ce:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <LTCD__Init+0xb0>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80009d6:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <LTCD__Init+0xb0>)
 80009d8:	221d      	movs	r2, #29
 80009da:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <LTCD__Init+0xb0>)
 80009de:	2203      	movs	r2, #3
 80009e0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <LTCD__Init+0xb0>)
 80009e4:	f240 120d 	movw	r2, #269	@ 0x10d
 80009e8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <LTCD__Init+0xb0>)
 80009ec:	f240 1243 	movw	r2, #323	@ 0x143
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <LTCD__Init+0xb0>)
 80009f4:	f240 1217 	movw	r2, #279	@ 0x117
 80009f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <LTCD__Init+0xb0>)
 80009fc:	f240 1247 	movw	r2, #327	@ 0x147
 8000a00:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <LTCD__Init+0xb8>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <LTCD__Init+0xb8>)
 8000a22:	22c0      	movs	r2, #192	@ 0xc0
 8000a24:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <LTCD__Init+0xb8>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <LTCD__Init+0xb8>)
 8000a2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <LTCD__Init+0xb8>)
 8000a36:	f005 f8c3 	bl	8005bc0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000a52:	f7ff fead 	bl	80007b0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <LTCD__Init+0xb0>)
 8000a58:	f004 f9a8 	bl	8004dac <HAL_LTDC_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a62:	f000 f923 	bl	8000cac <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a66:	f002 fea5 	bl	80037b4 <ili9341_Init>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000094 	.word	0x20000094
 8000a74:	40016800 	.word	0x40016800
 8000a78:	2000013c 	.word	0x2000013c

08000a7c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a8e:	88ba      	ldrh	r2, [r7, #4]
 8000a90:	4613      	mov	r3, r2
 8000a92:	011b      	lsls	r3, r3, #4
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	461a      	mov	r2, r3
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4905      	ldr	r1, [pc, #20]	@ (8000ab4 <LCD_Draw_Pixel+0x38>)
 8000aa0:	887a      	ldrh	r2, [r7, #2]
 8000aa2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000170 	.word	0x20000170

08000ab8 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	4603      	mov	r3, r0
 8000acc:	80bb      	strh	r3, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	807b      	strh	r3, [r7, #2]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	e00b      	b.n	8000af4 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000adc:	89fa      	ldrh	r2, [r7, #14]
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b299      	uxth	r1, r3
 8000ae4:	883a      	ldrh	r2, [r7, #0]
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffc7 	bl	8000a7c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	3301      	adds	r3, #1
 8000af2:	81fb      	strh	r3, [r7, #14]
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d3ef      	bcc.n	8000adc <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}
	...

08000b08 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10e      	bne.n	8000b3c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e007      	b.n	8000b34 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000b24:	4908      	ldr	r1, [pc, #32]	@ (8000b48 <LCD_Clear+0x40>)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	88ba      	ldrh	r2, [r7, #4]
 8000b2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000b3a:	d3f3      	bcc.n	8000b24 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000170 	.word	0x20000170

08000b4c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000b56:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <LCD_SetTextColor+0x1c>)
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	8013      	strh	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	20000000 	.word	0x20000000

08000b6c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <LCD_SetFont+0x1c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000016c 	.word	0x2000016c

08000b8c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	603a      	str	r2, [r7, #0]
 8000b96:	80fb      	strh	r3, [r7, #6]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e04c      	b.n	8000c44 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	e03f      	b.n	8000c30 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	889b      	ldrh	r3, [r3, #4]
 8000bc2:	4a27      	ldr	r2, [pc, #156]	@ (8000c60 <LCD_Draw_Char+0xd4>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	400b      	ands	r3, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <LCD_Draw_Char+0x5c>
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	889b      	ldrh	r3, [r3, #4]
 8000be4:	2b0c      	cmp	r3, #12
 8000be6:	d920      	bls.n	8000c2a <LCD_Draw_Char+0x9e>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	fa42 f303 	asr.w	r3, r2, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d104      	bne.n	8000c0c <LCD_Draw_Char+0x80>
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	889b      	ldrh	r3, [r3, #4]
 8000c08:	2b0c      	cmp	r3, #12
 8000c0a:	d80e      	bhi.n	8000c2a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4413      	add	r3, r2
 8000c14:	b298      	uxth	r0, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88bb      	ldrh	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <LCD_Draw_Char+0xd8>)
 8000c22:	8812      	ldrh	r2, [r2, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f7ff ff29 	bl	8000a7c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	889b      	ldrh	r3, [r3, #4]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d3b8      	bcc.n	8000bb0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	88db      	ldrh	r3, [r3, #6]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d3ab      	bcc.n	8000baa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000016c 	.word	0x2000016c
 8000c60:	aaaaaaab 	.word	0xaaaaaaab
 8000c64:	20000000 	.word	0x20000000

08000c68 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	460b      	mov	r3, r1
 8000c74:	80bb      	strh	r3, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	3b20      	subs	r3, #32
 8000c7e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <LCD_DisplayChar+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	4907      	ldr	r1, [pc, #28]	@ (8000ca8 <LCD_DisplayChar+0x40>)
 8000c8a:	6809      	ldr	r1, [r1, #0]
 8000c8c:	88c9      	ldrh	r1, [r1, #6]
 8000c8e:	fb01 f303 	mul.w	r3, r1, r3
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	441a      	add	r2, r3
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff76 	bl	8000b8c <LCD_Draw_Char>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000016c 	.word	0x2000016c

08000cac <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <LCD_Error_Handler+0x8>

08000cb8 <getScheduledEvents>:
*  Created on: Sep 10, 2024
*      Author: derek
*/
#include <Scheduler.h>
static uint32_t scheduledEvents=0;
uint32_t getScheduledEvents(){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <getScheduledEvents+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20025970 	.word	0x20025970

08000cd0 <addSchedulerEvent>:
void addSchedulerEvent(uint32_t event){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	scheduledEvents |=(event);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <addSchedulerEvent+0x20>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	@ (8000cf0 <addSchedulerEvent+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
};
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20025970 	.word	0x20025970

08000cf4 <restingBlockMatrixInit>:
static uint16_t fallingBlockY = 0;
static bool isBlockFalling = 0;
static bool incomingBlockRotation = 0;
static uint16_t timerRolloverCount = 0;

void restingBlockMatrixInit(void){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
	//put 1s in the sides
	for(int i=0; i<17; i++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	e00d      	b.n	8000d1c <restingBlockMatrixInit+0x28>
		restingBlockMatrix[0][i]=1;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <restingBlockMatrixInit+0x60>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
		restingBlockMatrix[13][i]=1;
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <restingBlockMatrixInit+0x60>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	33dd      	adds	r3, #221	@ 0xdd
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<17; i++){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b10      	cmp	r3, #16
 8000d20:	ddee      	ble.n	8000d00 <restingBlockMatrixInit+0xc>
	}
	//put 1s in the bottom
	for(int i=0; i<14; i++){
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	e00b      	b.n	8000d40 <restingBlockMatrixInit+0x4c>
		restingBlockMatrix[i][16]=1;
 8000d28:	490a      	ldr	r1, [pc, #40]	@ (8000d54 <restingBlockMatrixInit+0x60>)
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	3310      	adds	r3, #16
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14; i++){
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b0d      	cmp	r3, #13
 8000d44:	ddf0      	ble.n	8000d28 <restingBlockMatrixInit+0x34>
	}
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20025c48 	.word	0x20025c48

08000d58 <mainMenu>:




void mainMenu(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

	HAL_Delay(200);
 8000d5e:	20c8      	movs	r0, #200	@ 0xc8
 8000d60:	f003 fbd2 	bl	8004508 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000d64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fecd 	bl	8000b08 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff feec 	bl	8000b4c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000d74:	487b      	ldr	r0, [pc, #492]	@ (8000f64 <mainMenu+0x20c>)
 8000d76:	f7ff fef9 	bl	8000b6c <LCD_SetFont>

	LCD_DisplayChar(75,20,'T');
 8000d7a:	2254      	movs	r2, #84	@ 0x54
 8000d7c:	2114      	movs	r1, #20
 8000d7e:	204b      	movs	r0, #75	@ 0x4b
 8000d80:	f7ff ff72 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(90,20,'E');
 8000d84:	2245      	movs	r2, #69	@ 0x45
 8000d86:	2114      	movs	r1, #20
 8000d88:	205a      	movs	r0, #90	@ 0x5a
 8000d8a:	f7ff ff6d 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(105,20,'T');
 8000d8e:	2254      	movs	r2, #84	@ 0x54
 8000d90:	2114      	movs	r1, #20
 8000d92:	2069      	movs	r0, #105	@ 0x69
 8000d94:	f7ff ff68 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(120,20,'R');
 8000d98:	2252      	movs	r2, #82	@ 0x52
 8000d9a:	2114      	movs	r1, #20
 8000d9c:	2078      	movs	r0, #120	@ 0x78
 8000d9e:	f7ff ff63 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(130,20,'I');
 8000da2:	2249      	movs	r2, #73	@ 0x49
 8000da4:	2114      	movs	r1, #20
 8000da6:	2082      	movs	r0, #130	@ 0x82
 8000da8:	f7ff ff5e 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(140,20,'S');
 8000dac:	2253      	movs	r2, #83	@ 0x53
 8000dae:	2114      	movs	r1, #20
 8000db0:	208c      	movs	r0, #140	@ 0x8c
 8000db2:	f7ff ff59 	bl	8000c68 <LCD_DisplayChar>


	drawOrangeRicky0(50, 50);
 8000db6:	2132      	movs	r1, #50	@ 0x32
 8000db8:	2032      	movs	r0, #50	@ 0x32
 8000dba:	f001 fba1 	bl	8002500 <drawOrangeRicky0>
	drawBlueRicky0(125, 125);
 8000dbe:	217d      	movs	r1, #125	@ 0x7d
 8000dc0:	207d      	movs	r0, #125	@ 0x7d
 8000dc2:	f001 fc91 	bl	80026e8 <drawBlueRicky0>
	drawClevelandZ0(135, 75);
 8000dc6:	214b      	movs	r1, #75	@ 0x4b
 8000dc8:	2087      	movs	r0, #135	@ 0x87
 8000dca:	f001 fd65 	bl	8002898 <drawClevelandZ0>
	drawRhodeIslandZ0(15, 115);
 8000dce:	2173      	movs	r1, #115	@ 0x73
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f001 fdd1 	bl	8002978 <drawRhodeIslandZ0>
	drawSmashboy0(60, 150);
 8000dd6:	2196      	movs	r1, #150	@ 0x96
 8000dd8:	203c      	movs	r0, #60	@ 0x3c
 8000dda:	f001 ff1f 	bl	8002c1c <drawSmashboy0>
	drawHero0(140, 170);
 8000dde:	21aa      	movs	r1, #170	@ 0xaa
 8000de0:	208c      	movs	r0, #140	@ 0x8c
 8000de2:	f001 fb09 	bl	80023f8 <drawHero0>
	drawTeewee0(100, 200);
 8000de6:	21c8      	movs	r1, #200	@ 0xc8
 8000de8:	2064      	movs	r0, #100	@ 0x64
 8000dea:	f001 fe35 	bl	8002a58 <drawTeewee0>

	uint16_t pixel_shift1 = 15;
 8000dee:	230f      	movs	r3, #15
 8000df0:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel_shift2 = 17;
 8000df2:	2311      	movs	r3, #17
 8000df4:	80bb      	strh	r3, [r7, #4]
	LCD_DisplayChar(30+pixel_shift1, 250, 'P');
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	331e      	adds	r3, #30
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2250      	movs	r2, #80	@ 0x50
 8000dfe:	21fa      	movs	r1, #250	@ 0xfa
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff31 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(45+pixel_shift1, 250, 'r');
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	332d      	adds	r3, #45	@ 0x2d
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2272      	movs	r2, #114	@ 0x72
 8000e0e:	21fa      	movs	r1, #250	@ 0xfa
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff29 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(55+pixel_shift1, 250, 'e');
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3337      	adds	r3, #55	@ 0x37
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	2265      	movs	r2, #101	@ 0x65
 8000e1e:	21fa      	movs	r1, #250	@ 0xfa
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff21 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(68+pixel_shift1, 250, 's');
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	3344      	adds	r3, #68	@ 0x44
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	2273      	movs	r2, #115	@ 0x73
 8000e2e:	21fa      	movs	r1, #250	@ 0xfa
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff19 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(80+pixel_shift1, 250, 's');
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	3350      	adds	r3, #80	@ 0x50
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	2273      	movs	r2, #115	@ 0x73
 8000e3e:	21fa      	movs	r1, #250	@ 0xfa
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff11 	bl	8000c68 <LCD_DisplayChar>

	LCD_DisplayChar(105+pixel_shift1, 250, 'B');
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	3369      	adds	r3, #105	@ 0x69
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	2242      	movs	r2, #66	@ 0x42
 8000e4e:	21fa      	movs	r1, #250	@ 0xfa
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff09 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(120+pixel_shift1, 250, 'u');
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	3378      	adds	r3, #120	@ 0x78
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	2275      	movs	r2, #117	@ 0x75
 8000e5e:	21fa      	movs	r1, #250	@ 0xfa
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff01 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(131+pixel_shift1, 250, 't');
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	3383      	adds	r3, #131	@ 0x83
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	2274      	movs	r2, #116	@ 0x74
 8000e6e:	21fa      	movs	r1, #250	@ 0xfa
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fef9 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(140+pixel_shift1, 250, 't');
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	338c      	adds	r3, #140	@ 0x8c
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2274      	movs	r2, #116	@ 0x74
 8000e7e:	21fa      	movs	r1, #250	@ 0xfa
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fef1 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(150+pixel_shift1, 250, 'o');
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	3396      	adds	r3, #150	@ 0x96
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	226f      	movs	r2, #111	@ 0x6f
 8000e8e:	21fa      	movs	r1, #250	@ 0xfa
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fee9 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(163+pixel_shift1, 250, 'n');
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	33a3      	adds	r3, #163	@ 0xa3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	226e      	movs	r2, #110	@ 0x6e
 8000e9e:	21fa      	movs	r1, #250	@ 0xfa
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fee1 	bl	8000c68 <LCD_DisplayChar>

	LCD_DisplayChar(30+pixel_shift2, 285, 'T');
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	331e      	adds	r3, #30
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	2254      	movs	r2, #84	@ 0x54
 8000eae:	f240 111d 	movw	r1, #285	@ 0x11d
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fed8 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(43+pixel_shift2, 285, 'o');
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	332b      	adds	r3, #43	@ 0x2b
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	226f      	movs	r2, #111	@ 0x6f
 8000ec0:	f240 111d 	movw	r1, #285	@ 0x11d
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fecf 	bl	8000c68 <LCD_DisplayChar>

	LCD_DisplayChar(70+pixel_shift2, 285, 'C');
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	3346      	adds	r3, #70	@ 0x46
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2243      	movs	r2, #67	@ 0x43
 8000ed2:	f240 111d 	movw	r1, #285	@ 0x11d
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fec6 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(85+pixel_shift2, 285, 'o');
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	3355      	adds	r3, #85	@ 0x55
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	226f      	movs	r2, #111	@ 0x6f
 8000ee4:	f240 111d 	movw	r1, #285	@ 0x11d
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff febd 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(98+pixel_shift2, 285, 'n');
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	3362      	adds	r3, #98	@ 0x62
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	226e      	movs	r2, #110	@ 0x6e
 8000ef6:	f240 111d 	movw	r1, #285	@ 0x11d
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feb4 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(110+pixel_shift2, 285, 't');
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	336e      	adds	r3, #110	@ 0x6e
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2274      	movs	r2, #116	@ 0x74
 8000f08:	f240 111d 	movw	r1, #285	@ 0x11d
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff feab 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(120+pixel_shift2, 285, 'i');
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	3378      	adds	r3, #120	@ 0x78
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2269      	movs	r2, #105	@ 0x69
 8000f1a:	f240 111d 	movw	r1, #285	@ 0x11d
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fea2 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(130+pixel_shift2, 285, 'n');
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	3382      	adds	r3, #130	@ 0x82
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	226e      	movs	r2, #110	@ 0x6e
 8000f2c:	f240 111d 	movw	r1, #285	@ 0x11d
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe99 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(142+pixel_shift2, 285, 'u');
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	338e      	adds	r3, #142	@ 0x8e
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	2275      	movs	r2, #117	@ 0x75
 8000f3e:	f240 111d 	movw	r1, #285	@ 0x11d
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe90 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(155+pixel_shift2, 285, 'e');
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	339b      	adds	r3, #155	@ 0x9b
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2265      	movs	r2, #101	@ 0x65
 8000f50:	f240 111d 	movw	r1, #285	@ 0x11d
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe87 	bl	8000c68 <LCD_DisplayChar>

};
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000004 	.word	0x20000004

08000f68 <playGame>:


void playGame(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000f6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fdc8 	bl	8000b08 <LCD_Clear>
	timerStart(TIM7_0);
 8000f78:	4831      	ldr	r0, [pc, #196]	@ (8001040 <playGame+0xd8>)
 8000f7a:	f002 fbaf 	bl	80036dc <timerStart>
	restingBlockMatrixInit();
 8000f7e:	f7ff feb9 	bl	8000cf4 <restingBlockMatrixInit>
	while(getGameState() == GAME_STATE_PLAY){
 8000f82:	e052      	b.n	800102a <playGame+0xc2>
		uint32_t random;
		RNG_HandleTypeDef hrng = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
		hrng.Instance = RNG;
 8000f90:	4b2c      	ldr	r3, [pc, #176]	@ (8001044 <playGame+0xdc>)
 8000f92:	603b      	str	r3, [r7, #0]
		HAL_RNG_Init(&hrng);
 8000f94:	463b      	mov	r3, r7
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 ffd2 	bl	8005f40 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng, &random);
 8000f9c:	f107 0210 	add.w	r2, r7, #16
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fff5 	bl	8005f94 <HAL_RNG_GenerateRandomNumber>

		uint16_t randomFrom0To18 = random%19;
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <playGame+0xe0>)
 8000fae:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb2:	1aca      	subs	r2, r1, r3
 8000fb4:	0852      	lsrs	r2, r2, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	091a      	lsrs	r2, r3, #4
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	1aca      	subs	r2, r1, r3
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	82fb      	strh	r3, [r7, #22]
		setFallingBlock(randomFrom0To18);
 8000fca:	8afb      	ldrh	r3, [r7, #22]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fb33 	bl	8001638 <setFallingBlock>

		generateFallingBlock(fallingBlock);
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <playGame+0xe4>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fb3e 	bl	8001658 <generateFallingBlock>
		HAL_Delay(1000);
 8000fdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe0:	f003 fa92 	bl	8004508 <HAL_Delay>
		while(isBlockFalling){
 8000fe4:	e019      	b.n	800101a <playGame+0xb2>
			moveBlockDown(fallingBlock, fallingBlockX, fallingBlockY);
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <playGame+0xe4>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	4a19      	ldr	r2, [pc, #100]	@ (8001050 <playGame+0xe8>)
 8000fec:	8811      	ldrh	r1, [r2, #0]
 8000fee:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <playGame+0xec>)
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 ff0e 	bl	8001e14 <moveBlockDown>
			if(getScheduledEvents() & (1<<4)){
 8000ff8:	f7ff fe5e 	bl	8000cb8 <getScheduledEvents>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <playGame+0xaa>
				setGameState(GAME_STATE_END);
 8001006:	2003      	movs	r0, #3
 8001008:	f000 f8ec 	bl	80011e4 <setGameState>
				isBlockFalling = false;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <playGame+0xf0>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001016:	f003 fa77 	bl	8004508 <HAL_Delay>
		while(isBlockFalling){
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <playGame+0xf0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1e1      	bne.n	8000fe6 <playGame+0x7e>
		}

		HAL_Delay(1000);
 8001022:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001026:	f003 fa6f 	bl	8004508 <HAL_Delay>
	while(getGameState() == GAME_STATE_PLAY){
 800102a:	f000 f8eb 	bl	8001204 <getGameState>
 800102e:	4603      	mov	r3, r0
 8001030:	2b02      	cmp	r3, #2
 8001032:	d0a7      	beq.n	8000f84 <playGame+0x1c>
	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40001400 	.word	0x40001400
 8001044:	50060800 	.word	0x50060800
 8001048:	af286bcb 	.word	0xaf286bcb
 800104c:	20000002 	.word	0x20000002
 8001050:	20025d36 	.word	0x20025d36
 8001054:	20025d38 	.word	0x20025d38
 8001058:	20025d3a 	.word	0x20025d3a

0800105c <youLoseIdiot>:

void youLoseIdiot(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_GREY);
 8001060:	f24f 71de 	movw	r1, #63454	@ 0xf7de
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fd4f 	bl	8000b08 <LCD_Clear>
	timerStop(TIM7_0);
 800106a:	4803      	ldr	r0, [pc, #12]	@ (8001078 <youLoseIdiot+0x1c>)
 800106c:	f002 fb46 	bl	80036fc <timerStop>
	printSec();
 8001070:	f000 f804 	bl	800107c <printSec>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40001400 	.word	0x40001400

0800107c <printSec>:

void printSec(){
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
	uint16_t seconds = ((TIM7_0->CNT) + 0xffff*getTimerRollover())/2200;
 8001082:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <printSec+0x148>)
 8001084:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001086:	f002 fa51 	bl	800352c <getTimerRollover>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4613      	mov	r3, r2
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	4423      	add	r3, r4
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	4a4b      	ldr	r2, [pc, #300]	@ (80011c8 <printSec+0x14c>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	80fb      	strh	r3, [r7, #6]
	LCD_DisplayChar(34, 150, 'T');
 80010a2:	2254      	movs	r2, #84	@ 0x54
 80010a4:	2196      	movs	r1, #150	@ 0x96
 80010a6:	2022      	movs	r0, #34	@ 0x22
 80010a8:	f7ff fdde 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(45, 150, 'i');
 80010ac:	2269      	movs	r2, #105	@ 0x69
 80010ae:	2196      	movs	r1, #150	@ 0x96
 80010b0:	202d      	movs	r0, #45	@ 0x2d
 80010b2:	f7ff fdd9 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(57, 150, 'm');
 80010b6:	226d      	movs	r2, #109	@ 0x6d
 80010b8:	2196      	movs	r1, #150	@ 0x96
 80010ba:	2039      	movs	r0, #57	@ 0x39
 80010bc:	f7ff fdd4 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(71, 150, 'e');
 80010c0:	2265      	movs	r2, #101	@ 0x65
 80010c2:	2196      	movs	r1, #150	@ 0x96
 80010c4:	2047      	movs	r0, #71	@ 0x47
 80010c6:	f7ff fdcf 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, ':');
 80010ca:	223a      	movs	r2, #58	@ 0x3a
 80010cc:	2196      	movs	r1, #150	@ 0x96
 80010ce:	2050      	movs	r0, #80	@ 0x50
 80010d0:	f7ff fdca 	bl	8000c68 <LCD_DisplayChar>

	LCD_DisplayChar(100, 150, '(');
 80010d4:	2228      	movs	r2, #40	@ 0x28
 80010d6:	2196      	movs	r1, #150	@ 0x96
 80010d8:	2064      	movs	r0, #100	@ 0x64
 80010da:	f7ff fdc5 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(110, 150, 's');
 80010de:	2273      	movs	r2, #115	@ 0x73
 80010e0:	2196      	movs	r1, #150	@ 0x96
 80010e2:	206e      	movs	r0, #110	@ 0x6e
 80010e4:	f7ff fdc0 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(120, 150, 'e');
 80010e8:	2265      	movs	r2, #101	@ 0x65
 80010ea:	2196      	movs	r1, #150	@ 0x96
 80010ec:	2078      	movs	r0, #120	@ 0x78
 80010ee:	f7ff fdbb 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(130, 150, 'c');
 80010f2:	2263      	movs	r2, #99	@ 0x63
 80010f4:	2196      	movs	r1, #150	@ 0x96
 80010f6:	2082      	movs	r0, #130	@ 0x82
 80010f8:	f7ff fdb6 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(140, 150, 'o');
 80010fc:	226f      	movs	r2, #111	@ 0x6f
 80010fe:	2196      	movs	r1, #150	@ 0x96
 8001100:	208c      	movs	r0, #140	@ 0x8c
 8001102:	f7ff fdb1 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(150, 150, 'n');
 8001106:	226e      	movs	r2, #110	@ 0x6e
 8001108:	2196      	movs	r1, #150	@ 0x96
 800110a:	2096      	movs	r0, #150	@ 0x96
 800110c:	f7ff fdac 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(160, 150, 'd');
 8001110:	2264      	movs	r2, #100	@ 0x64
 8001112:	2196      	movs	r1, #150	@ 0x96
 8001114:	20a0      	movs	r0, #160	@ 0xa0
 8001116:	f7ff fda7 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(170, 150, 's');
 800111a:	2273      	movs	r2, #115	@ 0x73
 800111c:	2196      	movs	r1, #150	@ 0x96
 800111e:	20aa      	movs	r0, #170	@ 0xaa
 8001120:	f7ff fda2 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(180, 150, ')');
 8001124:	2229      	movs	r2, #41	@ 0x29
 8001126:	2196      	movs	r1, #150	@ 0x96
 8001128:	20b4      	movs	r0, #180	@ 0xb4
 800112a:	f7ff fd9d 	bl	8000c68 <LCD_DisplayChar>

	char seconds_singlesPlace = seconds%10 + '0';
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <printSec+0x150>)
 8001132:	fba3 1302 	umull	r1, r3, r3, r2
 8001136:	08d9      	lsrs	r1, r3, #3
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	3330      	adds	r3, #48	@ 0x30
 8001148:	717b      	strb	r3, [r7, #5]
	char seconds_tensPlace = (seconds/10)%10 + '0';
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4a1f      	ldr	r2, [pc, #124]	@ (80011cc <printSec+0x150>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <printSec+0x150>)
 8001158:	fba3 1302 	umull	r1, r3, r3, r2
 800115c:	08d9      	lsrs	r1, r3, #3
 800115e:	460b      	mov	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	3330      	adds	r3, #48	@ 0x30
 800116e:	713b      	strb	r3, [r7, #4]
	char seconds_hundredsPlace = (seconds/100)%10+'0';
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <printSec+0x154>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <printSec+0x150>)
 800117e:	fba3 1302 	umull	r1, r3, r3, r2
 8001182:	08d9      	lsrs	r1, r3, #3
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3330      	adds	r3, #48	@ 0x30
 8001194:	70fb      	strb	r3, [r7, #3]

	LCD_DisplayChar(100, 180, seconds_singlesPlace);
 8001196:	797b      	ldrb	r3, [r7, #5]
 8001198:	461a      	mov	r2, r3
 800119a:	21b4      	movs	r1, #180	@ 0xb4
 800119c:	2064      	movs	r0, #100	@ 0x64
 800119e:	f7ff fd63 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(85, 180, seconds_tensPlace);
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	461a      	mov	r2, r3
 80011a6:	21b4      	movs	r1, #180	@ 0xb4
 80011a8:	2055      	movs	r0, #85	@ 0x55
 80011aa:	f7ff fd5d 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(70, 180, seconds_hundredsPlace);
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	461a      	mov	r2, r3
 80011b2:	21b4      	movs	r1, #180	@ 0xb4
 80011b4:	2046      	movs	r0, #70	@ 0x46
 80011b6:	f7ff fd57 	bl	8000c68 <LCD_DisplayChar>
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40001400 	.word	0x40001400
 80011c8:	1dca01dd 	.word	0x1dca01dd
 80011cc:	cccccccd 	.word	0xcccccccd
 80011d0:	51eb851f 	.word	0x51eb851f

080011d4 <updateTick>:


void updateTick(){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <setGameState>:


void setGameState(uint16_t newState){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	gameState = newState;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <setGameState+0x1c>)
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	8013      	strh	r3, [r2, #0]
};
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	20025974 	.word	0x20025974

08001204 <getGameState>:

uint16_t getGameState(void){
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	return gameState;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <getGameState+0x14>)
 800120a:	881b      	ldrh	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20025974 	.word	0x20025974

0800121c <iWantToRotateBlock>:


void iWantToRotateBlock(void){
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	incomingBlockRotation = 1;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <iWantToRotateBlock+0x14>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	20025d3b 	.word	0x20025d3b

08001234 <rotateBlock>:

void rotateBlock(uint16_t fallingBlock){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]

	switch(fallingBlock){
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	2b11      	cmp	r3, #17
 8001242:	f200 81ef 	bhi.w	8001624 <rotateBlock+0x3f0>
 8001246:	a201      	add	r2, pc, #4	@ (adr r2, 800124c <rotateBlock+0x18>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	08001295 	.word	0x08001295
 8001250:	080012c7 	.word	0x080012c7
 8001254:	080012f9 	.word	0x080012f9
 8001258:	0800132b 	.word	0x0800132b
 800125c:	0800135d 	.word	0x0800135d
 8001260:	0800138f 	.word	0x0800138f
 8001264:	080013c1 	.word	0x080013c1
 8001268:	080013f3 	.word	0x080013f3
 800126c:	08001425 	.word	0x08001425
 8001270:	08001457 	.word	0x08001457
 8001274:	08001489 	.word	0x08001489
 8001278:	080014bb 	.word	0x080014bb
 800127c:	080014ed 	.word	0x080014ed
 8001280:	0800151f 	.word	0x0800151f
 8001284:	0800155d 	.word	0x0800155d
 8001288:	0800158f 	.word	0x0800158f
 800128c:	080015c1 	.word	0x080015c1
 8001290:	080015f3 	.word	0x080015f3
		case HERO_0:
			setFallingBlock(HERO_1);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 f9cf 	bl	8001638 <setFallingBlock>
			clearBlock(HERO_0, fallingBlockX, fallingBlockY);
 800129a:	4bad      	ldr	r3, [pc, #692]	@ (8001550 <rotateBlock+0x31c>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4aad      	ldr	r2, [pc, #692]	@ (8001554 <rotateBlock+0x320>)
 80012a0:	8812      	ldrh	r2, [r2, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 ffe7 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80012aa:	f000 f9ff 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(HERO_1, fallingBlockX, fallingBlockY);
 80012ae:	4ba8      	ldr	r3, [pc, #672]	@ (8001550 <rotateBlock+0x31c>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	4aa8      	ldr	r2, [pc, #672]	@ (8001554 <rotateBlock+0x320>)
 80012b4:	8812      	ldrh	r2, [r2, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	2001      	movs	r0, #1
 80012ba:	f000 fa1f 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 80012be:	4ba6      	ldr	r3, [pc, #664]	@ (8001558 <rotateBlock+0x324>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
			break;
 80012c4:	e1ae      	b.n	8001624 <rotateBlock+0x3f0>
		case HERO_1:
			setFallingBlock(HERO_0);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f9b6 	bl	8001638 <setFallingBlock>
			clearBlock(HERO_1, fallingBlockX, fallingBlockY);
 80012cc:	4ba0      	ldr	r3, [pc, #640]	@ (8001550 <rotateBlock+0x31c>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	4aa0      	ldr	r2, [pc, #640]	@ (8001554 <rotateBlock+0x320>)
 80012d2:	8812      	ldrh	r2, [r2, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 ffce 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80012dc:	f000 f9e6 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(HERO_0, fallingBlockX, fallingBlockY);
 80012e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001550 <rotateBlock+0x31c>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	4a9b      	ldr	r2, [pc, #620]	@ (8001554 <rotateBlock+0x320>)
 80012e6:	8812      	ldrh	r2, [r2, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 fa06 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 80012f0:	4b99      	ldr	r3, [pc, #612]	@ (8001558 <rotateBlock+0x324>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
			break;
 80012f6:	e195      	b.n	8001624 <rotateBlock+0x3f0>
		case ORANGE_RICKY_0:
			setFallingBlock(ORANGE_RICKY_1);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f99d 	bl	8001638 <setFallingBlock>
			clearBlock(ORANGE_RICKY_0, fallingBlockX, fallingBlockY);
 80012fe:	4b94      	ldr	r3, [pc, #592]	@ (8001550 <rotateBlock+0x31c>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	4a94      	ldr	r2, [pc, #592]	@ (8001554 <rotateBlock+0x320>)
 8001304:	8812      	ldrh	r2, [r2, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	2002      	movs	r0, #2
 800130a:	f000 ffb5 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 800130e:	f000 f9cd 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(ORANGE_RICKY_1, fallingBlockX, fallingBlockY);
 8001312:	4b8f      	ldr	r3, [pc, #572]	@ (8001550 <rotateBlock+0x31c>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4a8f      	ldr	r2, [pc, #572]	@ (8001554 <rotateBlock+0x320>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f9ed 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 8001322:	4b8d      	ldr	r3, [pc, #564]	@ (8001558 <rotateBlock+0x324>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
			break;
 8001328:	e17c      	b.n	8001624 <rotateBlock+0x3f0>
		case ORANGE_RICKY_1:
			setFallingBlock(ORANGE_RICKY_2);
 800132a:	2004      	movs	r0, #4
 800132c:	f000 f984 	bl	8001638 <setFallingBlock>
			clearBlock(ORANGE_RICKY_1, fallingBlockX, fallingBlockY);
 8001330:	4b87      	ldr	r3, [pc, #540]	@ (8001550 <rotateBlock+0x31c>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4a87      	ldr	r2, [pc, #540]	@ (8001554 <rotateBlock+0x320>)
 8001336:	8812      	ldrh	r2, [r2, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	2003      	movs	r0, #3
 800133c:	f000 ff9c 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001340:	f000 f9b4 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(ORANGE_RICKY_2, fallingBlockX, fallingBlockY);
 8001344:	4b82      	ldr	r3, [pc, #520]	@ (8001550 <rotateBlock+0x31c>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	4a82      	ldr	r2, [pc, #520]	@ (8001554 <rotateBlock+0x320>)
 800134a:	8812      	ldrh	r2, [r2, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	2004      	movs	r0, #4
 8001350:	f000 f9d4 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 8001354:	4b80      	ldr	r3, [pc, #512]	@ (8001558 <rotateBlock+0x324>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
			break;
 800135a:	e163      	b.n	8001624 <rotateBlock+0x3f0>
		case ORANGE_RICKY_2:
			setFallingBlock(ORANGE_RICKY_3);
 800135c:	2005      	movs	r0, #5
 800135e:	f000 f96b 	bl	8001638 <setFallingBlock>
			clearBlock(ORANGE_RICKY_2, fallingBlockX, fallingBlockY);
 8001362:	4b7b      	ldr	r3, [pc, #492]	@ (8001550 <rotateBlock+0x31c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	4a7b      	ldr	r2, [pc, #492]	@ (8001554 <rotateBlock+0x320>)
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	2004      	movs	r0, #4
 800136e:	f000 ff83 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001372:	f000 f99b 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(ORANGE_RICKY_3, fallingBlockX, fallingBlockY);
 8001376:	4b76      	ldr	r3, [pc, #472]	@ (8001550 <rotateBlock+0x31c>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4a76      	ldr	r2, [pc, #472]	@ (8001554 <rotateBlock+0x320>)
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	2005      	movs	r0, #5
 8001382:	f000 f9bb 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 8001386:	4b74      	ldr	r3, [pc, #464]	@ (8001558 <rotateBlock+0x324>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
			break;
 800138c:	e14a      	b.n	8001624 <rotateBlock+0x3f0>
		case ORANGE_RICKY_3:
			setFallingBlock(ORANGE_RICKY_0);
 800138e:	2002      	movs	r0, #2
 8001390:	f000 f952 	bl	8001638 <setFallingBlock>
			clearBlock(ORANGE_RICKY_3, fallingBlockX, fallingBlockY);
 8001394:	4b6e      	ldr	r3, [pc, #440]	@ (8001550 <rotateBlock+0x31c>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4a6e      	ldr	r2, [pc, #440]	@ (8001554 <rotateBlock+0x320>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	2005      	movs	r0, #5
 80013a0:	f000 ff6a 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80013a4:	f000 f982 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(ORANGE_RICKY_0, fallingBlockX, fallingBlockY);
 80013a8:	4b69      	ldr	r3, [pc, #420]	@ (8001550 <rotateBlock+0x31c>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4a69      	ldr	r2, [pc, #420]	@ (8001554 <rotateBlock+0x320>)
 80013ae:	8812      	ldrh	r2, [r2, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 f9a2 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 80013b8:	4b67      	ldr	r3, [pc, #412]	@ (8001558 <rotateBlock+0x324>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
			break;
 80013be:	e131      	b.n	8001624 <rotateBlock+0x3f0>
		case BLUE_RICKY_0:
			setFallingBlock(BLUE_RICKY_1);
 80013c0:	2007      	movs	r0, #7
 80013c2:	f000 f939 	bl	8001638 <setFallingBlock>
			clearBlock(BLUE_RICKY_0, fallingBlockX, fallingBlockY);
 80013c6:	4b62      	ldr	r3, [pc, #392]	@ (8001550 <rotateBlock+0x31c>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	4a62      	ldr	r2, [pc, #392]	@ (8001554 <rotateBlock+0x320>)
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	2006      	movs	r0, #6
 80013d2:	f000 ff51 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80013d6:	f000 f969 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(BLUE_RICKY_1, fallingBlockX, fallingBlockY);
 80013da:	4b5d      	ldr	r3, [pc, #372]	@ (8001550 <rotateBlock+0x31c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <rotateBlock+0x320>)
 80013e0:	8812      	ldrh	r2, [r2, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	2007      	movs	r0, #7
 80013e6:	f000 f989 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 80013ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001558 <rotateBlock+0x324>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
			break;
 80013f0:	e118      	b.n	8001624 <rotateBlock+0x3f0>
		case BLUE_RICKY_1:
			setFallingBlock(BLUE_RICKY_2);
 80013f2:	2008      	movs	r0, #8
 80013f4:	f000 f920 	bl	8001638 <setFallingBlock>
			clearBlock(BLUE_RICKY_1, fallingBlockX, fallingBlockY);
 80013f8:	4b55      	ldr	r3, [pc, #340]	@ (8001550 <rotateBlock+0x31c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	4a55      	ldr	r2, [pc, #340]	@ (8001554 <rotateBlock+0x320>)
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	2007      	movs	r0, #7
 8001404:	f000 ff38 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001408:	f000 f950 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(BLUE_RICKY_2, fallingBlockX, fallingBlockY);
 800140c:	4b50      	ldr	r3, [pc, #320]	@ (8001550 <rotateBlock+0x31c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4a50      	ldr	r2, [pc, #320]	@ (8001554 <rotateBlock+0x320>)
 8001412:	8812      	ldrh	r2, [r2, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	2008      	movs	r0, #8
 8001418:	f000 f970 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 800141c:	4b4e      	ldr	r3, [pc, #312]	@ (8001558 <rotateBlock+0x324>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
			break;
 8001422:	e0ff      	b.n	8001624 <rotateBlock+0x3f0>
		case BLUE_RICKY_2:
			setFallingBlock(BLUE_RICKY_3);
 8001424:	2009      	movs	r0, #9
 8001426:	f000 f907 	bl	8001638 <setFallingBlock>
			clearBlock(BLUE_RICKY_2, fallingBlockX, fallingBlockY);
 800142a:	4b49      	ldr	r3, [pc, #292]	@ (8001550 <rotateBlock+0x31c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	4a49      	ldr	r2, [pc, #292]	@ (8001554 <rotateBlock+0x320>)
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	2008      	movs	r0, #8
 8001436:	f000 ff1f 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 800143a:	f000 f937 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(BLUE_RICKY_3, fallingBlockX, fallingBlockY);
 800143e:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <rotateBlock+0x31c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	4a44      	ldr	r2, [pc, #272]	@ (8001554 <rotateBlock+0x320>)
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	2009      	movs	r0, #9
 800144a:	f000 f957 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 800144e:	4b42      	ldr	r3, [pc, #264]	@ (8001558 <rotateBlock+0x324>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
			break;
 8001454:	e0e6      	b.n	8001624 <rotateBlock+0x3f0>
		case BLUE_RICKY_3:
			setFallingBlock(BLUE_RICKY_0);
 8001456:	2006      	movs	r0, #6
 8001458:	f000 f8ee 	bl	8001638 <setFallingBlock>
			clearBlock(BLUE_RICKY_3, fallingBlockX, fallingBlockY);
 800145c:	4b3c      	ldr	r3, [pc, #240]	@ (8001550 <rotateBlock+0x31c>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4a3c      	ldr	r2, [pc, #240]	@ (8001554 <rotateBlock+0x320>)
 8001462:	8812      	ldrh	r2, [r2, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	2009      	movs	r0, #9
 8001468:	f000 ff06 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 800146c:	f000 f91e 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(BLUE_RICKY_0, fallingBlockX, fallingBlockY);
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <rotateBlock+0x31c>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <rotateBlock+0x320>)
 8001476:	8812      	ldrh	r2, [r2, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	2006      	movs	r0, #6
 800147c:	f000 f93e 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation = 0;
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <rotateBlock+0x324>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
			break;
 8001486:	e0cd      	b.n	8001624 <rotateBlock+0x3f0>
		case CLEVELAND_Z_0:
			setFallingBlock(CLEVELAND_Z_1);
 8001488:	200b      	movs	r0, #11
 800148a:	f000 f8d5 	bl	8001638 <setFallingBlock>
			clearBlock(CLEVELAND_Z_0, fallingBlockX, fallingBlockY);
 800148e:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <rotateBlock+0x31c>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4a30      	ldr	r2, [pc, #192]	@ (8001554 <rotateBlock+0x320>)
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	200a      	movs	r0, #10
 800149a:	f000 feed 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 800149e:	f000 f905 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(CLEVELAND_Z_1, fallingBlockX, fallingBlockY);
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <rotateBlock+0x31c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001554 <rotateBlock+0x320>)
 80014a8:	8812      	ldrh	r2, [r2, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	200b      	movs	r0, #11
 80014ae:	f000 f925 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <rotateBlock+0x324>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
			break;
 80014b8:	e0b4      	b.n	8001624 <rotateBlock+0x3f0>
		case CLEVELAND_Z_1:
			setFallingBlock(CLEVELAND_Z_0);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 f8bc 	bl	8001638 <setFallingBlock>
			clearBlock(CLEVELAND_Z_1, fallingBlockX, fallingBlockY);
 80014c0:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <rotateBlock+0x31c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <rotateBlock+0x320>)
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	200b      	movs	r0, #11
 80014cc:	f000 fed4 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80014d0:	f000 f8ec 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(CLEVELAND_Z_0, fallingBlockX, fallingBlockY);
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <rotateBlock+0x31c>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <rotateBlock+0x320>)
 80014da:	8812      	ldrh	r2, [r2, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	200a      	movs	r0, #10
 80014e0:	f000 f90c 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <rotateBlock+0x324>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			break;
 80014ea:	e09b      	b.n	8001624 <rotateBlock+0x3f0>
		case RHODE_ISLAND_Z_0:
			setFallingBlock(RHODE_ISLAND_Z_1);
 80014ec:	200d      	movs	r0, #13
 80014ee:	f000 f8a3 	bl	8001638 <setFallingBlock>
			clearBlock(RHODE_ISLAND_Z_0, fallingBlockX, fallingBlockY);
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <rotateBlock+0x31c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <rotateBlock+0x320>)
 80014f8:	8812      	ldrh	r2, [r2, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	200c      	movs	r0, #12
 80014fe:	f000 febb 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001502:	f000 f8d3 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(RHODE_ISLAND_Z_1, fallingBlockX, fallingBlockY);
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <rotateBlock+0x31c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <rotateBlock+0x320>)
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	200d      	movs	r0, #13
 8001512:	f000 f8f3 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <rotateBlock+0x324>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
			break;
 800151c:	e082      	b.n	8001624 <rotateBlock+0x3f0>
		case RHODE_ISLAND_Z_1:
			setFallingBlock(RHODE_ISLAND_Z_0);
 800151e:	200c      	movs	r0, #12
 8001520:	f000 f88a 	bl	8001638 <setFallingBlock>
			clearBlock(RHODE_ISLAND_Z_1, fallingBlockX, fallingBlockY);
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <rotateBlock+0x31c>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <rotateBlock+0x320>)
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	200d      	movs	r0, #13
 8001530:	f000 fea2 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001534:	f000 f8ba 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(RHODE_ISLAND_Z_0, fallingBlockX, fallingBlockY);
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <rotateBlock+0x31c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <rotateBlock+0x320>)
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	200c      	movs	r0, #12
 8001544:	f000 f8da 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 8001548:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <rotateBlock+0x324>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
			break;
 800154e:	e069      	b.n	8001624 <rotateBlock+0x3f0>
 8001550:	20025d36 	.word	0x20025d36
 8001554:	20025d38 	.word	0x20025d38
 8001558:	20025d3b 	.word	0x20025d3b
		case TEEWEE_0:
			setFallingBlock(TEEWEE_1);
 800155c:	200f      	movs	r0, #15
 800155e:	f000 f86b 	bl	8001638 <setFallingBlock>
			clearBlock(TEEWEE_0, fallingBlockX, fallingBlockY);
 8001562:	4b32      	ldr	r3, [pc, #200]	@ (800162c <rotateBlock+0x3f8>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <rotateBlock+0x3fc>)
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	200e      	movs	r0, #14
 800156e:	f000 fe83 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001572:	f000 f89b 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(TEEWEE_1, fallingBlockX, fallingBlockY);
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <rotateBlock+0x3f8>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	4a2d      	ldr	r2, [pc, #180]	@ (8001630 <rotateBlock+0x3fc>)
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	200f      	movs	r0, #15
 8001582:	f000 f8bb 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <rotateBlock+0x400>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
			break;
 800158c:	e04a      	b.n	8001624 <rotateBlock+0x3f0>
		case TEEWEE_1:
			setFallingBlock(TEEWEE_2);
 800158e:	2010      	movs	r0, #16
 8001590:	f000 f852 	bl	8001638 <setFallingBlock>
			clearBlock(TEEWEE_1, fallingBlockX, fallingBlockY);
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <rotateBlock+0x3f8>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	4a25      	ldr	r2, [pc, #148]	@ (8001630 <rotateBlock+0x3fc>)
 800159a:	8812      	ldrh	r2, [r2, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 fe6a 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80015a4:	f000 f882 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(TEEWEE_2, fallingBlockX, fallingBlockY);
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <rotateBlock+0x3f8>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <rotateBlock+0x3fc>)
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	2010      	movs	r0, #16
 80015b4:	f000 f8a2 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <rotateBlock+0x400>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
			break;
 80015be:	e031      	b.n	8001624 <rotateBlock+0x3f0>
		case TEEWEE_2:
			setFallingBlock(TEEWEE_3);
 80015c0:	2011      	movs	r0, #17
 80015c2:	f000 f839 	bl	8001638 <setFallingBlock>
			clearBlock(TEEWEE_2, fallingBlockX, fallingBlockY);
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <rotateBlock+0x3f8>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <rotateBlock+0x3fc>)
 80015cc:	8812      	ldrh	r2, [r2, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	2010      	movs	r0, #16
 80015d2:	f000 fe51 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 80015d6:	f000 f869 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(TEEWEE_3, fallingBlockX, fallingBlockY);
 80015da:	4b14      	ldr	r3, [pc, #80]	@ (800162c <rotateBlock+0x3f8>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <rotateBlock+0x3fc>)
 80015e0:	8812      	ldrh	r2, [r2, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	2011      	movs	r0, #17
 80015e6:	f000 f889 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <rotateBlock+0x400>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
			break;
 80015f0:	e018      	b.n	8001624 <rotateBlock+0x3f0>
		case TEEWEE_3:
			setFallingBlock(TEEWEE_0);
 80015f2:	200e      	movs	r0, #14
 80015f4:	f000 f820 	bl	8001638 <setFallingBlock>
			clearBlock(TEEWEE_3, fallingBlockX, fallingBlockY);
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <rotateBlock+0x3f8>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <rotateBlock+0x3fc>)
 80015fe:	8812      	ldrh	r2, [r2, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	2011      	movs	r0, #17
 8001604:	f000 fe38 	bl	8002278 <clearBlock>
			clearFallingBlockMatrix();
 8001608:	f000 f850 	bl	80016ac <clearFallingBlockMatrix>
			putBlockIntoFallingMatrix(TEEWEE_0, fallingBlockX, fallingBlockY);
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <rotateBlock+0x3f8>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <rotateBlock+0x3fc>)
 8001612:	8812      	ldrh	r2, [r2, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	200e      	movs	r0, #14
 8001618:	f000 f870 	bl	80016fc <putBlockIntoFallingMatrix>
			incomingBlockRotation=0;
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <rotateBlock+0x400>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
			break;
 8001622:	bf00      	nop
		break;
	}
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20025d36 	.word	0x20025d36
 8001630:	20025d38 	.word	0x20025d38
 8001634:	20025d3b 	.word	0x20025d3b

08001638 <setFallingBlock>:


void setFallingBlock(uint16_t updateFallingBlock){
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	fallingBlock = updateFallingBlock;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <setFallingBlock+0x1c>)
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	8013      	strh	r3, [r2, #0]
};
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	20000002 	.word	0x20000002

08001658 <generateFallingBlock>:

uint16_t getFallingBlock(void){
	return fallingBlock;
};

void generateFallingBlock(uint16_t fallingBlock){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	clearFallingBlockMatrix();
 8001662:	f000 f823 	bl	80016ac <clearFallingBlockMatrix>
	fallingBlockX = 80;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <generateFallingBlock+0x48>)
 8001668:	2250      	movs	r2, #80	@ 0x50
 800166a:	801a      	strh	r2, [r3, #0]
	fallingBlockY = 0;
 800166c:	4b0d      	ldr	r3, [pc, #52]	@ (80016a4 <generateFallingBlock+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	801a      	strh	r2, [r3, #0]
	drawBlock(fallingBlock, fallingBlockX, fallingBlockY);
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <generateFallingBlock+0x48>)
 8001674:	8819      	ldrh	r1, [r3, #0]
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <generateFallingBlock+0x4c>)
 8001678:	881a      	ldrh	r2, [r3, #0]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fd3b 	bl	80020f8 <drawBlock>
	putBlockIntoFallingMatrix(fallingBlock, fallingBlockX, fallingBlockY);
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <generateFallingBlock+0x48>)
 8001684:	8819      	ldrh	r1, [r3, #0]
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <generateFallingBlock+0x4c>)
 8001688:	881a      	ldrh	r2, [r3, #0]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f835 	bl	80016fc <putBlockIntoFallingMatrix>
	isBlockFalling = 1;
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <generateFallingBlock+0x50>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]

}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20025d36 	.word	0x20025d36
 80016a4:	20025d38 	.word	0x20025d38
 80016a8:	20025d3a 	.word	0x20025d3a

080016ac <clearFallingBlockMatrix>:

void clearFallingBlockMatrix(void){
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
	for(int i=0; i<14; i++){
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	e015      	b.n	80016e4 <clearFallingBlockMatrix+0x38>
		for(int j=0; j<17; j++){
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	e00c      	b.n	80016d8 <clearFallingBlockMatrix+0x2c>
			fallingBlockMatrix[i][j]=0;
 80016be:	490e      	ldr	r1, [pc, #56]	@ (80016f8 <clearFallingBlockMatrix+0x4c>)
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	18ca      	adds	r2, r1, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<17; j++){
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	ddef      	ble.n	80016be <clearFallingBlockMatrix+0x12>
	for(int i=0; i<14; i++){
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b0d      	cmp	r3, #13
 80016e8:	dde6      	ble.n	80016b8 <clearFallingBlockMatrix+0xc>
		}
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	20025978 	.word	0x20025978

080016fc <putBlockIntoFallingMatrix>:

void putBlockIntoFallingMatrix(uint16_t randomNumber, uint16_t fallingBlockX, uint16_t fallingBlockY){
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	460b      	mov	r3, r1
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	807b      	strh	r3, [r7, #2]
	uint16_t matrixX = fallingBlockX/20+1;
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	4abb      	ldr	r2, [pc, #748]	@ (8001a00 <putBlockIntoFallingMatrix+0x304>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b29b      	uxth	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	81fb      	strh	r3, [r7, #14]
	uint16_t matrixY = fallingBlockY/20;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	4ab7      	ldr	r2, [pc, #732]	@ (8001a00 <putBlockIntoFallingMatrix+0x304>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	81bb      	strh	r3, [r7, #12]
	switch(fallingBlock){
 800172a:	4bb6      	ldr	r3, [pc, #728]	@ (8001a04 <putBlockIntoFallingMatrix+0x308>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	2b12      	cmp	r3, #18
 8001730:	f200 8367 	bhi.w	8001e02 <putBlockIntoFallingMatrix+0x706>
 8001734:	a201      	add	r2, pc, #4	@ (adr r2, 800173c <putBlockIntoFallingMatrix+0x40>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	08001789 	.word	0x08001789
 8001740:	080017b5 	.word	0x080017b5
 8001744:	080017e1 	.word	0x080017e1
 8001748:	0800183f 	.word	0x0800183f
 800174c:	08001899 	.word	0x08001899
 8001750:	080018f1 	.word	0x080018f1
 8001754:	0800194d 	.word	0x0800194d
 8001758:	080019a9 	.word	0x080019a9
 800175c:	08001a0d 	.word	0x08001a0d
 8001760:	08001a67 	.word	0x08001a67
 8001764:	08001ac5 	.word	0x08001ac5
 8001768:	08001b21 	.word	0x08001b21
 800176c:	08001b7d 	.word	0x08001b7d
 8001770:	08001bd9 	.word	0x08001bd9
 8001774:	08001c35 	.word	0x08001c35
 8001778:	08001c93 	.word	0x08001c93
 800177c:	08001cf1 	.word	0x08001cf1
 8001780:	08001d4b 	.word	0x08001d4b
 8001784:	08001da9 	.word	0x08001da9
		case HERO_0:
			for(int i=0; i<4; i++){
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e00e      	b.n	80017ac <putBlockIntoFallingMatrix+0xb0>
				fallingBlockMatrix[i+matrixX][matrixY]=1;
 800178e:	89fa      	ldrh	r2, [r7, #14]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	441a      	add	r2, r3
 8001794:	89b9      	ldrh	r1, [r7, #12]
 8001796:	489c      	ldr	r0, [pc, #624]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	4403      	add	r3, r0
 80017a0:	440b      	add	r3, r1
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<4; i++){
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	dded      	ble.n	800178e <putBlockIntoFallingMatrix+0x92>
			}
			break;
 80017b2:	e326      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case HERO_1:
			for(int i=0; i<4; i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e00e      	b.n	80017d8 <putBlockIntoFallingMatrix+0xdc>
				fallingBlockMatrix[matrixX][i+matrixY]=1;
 80017ba:	89fa      	ldrh	r2, [r7, #14]
 80017bc:	89b9      	ldrh	r1, [r7, #12]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4419      	add	r1, r3
 80017c2:	4891      	ldr	r0, [pc, #580]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	4403      	add	r3, r0
 80017cc:	440b      	add	r3, r1
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<4; i++){
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	3301      	adds	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	dded      	ble.n	80017ba <putBlockIntoFallingMatrix+0xbe>
			}
			break;
 80017de:	e310      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case ORANGE_RICKY_0:
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 80017e0:	89fa      	ldrh	r2, [r7, #14]
 80017e2:	89bb      	ldrh	r3, [r7, #12]
 80017e4:	1c59      	adds	r1, r3, #1
 80017e6:	4888      	ldr	r0, [pc, #544]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	4403      	add	r3, r0
 80017f0:	440b      	add	r3, r1
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	89bb      	ldrh	r3, [r7, #12]
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	4882      	ldr	r0, [pc, #520]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	4403      	add	r3, r0
 8001808:	440b      	add	r3, r1
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY+1]=1;
 800180e:	89fb      	ldrh	r3, [r7, #14]
 8001810:	1c9a      	adds	r2, r3, #2
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	487c      	ldr	r0, [pc, #496]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	4403      	add	r3, r0
 8001820:	440b      	add	r3, r1
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY]=1;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	1c9a      	adds	r2, r3, #2
 800182a:	89b9      	ldrh	r1, [r7, #12]
 800182c:	4876      	ldr	r0, [pc, #472]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	4403      	add	r3, r0
 8001836:	440b      	add	r3, r1
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
			break;
 800183c:	e2e1      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case ORANGE_RICKY_1:
			fallingBlockMatrix[matrixX][matrixY]=1;
 800183e:	89fa      	ldrh	r2, [r7, #14]
 8001840:	89b9      	ldrh	r1, [r7, #12]
 8001842:	4871      	ldr	r0, [pc, #452]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	4403      	add	r3, r0
 800184c:	440b      	add	r3, r1
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001852:	89fa      	ldrh	r2, [r7, #14]
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	486b      	ldr	r0, [pc, #428]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	4403      	add	r3, r0
 8001862:	440b      	add	r3, r1
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+2]=1;
 8001868:	89fa      	ldrh	r2, [r7, #14]
 800186a:	89bb      	ldrh	r3, [r7, #12]
 800186c:	1c99      	adds	r1, r3, #2
 800186e:	4866      	ldr	r0, [pc, #408]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	4403      	add	r3, r0
 8001878:	440b      	add	r3, r1
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+2]=1;
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	89bb      	ldrh	r3, [r7, #12]
 8001884:	1c99      	adds	r1, r3, #2
 8001886:	4860      	ldr	r0, [pc, #384]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	4403      	add	r3, r0
 8001890:	440b      	add	r3, r1
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
			break;
 8001896:	e2b4      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case ORANGE_RICKY_2:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001898:	89fa      	ldrh	r2, [r7, #14]
 800189a:	89b9      	ldrh	r1, [r7, #12]
 800189c:	485a      	ldr	r0, [pc, #360]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	4403      	add	r3, r0
 80018a6:	440b      	add	r3, r1
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	89b9      	ldrh	r1, [r7, #12]
 80018b2:	4855      	ldr	r0, [pc, #340]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	4403      	add	r3, r0
 80018bc:	440b      	add	r3, r1
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY]=1;
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	1c9a      	adds	r2, r3, #2
 80018c6:	89b9      	ldrh	r1, [r7, #12]
 80018c8:	484f      	ldr	r0, [pc, #316]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	4403      	add	r3, r0
 80018d2:	440b      	add	r3, r1
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 80018d8:	89fa      	ldrh	r2, [r7, #14]
 80018da:	89bb      	ldrh	r3, [r7, #12]
 80018dc:	1c59      	adds	r1, r3, #1
 80018de:	484a      	ldr	r0, [pc, #296]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	4403      	add	r3, r0
 80018e8:	440b      	add	r3, r1
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
			break;
 80018ee:	e288      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case ORANGE_RICKY_3:
			fallingBlockMatrix[matrixX][matrixY]=1;
 80018f0:	89fa      	ldrh	r2, [r7, #14]
 80018f2:	89b9      	ldrh	r1, [r7, #12]
 80018f4:	4844      	ldr	r0, [pc, #272]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	4403      	add	r3, r0
 80018fe:	440b      	add	r3, r1
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001904:	89fb      	ldrh	r3, [r7, #14]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	89b9      	ldrh	r1, [r7, #12]
 800190a:	483f      	ldr	r0, [pc, #252]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	4403      	add	r3, r0
 8001914:	440b      	add	r3, r1
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	89bb      	ldrh	r3, [r7, #12]
 8001920:	1c59      	adds	r1, r3, #1
 8001922:	4839      	ldr	r0, [pc, #228]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	4403      	add	r3, r0
 800192c:	440b      	add	r3, r1
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+2]=1;
 8001932:	89fb      	ldrh	r3, [r7, #14]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	89bb      	ldrh	r3, [r7, #12]
 8001938:	1c99      	adds	r1, r3, #2
 800193a:	4833      	ldr	r0, [pc, #204]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	4403      	add	r3, r0
 8001944:	440b      	add	r3, r1
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
			break;
 800194a:	e25a      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case BLUE_RICKY_0:
			fallingBlockMatrix[matrixX][matrixY]=1;
 800194c:	89fa      	ldrh	r2, [r7, #14]
 800194e:	89b9      	ldrh	r1, [r7, #12]
 8001950:	482d      	ldr	r0, [pc, #180]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	4403      	add	r3, r0
 800195a:	440b      	add	r3, r1
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001960:	89fa      	ldrh	r2, [r7, #14]
 8001962:	89bb      	ldrh	r3, [r7, #12]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	4828      	ldr	r0, [pc, #160]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	4403      	add	r3, r0
 8001970:	440b      	add	r3, r1
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	1c59      	adds	r1, r3, #1
 800197e:	4822      	ldr	r0, [pc, #136]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4413      	add	r3, r2
 8001986:	4403      	add	r3, r0
 8001988:	440b      	add	r3, r1
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY+1]=1;
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	1c9a      	adds	r2, r3, #2
 8001992:	89bb      	ldrh	r3, [r7, #12]
 8001994:	1c59      	adds	r1, r3, #1
 8001996:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	4403      	add	r3, r0
 80019a0:	440b      	add	r3, r1
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
			break;
 80019a6:	e22c      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case BLUE_RICKY_1:
			fallingBlockMatrix[matrixX][matrixY]=1;
 80019a8:	89fa      	ldrh	r2, [r7, #14]
 80019aa:	89b9      	ldrh	r1, [r7, #12]
 80019ac:	4816      	ldr	r0, [pc, #88]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	4403      	add	r3, r0
 80019b6:	440b      	add	r3, r1
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	89b9      	ldrh	r1, [r7, #12]
 80019c2:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	4403      	add	r3, r0
 80019cc:	440b      	add	r3, r1
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 80019d2:	89fa      	ldrh	r2, [r7, #14]
 80019d4:	89bb      	ldrh	r3, [r7, #12]
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	4403      	add	r3, r0
 80019e2:	440b      	add	r3, r1
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+2]=1;
 80019e8:	89fa      	ldrh	r2, [r7, #14]
 80019ea:	89bb      	ldrh	r3, [r7, #12]
 80019ec:	1c99      	adds	r1, r3, #2
 80019ee:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <putBlockIntoFallingMatrix+0x30c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4413      	add	r3, r2
 80019f6:	4403      	add	r3, r0
 80019f8:	440b      	add	r3, r1
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
			break;
 80019fe:	e200      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
 8001a00:	cccccccd 	.word	0xcccccccd
 8001a04:	20000002 	.word	0x20000002
 8001a08:	20025978 	.word	0x20025978
		case BLUE_RICKY_2:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001a0c:	89fa      	ldrh	r2, [r7, #14]
 8001a0e:	89b9      	ldrh	r1, [r7, #12]
 8001a10:	48b6      	ldr	r0, [pc, #728]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	4403      	add	r3, r0
 8001a1a:	440b      	add	r3, r1
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	89b9      	ldrh	r1, [r7, #12]
 8001a26:	48b1      	ldr	r0, [pc, #708]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4403      	add	r3, r0
 8001a30:	440b      	add	r3, r1
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY]=1;
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	1c9a      	adds	r2, r3, #2
 8001a3a:	89b9      	ldrh	r1, [r7, #12]
 8001a3c:	48ab      	ldr	r0, [pc, #684]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	4403      	add	r3, r0
 8001a46:	440b      	add	r3, r1
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY+1]=1;
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	1c9a      	adds	r2, r3, #2
 8001a50:	89bb      	ldrh	r3, [r7, #12]
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	48a5      	ldr	r0, [pc, #660]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	440b      	add	r3, r1
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
			break;
 8001a64:	e1cd      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case BLUE_RICKY_3:
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	89b9      	ldrh	r1, [r7, #12]
 8001a6c:	489f      	ldr	r0, [pc, #636]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	4403      	add	r3, r0
 8001a76:	440b      	add	r3, r1
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001a7c:	89fb      	ldrh	r3, [r7, #14]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	89bb      	ldrh	r3, [r7, #12]
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	4899      	ldr	r0, [pc, #612]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4403      	add	r3, r0
 8001a8e:	440b      	add	r3, r1
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+2]=1;
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	89bb      	ldrh	r3, [r7, #12]
 8001a9a:	1c99      	adds	r1, r3, #2
 8001a9c:	4893      	ldr	r0, [pc, #588]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4403      	add	r3, r0
 8001aa6:	440b      	add	r3, r1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+2]=1;
 8001aac:	89fa      	ldrh	r2, [r7, #14]
 8001aae:	89bb      	ldrh	r3, [r7, #12]
 8001ab0:	1c99      	adds	r1, r3, #2
 8001ab2:	488e      	ldr	r0, [pc, #568]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	4403      	add	r3, r0
 8001abc:	440b      	add	r3, r1
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
			break;
 8001ac2:	e19e      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case CLEVELAND_Z_0:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001ac4:	89fa      	ldrh	r2, [r7, #14]
 8001ac6:	89b9      	ldrh	r1, [r7, #12]
 8001ac8:	4888      	ldr	r0, [pc, #544]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	4403      	add	r3, r0
 8001ad2:	440b      	add	r3, r1
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	89b9      	ldrh	r1, [r7, #12]
 8001ade:	4883      	ldr	r0, [pc, #524]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4403      	add	r3, r0
 8001ae8:	440b      	add	r3, r1
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	89bb      	ldrh	r3, [r7, #12]
 8001af4:	1c59      	adds	r1, r3, #1
 8001af6:	487d      	ldr	r0, [pc, #500]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	4403      	add	r3, r0
 8001b00:	440b      	add	r3, r1
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY+1]=1;
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	1c9a      	adds	r2, r3, #2
 8001b0a:	89bb      	ldrh	r3, [r7, #12]
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	4877      	ldr	r0, [pc, #476]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	4403      	add	r3, r0
 8001b18:	440b      	add	r3, r1
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
			break;
 8001b1e:	e170      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case CLEVELAND_Z_1:
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	89b9      	ldrh	r1, [r7, #12]
 8001b26:	4871      	ldr	r0, [pc, #452]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	011b      	lsls	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4403      	add	r3, r0
 8001b30:	440b      	add	r3, r1
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001b36:	89fb      	ldrh	r3, [r7, #14]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	1c59      	adds	r1, r3, #1
 8001b3e:	486b      	ldr	r0, [pc, #428]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4413      	add	r3, r2
 8001b46:	4403      	add	r3, r0
 8001b48:	440b      	add	r3, r1
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001b4e:	89fa      	ldrh	r2, [r7, #14]
 8001b50:	89bb      	ldrh	r3, [r7, #12]
 8001b52:	1c59      	adds	r1, r3, #1
 8001b54:	4865      	ldr	r0, [pc, #404]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4403      	add	r3, r0
 8001b5e:	440b      	add	r3, r1
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+2]=1;
 8001b64:	89fa      	ldrh	r2, [r7, #14]
 8001b66:	89bb      	ldrh	r3, [r7, #12]
 8001b68:	1c99      	adds	r1, r3, #2
 8001b6a:	4860      	ldr	r0, [pc, #384]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	4403      	add	r3, r0
 8001b74:	440b      	add	r3, r1
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
			break;
 8001b7a:	e142      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case RHODE_ISLAND_Z_0:
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001b7c:	89fa      	ldrh	r2, [r7, #14]
 8001b7e:	89bb      	ldrh	r3, [r7, #12]
 8001b80:	1c59      	adds	r1, r3, #1
 8001b82:	485a      	ldr	r0, [pc, #360]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	4403      	add	r3, r0
 8001b8c:	440b      	add	r3, r1
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	89bb      	ldrh	r3, [r7, #12]
 8001b98:	1c59      	adds	r1, r3, #1
 8001b9a:	4854      	ldr	r0, [pc, #336]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4403      	add	r3, r0
 8001ba4:	440b      	add	r3, r1
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	89b9      	ldrh	r1, [r7, #12]
 8001bb0:	484e      	ldr	r0, [pc, #312]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4403      	add	r3, r0
 8001bba:	440b      	add	r3, r1
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY]=1;
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	1c9a      	adds	r2, r3, #2
 8001bc4:	89b9      	ldrh	r1, [r7, #12]
 8001bc6:	4849      	ldr	r0, [pc, #292]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	4403      	add	r3, r0
 8001bd0:	440b      	add	r3, r1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
			break;
 8001bd6:	e114      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case RHODE_ISLAND_Z_1:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001bd8:	89fa      	ldrh	r2, [r7, #14]
 8001bda:	89b9      	ldrh	r1, [r7, #12]
 8001bdc:	4843      	ldr	r0, [pc, #268]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	4403      	add	r3, r0
 8001be6:	440b      	add	r3, r1
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001bec:	89fa      	ldrh	r2, [r7, #14]
 8001bee:	89bb      	ldrh	r3, [r7, #12]
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	483e      	ldr	r0, [pc, #248]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4403      	add	r3, r0
 8001bfc:	440b      	add	r3, r1
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	89bb      	ldrh	r3, [r7, #12]
 8001c08:	1c59      	adds	r1, r3, #1
 8001c0a:	4838      	ldr	r0, [pc, #224]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4413      	add	r3, r2
 8001c12:	4403      	add	r3, r0
 8001c14:	440b      	add	r3, r1
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+2]=1;
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	89bb      	ldrh	r3, [r7, #12]
 8001c20:	1c99      	adds	r1, r3, #2
 8001c22:	4832      	ldr	r0, [pc, #200]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	4403      	add	r3, r0
 8001c2c:	440b      	add	r3, r1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
			break;
 8001c32:	e0e6      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case TEEWEE_0:
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	89b9      	ldrh	r1, [r7, #12]
 8001c3a:	482c      	ldr	r0, [pc, #176]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	4403      	add	r3, r0
 8001c44:	440b      	add	r3, r1
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001c4a:	89fa      	ldrh	r2, [r7, #14]
 8001c4c:	89bb      	ldrh	r3, [r7, #12]
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	4826      	ldr	r0, [pc, #152]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	4403      	add	r3, r0
 8001c5a:	440b      	add	r3, r1
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	89bb      	ldrh	r3, [r7, #12]
 8001c66:	1c59      	adds	r1, r3, #1
 8001c68:	4820      	ldr	r0, [pc, #128]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	4403      	add	r3, r0
 8001c72:	440b      	add	r3, r1
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY+1]=1;
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	1c9a      	adds	r2, r3, #2
 8001c7c:	89bb      	ldrh	r3, [r7, #12]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	481a      	ldr	r0, [pc, #104]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	4403      	add	r3, r0
 8001c8a:	440b      	add	r3, r1
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
			break;
 8001c90:	e0b7      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case TEEWEE_1:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001c92:	89fa      	ldrh	r2, [r7, #14]
 8001c94:	89b9      	ldrh	r1, [r7, #12]
 8001c96:	4815      	ldr	r0, [pc, #84]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001c98:	4613      	mov	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4403      	add	r3, r0
 8001ca0:	440b      	add	r3, r1
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001ca6:	89fa      	ldrh	r2, [r7, #14]
 8001ca8:	89bb      	ldrh	r3, [r7, #12]
 8001caa:	1c59      	adds	r1, r3, #1
 8001cac:	480f      	ldr	r0, [pc, #60]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4403      	add	r3, r0
 8001cb6:	440b      	add	r3, r1
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+2]=1;
 8001cbc:	89fa      	ldrh	r2, [r7, #14]
 8001cbe:	89bb      	ldrh	r3, [r7, #12]
 8001cc0:	1c99      	adds	r1, r3, #2
 8001cc2:	480a      	ldr	r0, [pc, #40]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	4403      	add	r3, r0
 8001ccc:	440b      	add	r3, r1
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001cd2:	89fb      	ldrh	r3, [r7, #14]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	89bb      	ldrh	r3, [r7, #12]
 8001cd8:	1c59      	adds	r1, r3, #1
 8001cda:	4804      	ldr	r0, [pc, #16]	@ (8001cec <putBlockIntoFallingMatrix+0x5f0>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4403      	add	r3, r0
 8001ce4:	440b      	add	r3, r1
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
			break;
 8001cea:	e08a      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
 8001cec:	20025978 	.word	0x20025978
		case TEEWEE_2:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001cf0:	89fa      	ldrh	r2, [r7, #14]
 8001cf2:	89b9      	ldrh	r1, [r7, #12]
 8001cf4:	4846      	ldr	r0, [pc, #280]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4403      	add	r3, r0
 8001cfe:	440b      	add	r3, r1
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	89b9      	ldrh	r1, [r7, #12]
 8001d0a:	4841      	ldr	r0, [pc, #260]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4413      	add	r3, r2
 8001d12:	4403      	add	r3, r0
 8001d14:	440b      	add	r3, r1
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+2][matrixY]=1;
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	1c9a      	adds	r2, r3, #2
 8001d1e:	89b9      	ldrh	r1, [r7, #12]
 8001d20:	483b      	ldr	r0, [pc, #236]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	4403      	add	r3, r0
 8001d2a:	440b      	add	r3, r1
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001d30:	89fb      	ldrh	r3, [r7, #14]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	89bb      	ldrh	r3, [r7, #12]
 8001d36:	1c59      	adds	r1, r3, #1
 8001d38:	4835      	ldr	r0, [pc, #212]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	4403      	add	r3, r0
 8001d42:	440b      	add	r3, r1
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
			break;
 8001d48:	e05b      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case TEEWEE_3:
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001d4a:	89fa      	ldrh	r2, [r7, #14]
 8001d4c:	89bb      	ldrh	r3, [r7, #12]
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	482f      	ldr	r0, [pc, #188]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	4403      	add	r3, r0
 8001d5a:	440b      	add	r3, r1
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	89b9      	ldrh	r1, [r7, #12]
 8001d66:	482a      	ldr	r0, [pc, #168]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4403      	add	r3, r0
 8001d70:	440b      	add	r3, r1
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001d76:	89fb      	ldrh	r3, [r7, #14]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	89bb      	ldrh	r3, [r7, #12]
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	4824      	ldr	r0, [pc, #144]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	4403      	add	r3, r0
 8001d88:	440b      	add	r3, r1
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+2]=1;
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	1c99      	adds	r1, r3, #2
 8001d96:	481e      	ldr	r0, [pc, #120]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4403      	add	r3, r0
 8001da0:	440b      	add	r3, r1
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
			break;
 8001da6:	e02c      	b.n	8001e02 <putBlockIntoFallingMatrix+0x706>
		case SMASHBOY_0:
			fallingBlockMatrix[matrixX][matrixY]=1;
 8001da8:	89fa      	ldrh	r2, [r7, #14]
 8001daa:	89b9      	ldrh	r1, [r7, #12]
 8001dac:	4818      	ldr	r0, [pc, #96]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4413      	add	r3, r2
 8001db4:	4403      	add	r3, r0
 8001db6:	440b      	add	r3, r1
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY]=1;
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	89b9      	ldrh	r1, [r7, #12]
 8001dc2:	4813      	ldr	r0, [pc, #76]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	4403      	add	r3, r0
 8001dcc:	440b      	add	r3, r1
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX][matrixY+1]=1;
 8001dd2:	89fa      	ldrh	r2, [r7, #14]
 8001dd4:	89bb      	ldrh	r3, [r7, #12]
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	4403      	add	r3, r0
 8001de2:	440b      	add	r3, r1
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
			fallingBlockMatrix[matrixX+1][matrixY+1]=1;
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	89bb      	ldrh	r3, [r7, #12]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	4807      	ldr	r0, [pc, #28]	@ (8001e10 <putBlockIntoFallingMatrix+0x714>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	4403      	add	r3, r0
 8001dfa:	440b      	add	r3, r1
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
		break;
 8001e00:	bf00      	nop
	}
};
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20025978 	.word	0x20025978

08001e14 <moveBlockDown>:


// moves falling block down, if possible. If not, it updates the restingBlockMatrix and returns false.
bool moveBlockDown(uint16_t blockShape, uint16_t x, uint16_t y){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b090      	sub	sp, #64	@ 0x40
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	80bb      	strh	r3, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	807b      	strh	r3, [r7, #2]

	 // do a rotation first, if one is requested
	if(incomingBlockRotation){
 8001e26:	4b79      	ldr	r3, [pc, #484]	@ (800200c <moveBlockDown+0x1f8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <moveBlockDown+0x24>
					// write fcts that update the matrices and fallingBlock, then draw the new block
					rotateBlock(fallingBlock);
 8001e2e:	4b78      	ldr	r3, [pc, #480]	@ (8002010 <moveBlockDown+0x1fc>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f9fe 	bl	8001234 <rotateBlock>
					//
					// drawBlock(fallingBlock, fallingBlockX, fallingBlockY);
				}

	for(int i=0; i<14; i++){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e3c:	e01e      	b.n	8001e7c <moveBlockDown+0x68>
		for(int j=0; j<17; j++){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e42:	e015      	b.n	8001e70 <moveBlockDown+0x5c>
			currentFallingBlockMatrix [i][j]= fallingBlockMatrix[i][j];
 8001e44:	4973      	ldr	r1, [pc, #460]	@ (8002014 <moveBlockDown+0x200>)
 8001e46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e48:	4613      	mov	r3, r2
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	18ca      	adds	r2, r1, r3
 8001e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e52:	4413      	add	r3, r2
 8001e54:	7818      	ldrb	r0, [r3, #0]
 8001e56:	4970      	ldr	r1, [pc, #448]	@ (8002018 <moveBlockDown+0x204>)
 8001e58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	18ca      	adds	r2, r1, r3
 8001e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e64:	4413      	add	r3, r2
 8001e66:	4602      	mov	r2, r0
 8001e68:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<17; j++){
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	dde6      	ble.n	8001e44 <moveBlockDown+0x30>
	for(int i=0; i<14; i++){
 8001e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e78:	3301      	adds	r3, #1
 8001e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e7e:	2b0d      	cmp	r3, #13
 8001e80:	dddd      	ble.n	8001e3e <moveBlockDown+0x2a>
	}



	//copy row onto one below it, starting at bottom
	for(int i=15; i>-1; i--){
 8001e82:	230f      	movs	r3, #15
 8001e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e86:	e02d      	b.n	8001ee4 <moveBlockDown+0xd0>
		for(int j=1; j<14; j++){
 8001e88:	2301      	movs	r3, #1
 8001e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e8c:	e024      	b.n	8001ed8 <moveBlockDown+0xc4>
			if(currentFallingBlockMatrix[j][i] == 1){
 8001e8e:	4962      	ldr	r1, [pc, #392]	@ (8002018 <moveBlockDown+0x204>)
 8001e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	18ca      	adds	r2, r1, r3
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <moveBlockDown+0xa8>
				futureFallingBlockMatrix[j][i+1]=1;
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea6:	1c59      	adds	r1, r3, #1
 8001ea8:	485c      	ldr	r0, [pc, #368]	@ (800201c <moveBlockDown+0x208>)
 8001eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4403      	add	r3, r0
 8001eb4:	440b      	add	r3, r1
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e00a      	b.n	8001ed2 <moveBlockDown+0xbe>
			}
			else{
				futureFallingBlockMatrix[j][i+1]=0;
 8001ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	4856      	ldr	r0, [pc, #344]	@ (800201c <moveBlockDown+0x208>)
 8001ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	4403      	add	r3, r0
 8001ecc:	440b      	add	r3, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
		for(int j=1; j<14; j++){
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eda:	2b0d      	cmp	r3, #13
 8001edc:	ddd7      	ble.n	8001e8e <moveBlockDown+0x7a>
	for(int i=15; i>-1; i--){
 8001ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dace      	bge.n	8001e88 <moveBlockDown+0x74>
//				printf("Test");
//			}
		}
	}
	//fill top row with 0s
	for(int k=1; k<14; k++){
 8001eea:	2301      	movs	r3, #1
 8001eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eee:	e00a      	b.n	8001f06 <moveBlockDown+0xf2>
		futureFallingBlockMatrix[k][0]=0;
 8001ef0:	494a      	ldr	r1, [pc, #296]	@ (800201c <moveBlockDown+0x208>)
 8001ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
	for(int k=1; k<14; k++){
 8001f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f02:	3301      	adds	r3, #1
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f08:	2b0d      	cmp	r3, #13
 8001f0a:	ddf1      	ble.n	8001ef0 <moveBlockDown+0xdc>
	}


	//check if we hit anything in the resting block matrix
	bool weHitSomething = false;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	for(int i=1; i<14; i++){
 8001f12:	2301      	movs	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f16:	e024      	b.n	8001f62 <moveBlockDown+0x14e>
		for(int j=0; j<17; j++){
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
 8001f1c:	e01b      	b.n	8001f56 <moveBlockDown+0x142>
			if( (restingBlockMatrix[i][j]==1) && (futureFallingBlockMatrix[i][j]==1) ){
 8001f1e:	4940      	ldr	r1, [pc, #256]	@ (8002020 <moveBlockDown+0x20c>)
 8001f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f22:	4613      	mov	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4413      	add	r3, r2
 8001f28:	18ca      	adds	r2, r1, r3
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <moveBlockDown+0x13c>
 8001f34:	4939      	ldr	r1, [pc, #228]	@ (800201c <moveBlockDown+0x208>)
 8001f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	18ca      	adds	r2, r1, r3
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <moveBlockDown+0x13c>
				weHitSomething = true;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		for(int j=0; j<17; j++){
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	3301      	adds	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	dde0      	ble.n	8001f1e <moveBlockDown+0x10a>
	for(int i=1; i<14; i++){
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	3301      	adds	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	2b0d      	cmp	r3, #13
 8001f66:	ddd7      	ble.n	8001f18 <moveBlockDown+0x104>
//		printf("%d", restingBlockMatrix[i][16]);
//		printf("\n");
//		printf("%d", currentFallingBlockMatrix[i][16]);
//	}

	if(weHitSomething){
 8001f68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d047      	beq.n	8002000 <moveBlockDown+0x1ec>
		// move current position of falling block into restingBlockMatrix
		for(int i=0; i<14; i++){
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	e020      	b.n	8001fb8 <moveBlockDown+0x1a4>
			for(int j=0; j<17; j++){
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	e017      	b.n	8001fac <moveBlockDown+0x198>
				if(currentFallingBlockMatrix[i][j]==1){
 8001f7c:	4926      	ldr	r1, [pc, #152]	@ (8002018 <moveBlockDown+0x204>)
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	4413      	add	r3, r2
 8001f86:	18ca      	adds	r2, r1, r3
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <moveBlockDown+0x192>
					restingBlockMatrix[i][j]=1;
 8001f92:	4923      	ldr	r1, [pc, #140]	@ (8002020 <moveBlockDown+0x20c>)
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	18ca      	adds	r2, r1, r3
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<17; j++){
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	dde4      	ble.n	8001f7c <moveBlockDown+0x168>
		for(int i=0; i<14; i++){
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b0d      	cmp	r3, #13
 8001fbc:	dddb      	ble.n	8001f76 <moveBlockDown+0x162>
				}
			}
		}
		isBlockFalling = 0;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <moveBlockDown+0x210>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		bool youLose = false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
		for(int i=1; i<13; i++){
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e00d      	b.n	8001fea <moveBlockDown+0x1d6>
			if(restingBlockMatrix[i][0]==1){
 8001fce:	4914      	ldr	r1, [pc, #80]	@ (8002020 <moveBlockDown+0x20c>)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <moveBlockDown+0x1d0>
				youLose=true;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	75fb      	strb	r3, [r7, #23]
		for(int i=1; i<13; i++){
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b0c      	cmp	r3, #12
 8001fee:	ddee      	ble.n	8001fce <moveBlockDown+0x1ba>
			}
		}
		if(youLose){
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <moveBlockDown+0x1e8>
			addSchedulerEvent(END_THE_GAME);
 8001ff6:	2010      	movs	r0, #16
 8001ff8:	f7fe fe6a 	bl	8000cd0 <addSchedulerEvent>

		}
		return false;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e069      	b.n	80020d4 <moveBlockDown+0x2c0>
	}
	else{
		// move block down one
		for(int i=0; i<14; i++){
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e048      	b.n	8002098 <moveBlockDown+0x284>
				for(int j=0; j<17; j++){
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	e03f      	b.n	800208c <moveBlockDown+0x278>
 800200c:	20025d3b 	.word	0x20025d3b
 8002010:	20000002 	.word	0x20000002
 8002014:	20025978 	.word	0x20025978
 8002018:	20025a68 	.word	0x20025a68
 800201c:	20025b58 	.word	0x20025b58
 8002020:	20025c48 	.word	0x20025c48
 8002024:	20025d3a 	.word	0x20025d3a
					currentFallingBlockMatrix[i][j]= futureFallingBlockMatrix[i][j];
 8002028:	492c      	ldr	r1, [pc, #176]	@ (80020dc <moveBlockDown+0x2c8>)
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	18ca      	adds	r2, r1, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	7818      	ldrb	r0, [r3, #0]
 800203a:	4929      	ldr	r1, [pc, #164]	@ (80020e0 <moveBlockDown+0x2cc>)
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	18ca      	adds	r2, r1, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4413      	add	r3, r2
 800204a:	4602      	mov	r2, r0
 800204c:	701a      	strb	r2, [r3, #0]
					fallingBlockMatrix[i][j]= futureFallingBlockMatrix[i][j];
 800204e:	4923      	ldr	r1, [pc, #140]	@ (80020dc <moveBlockDown+0x2c8>)
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	4413      	add	r3, r2
 8002058:	18ca      	adds	r2, r1, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4413      	add	r3, r2
 800205e:	7818      	ldrb	r0, [r3, #0]
 8002060:	4920      	ldr	r1, [pc, #128]	@ (80020e4 <moveBlockDown+0x2d0>)
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4413      	add	r3, r2
 800206a:	18ca      	adds	r2, r1, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4413      	add	r3, r2
 8002070:	4602      	mov	r2, r0
 8002072:	701a      	strb	r2, [r3, #0]
					if(i>5 && i<10){
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b05      	cmp	r3, #5
 8002078:	dd05      	ble.n	8002086 <moveBlockDown+0x272>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b09      	cmp	r3, #9
 800207e:	dc02      	bgt.n	8002086 <moveBlockDown+0x272>
						printf("Hello World!");
 8002080:	4819      	ldr	r0, [pc, #100]	@ (80020e8 <moveBlockDown+0x2d4>)
 8002082:	f004 fb7f 	bl	8006784 <iprintf>
				for(int j=0; j<17; j++){
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b10      	cmp	r3, #16
 8002090:	ddca      	ble.n	8002028 <moveBlockDown+0x214>
		for(int i=0; i<14; i++){
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b0d      	cmp	r3, #13
 800209c:	ddb3      	ble.n	8002006 <moveBlockDown+0x1f2>
					}
				}
		}
		// clear old block and print new one
		clearBlock(fallingBlock, fallingBlockX, fallingBlockY);
 800209e:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <moveBlockDown+0x2d8>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <moveBlockDown+0x2dc>)
 80020a4:	8811      	ldrh	r1, [r2, #0]
 80020a6:	4a13      	ldr	r2, [pc, #76]	@ (80020f4 <moveBlockDown+0x2e0>)
 80020a8:	8812      	ldrh	r2, [r2, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f8e4 	bl	8002278 <clearBlock>
		drawBlock(fallingBlock, fallingBlockX, fallingBlockY + 20);
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <moveBlockDown+0x2d8>)
 80020b2:	8818      	ldrh	r0, [r3, #0]
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <moveBlockDown+0x2dc>)
 80020b6:	8819      	ldrh	r1, [r3, #0]
 80020b8:	4b0e      	ldr	r3, [pc, #56]	@ (80020f4 <moveBlockDown+0x2e0>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	3314      	adds	r3, #20
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	f000 f819 	bl	80020f8 <drawBlock>
		fallingBlockY = fallingBlockY + 20;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <moveBlockDown+0x2e0>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	3314      	adds	r3, #20
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <moveBlockDown+0x2e0>)
 80020d0:	801a      	strh	r2, [r3, #0]
		return true;
 80020d2:	2301      	movs	r3, #1
	}
};
 80020d4:	4618      	mov	r0, r3
 80020d6:	3740      	adds	r7, #64	@ 0x40
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20025b58 	.word	0x20025b58
 80020e0:	20025a68 	.word	0x20025a68
 80020e4:	20025978 	.word	0x20025978
 80020e8:	08007478 	.word	0x08007478
 80020ec:	20000002 	.word	0x20000002
 80020f0:	20025d36 	.word	0x20025d36
 80020f4:	20025d38 	.word	0x20025d38

080020f8 <drawBlock>:


/////////////////////////////////////////////////////////////////////////////
// DRAW/CLEAR BLOCKS

void drawBlock(uint16_t block, uint16_t x, uint16_t y){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
 8002102:	460b      	mov	r3, r1
 8002104:	80bb      	strh	r3, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	807b      	strh	r3, [r7, #2]
	switch(block){
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	2b12      	cmp	r3, #18
 800210e:	f200 80ae 	bhi.w	800226e <drawBlock+0x176>
 8002112:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <drawBlock+0x20>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002165 	.word	0x08002165
 800211c:	08002173 	.word	0x08002173
 8002120:	08002181 	.word	0x08002181
 8002124:	0800218f 	.word	0x0800218f
 8002128:	0800219d 	.word	0x0800219d
 800212c:	080021ab 	.word	0x080021ab
 8002130:	080021b9 	.word	0x080021b9
 8002134:	080021c7 	.word	0x080021c7
 8002138:	080021d5 	.word	0x080021d5
 800213c:	080021e3 	.word	0x080021e3
 8002140:	080021f1 	.word	0x080021f1
 8002144:	080021ff 	.word	0x080021ff
 8002148:	0800220d 	.word	0x0800220d
 800214c:	0800221b 	.word	0x0800221b
 8002150:	08002229 	.word	0x08002229
 8002154:	08002237 	.word	0x08002237
 8002158:	08002245 	.word	0x08002245
 800215c:	08002253 	.word	0x08002253
 8002160:	08002261 	.word	0x08002261
			case HERO_0:
				drawHero0(x,y);
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f944 	bl	80023f8 <drawHero0>
				break;
 8002170:	e07d      	b.n	800226e <drawBlock+0x176>
			case HERO_1:
				drawHero1(x,y);
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	88bb      	ldrh	r3, [r7, #4]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f95e 	bl	800243a <drawHero1>
				break;
 800217e:	e076      	b.n	800226e <drawBlock+0x176>
			case ORANGE_RICKY_0:
				drawOrangeRicky0(x,y);
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f9ba 	bl	8002500 <drawOrangeRicky0>
				break;
 800218c:	e06f      	b.n	800226e <drawBlock+0x176>
			case ORANGE_RICKY_1:
				drawOrangeRicky1(x,y);
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	88bb      	ldrh	r3, [r7, #4]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f000 f9ea 	bl	800256e <drawOrangeRicky1>
				break;
 800219a:	e068      	b.n	800226e <drawBlock+0x176>
			case ORANGE_RICKY_2:
				drawOrangeRicky2(x,y);
 800219c:	887a      	ldrh	r2, [r7, #2]
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa30 	bl	8002608 <drawOrangeRicky2>
				break;
 80021a8:	e061      	b.n	800226e <drawBlock+0x176>
			case ORANGE_RICKY_3:
				drawOrangeRicky3(x,y);
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fa60 	bl	8002676 <drawOrangeRicky3>
				break;
 80021b6:	e05a      	b.n	800226e <drawBlock+0x176>
			case BLUE_RICKY_0:
				drawBlueRicky0(x,y);
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	88bb      	ldrh	r3, [r7, #4]
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fa92 	bl	80026e8 <drawBlueRicky0>
				break;
 80021c4:	e053      	b.n	800226e <drawBlock+0x176>
			case BLUE_RICKY_1:
				drawBlueRicky1(x,y);
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	88bb      	ldrh	r3, [r7, #4]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fac0 	bl	8002752 <drawBlueRicky1>
				break;
 80021d2:	e04c      	b.n	800226e <drawBlock+0x176>
			case BLUE_RICKY_2:
				drawBlueRicky2(x,y);
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	88bb      	ldrh	r3, [r7, #4]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 faee 	bl	80027bc <drawBlueRicky2>
				break;
 80021e0:	e045      	b.n	800226e <drawBlock+0x176>
			case BLUE_RICKY_3:
				drawBlueRicky3(x,y);
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fb1e 	bl	800282a <drawBlueRicky3>
				break;
 80021ee:	e03e      	b.n	800226e <drawBlock+0x176>
			case CLEVELAND_Z_0:
				drawClevelandZ0(x,y);
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	88bb      	ldrh	r3, [r7, #4]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fb4e 	bl	8002898 <drawClevelandZ0>
				break;
 80021fc:	e037      	b.n	800226e <drawBlock+0x176>
			case CLEVELAND_Z_1:
				drawClevelandZ1(x,y);
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fb7e 	bl	8002906 <drawClevelandZ1>
				break;
 800220a:	e030      	b.n	800226e <drawBlock+0x176>
			case RHODE_ISLAND_Z_0:
				drawRhodeIslandZ0(x,y);
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	88bb      	ldrh	r3, [r7, #4]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fbb0 	bl	8002978 <drawRhodeIslandZ0>
				break;
 8002218:	e029      	b.n	800226e <drawBlock+0x176>
			case RHODE_ISLAND_Z_1:
				drawRhodeIslandZ1(x,y);
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	88bb      	ldrh	r3, [r7, #4]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fbe0 	bl	80029e6 <drawRhodeIslandZ1>
				break;
 8002226:	e022      	b.n	800226e <drawBlock+0x176>
			case TEEWEE_0:
				drawTeewee0(x,y);
 8002228:	887a      	ldrh	r2, [r7, #2]
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fc12 	bl	8002a58 <drawTeewee0>
				break;
 8002234:	e01b      	b.n	800226e <drawBlock+0x176>
			case TEEWEE_1:
				drawTeewee1(x,y);
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	88bb      	ldrh	r3, [r7, #4]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fc42 	bl	8002ac6 <drawTeewee1>
				break;
 8002242:	e014      	b.n	800226e <drawBlock+0x176>
			case TEEWEE_2:
				drawTeewee2(x,y);
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fc74 	bl	8002b38 <drawTeewee2>
				break;
 8002250:	e00d      	b.n	800226e <drawBlock+0x176>
			case TEEWEE_3:
				drawTeewee3(x,y);
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fca6 	bl	8002baa <drawTeewee3>
				break;
 800225e:	e006      	b.n	800226e <drawBlock+0x176>
			case SMASHBOY_0:
				drawSmashboy0(x,y);
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	88bb      	ldrh	r3, [r7, #4]
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fcd8 	bl	8002c1c <drawSmashboy0>
			break;
 800226c:	bf00      	nop
		}
};
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <clearBlock>:

void clearBlock(uint16_t block, uint16_t x, uint16_t y){
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	460b      	mov	r3, r1
 8002284:	80bb      	strh	r3, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	807b      	strh	r3, [r7, #2]
	switch(block){
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b12      	cmp	r3, #18
 800228e:	f200 80ae 	bhi.w	80023ee <clearBlock+0x176>
 8002292:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <clearBlock+0x20>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022e5 	.word	0x080022e5
 800229c:	080022f3 	.word	0x080022f3
 80022a0:	08002301 	.word	0x08002301
 80022a4:	0800230f 	.word	0x0800230f
 80022a8:	0800231d 	.word	0x0800231d
 80022ac:	0800232b 	.word	0x0800232b
 80022b0:	08002339 	.word	0x08002339
 80022b4:	08002347 	.word	0x08002347
 80022b8:	08002355 	.word	0x08002355
 80022bc:	08002363 	.word	0x08002363
 80022c0:	08002371 	.word	0x08002371
 80022c4:	0800237f 	.word	0x0800237f
 80022c8:	0800238d 	.word	0x0800238d
 80022cc:	0800239b 	.word	0x0800239b
 80022d0:	080023a9 	.word	0x080023a9
 80022d4:	080023b7 	.word	0x080023b7
 80022d8:	080023c5 	.word	0x080023c5
 80022dc:	080023d3 	.word	0x080023d3
 80022e0:	080023e1 	.word	0x080023e1
			case HERO_0:
				clearHero0(x,y);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fccd 	bl	8002c8a <clearHero0>
				break;
 80022f0:	e07d      	b.n	80023ee <clearBlock+0x176>
			case HERO_1:
				clearHero1(x,y);
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fce7 	bl	8002ccc <clearHero1>
				break;
 80022fe:	e076      	b.n	80023ee <clearBlock+0x176>
			case ORANGE_RICKY_0:
				clearOrangeRicky0(x,y);
 8002300:	887a      	ldrh	r2, [r7, #2]
 8002302:	88bb      	ldrh	r3, [r7, #4]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fd43 	bl	8002d92 <clearOrangeRicky0>
				break;
 800230c:	e06f      	b.n	80023ee <clearBlock+0x176>
			case ORANGE_RICKY_1:
				clearOrangeRicky1(x,y);
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fd73 	bl	8002e00 <clearOrangeRicky1>
				break;
 800231a:	e068      	b.n	80023ee <clearBlock+0x176>
			case ORANGE_RICKY_2:
				clearOrangeRicky2(x,y);
 800231c:	887a      	ldrh	r2, [r7, #2]
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fdb9 	bl	8002e9a <clearOrangeRicky2>
				break;
 8002328:	e061      	b.n	80023ee <clearBlock+0x176>
			case ORANGE_RICKY_3:
				clearOrangeRicky3(x,y);
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	88bb      	ldrh	r3, [r7, #4]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fde9 	bl	8002f08 <clearOrangeRicky3>
				break;
 8002336:	e05a      	b.n	80023ee <clearBlock+0x176>
			case BLUE_RICKY_0:
				clearBlueRicky0(x,y);
 8002338:	887a      	ldrh	r2, [r7, #2]
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fe1b 	bl	8002f7a <clearBlueRicky0>
				break;
 8002344:	e053      	b.n	80023ee <clearBlock+0x176>
			case BLUE_RICKY_1:
				clearBlueRicky1(x,y);
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fe4b 	bl	8002fe8 <clearBlueRicky1>
				break;
 8002352:	e04c      	b.n	80023ee <clearBlock+0x176>
			case BLUE_RICKY_2:
				clearBlueRicky2(x,y);
 8002354:	887a      	ldrh	r2, [r7, #2]
 8002356:	88bb      	ldrh	r3, [r7, #4]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fe7b 	bl	8003056 <clearBlueRicky2>
				break;
 8002360:	e045      	b.n	80023ee <clearBlock+0x176>
			case BLUE_RICKY_3:
				clearBlueRicky3(x,y);
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	88bb      	ldrh	r3, [r7, #4]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fead 	bl	80030c8 <clearBlueRicky3>
				break;
 800236e:	e03e      	b.n	80023ee <clearBlock+0x176>
			case CLEVELAND_Z_0:
				clearClevelandZ0(x,y);
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	88bb      	ldrh	r3, [r7, #4]
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fedf 	bl	800313a <clearClevelandZ0>
				break;
 800237c:	e037      	b.n	80023ee <clearBlock+0x176>
			case CLEVELAND_Z_1:
				clearClevelandZ1(x,y);
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f000 ff0f 	bl	80031a8 <clearClevelandZ1>
				break;
 800238a:	e030      	b.n	80023ee <clearBlock+0x176>
			case RHODE_ISLAND_Z_0:
				clearRhodeIslandZ0(x,y);
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	88bb      	ldrh	r3, [r7, #4]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f000 ff41 	bl	800321a <clearRhodeIslandZ0>
				break;
 8002398:	e029      	b.n	80023ee <clearBlock+0x176>
			case RHODE_ISLAND_Z_1:
				clearRhodeIslandZ1(x,y);
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	88bb      	ldrh	r3, [r7, #4]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 ff71 	bl	8003288 <clearRhodeIslandZ1>
				break;
 80023a6:	e022      	b.n	80023ee <clearBlock+0x176>
			case TEEWEE_0:
				clearTeewee0(x,y);
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	88bb      	ldrh	r3, [r7, #4]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 ffa3 	bl	80032fa <clearTeewee0>
				break;
 80023b4:	e01b      	b.n	80023ee <clearBlock+0x176>
			case TEEWEE_1:
				clearTeewee1(x,y);
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	88bb      	ldrh	r3, [r7, #4]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 ffd3 	bl	8003368 <clearTeewee1>
				break;
 80023c2:	e014      	b.n	80023ee <clearBlock+0x176>
			case TEEWEE_2:
				clearTeewee2(x,y);
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	88bb      	ldrh	r3, [r7, #4]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 f805 	bl	80033da <clearTeewee2>
				break;
 80023d0:	e00d      	b.n	80023ee <clearBlock+0x176>
			case TEEWEE_3:
				clearTeewee3(x,y);
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	88bb      	ldrh	r3, [r7, #4]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 f837 	bl	800344c <clearTeewee3>
				break;
 80023de:	e006      	b.n	80023ee <clearBlock+0x176>
			case SMASHBOY_0:
				clearSmashboy0(x,y);
 80023e0:	887a      	ldrh	r2, [r7, #2]
 80023e2:	88bb      	ldrh	r3, [r7, #4]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f869 	bl	80034be <clearSmashboy0>
				break;
 80023ec:	bf00      	nop
		}
};
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop

080023f8 <drawHero0>:

void drawHero0(uint16_t x, uint16_t y){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	460a      	mov	r2, r1
 8002402:	80fb      	strh	r3, [r7, #6]
 8002404:	4613      	mov	r3, r2
 8002406:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<80; i++){
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e00d      	b.n	800242a <drawHero0+0x32>
		LCD_Draw_Vertical_Line(x+i,y,20,LCD_COLOR_MAGENTA);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	b29a      	uxth	r2, r3
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4413      	add	r3, r2
 8002416:	b298      	uxth	r0, r3
 8002418:	88b9      	ldrh	r1, [r7, #4]
 800241a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800241e:	2214      	movs	r2, #20
 8002420:	f7fe fb4a 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<80; i++){
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b4f      	cmp	r3, #79	@ 0x4f
 800242e:	ddee      	ble.n	800240e <drawHero0+0x16>
	}
};
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <drawHero1>:

void drawHero1(uint16_t x, uint16_t y){
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	460a      	mov	r2, r1
 8002444:	80fb      	strh	r3, [r7, #6]
 8002446:	4613      	mov	r3, r2
 8002448:	80bb      	strh	r3, [r7, #4]

	for(int i=0; i<20; i++){
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e00d      	b.n	800246c <drawHero1+0x32>
		LCD_Draw_Vertical_Line(x+i,y,20,LCD_COLOR_MAGENTA);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	b29a      	uxth	r2, r3
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4413      	add	r3, r2
 8002458:	b298      	uxth	r0, r3
 800245a:	88b9      	ldrh	r1, [r7, #4]
 800245c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002460:	2214      	movs	r2, #20
 8002462:	f7fe fb29 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b13      	cmp	r3, #19
 8002470:	ddee      	ble.n	8002450 <drawHero1+0x16>
	}
	for(int i=0; i<20; i++){
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	e00f      	b.n	8002498 <drawHero1+0x5e>
		LCD_Draw_Vertical_Line(x+i,y+20,20,LCD_COLOR_MAGENTA);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	b29a      	uxth	r2, r3
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4413      	add	r3, r2
 8002480:	b298      	uxth	r0, r3
 8002482:	88bb      	ldrh	r3, [r7, #4]
 8002484:	3314      	adds	r3, #20
 8002486:	b299      	uxth	r1, r3
 8002488:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800248c:	2214      	movs	r2, #20
 800248e:	f7fe fb13 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	3301      	adds	r3, #1
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b13      	cmp	r3, #19
 800249c:	ddec      	ble.n	8002478 <drawHero1+0x3e>
	}
	for(int i=0; i<20; i++){
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e00f      	b.n	80024c4 <drawHero1+0x8a>
		LCD_Draw_Vertical_Line(x+i,y+40,20,LCD_COLOR_MAGENTA);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	4413      	add	r3, r2
 80024ac:	b298      	uxth	r0, r3
 80024ae:	88bb      	ldrh	r3, [r7, #4]
 80024b0:	3328      	adds	r3, #40	@ 0x28
 80024b2:	b299      	uxth	r1, r3
 80024b4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80024b8:	2214      	movs	r2, #20
 80024ba:	f7fe fafd 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b13      	cmp	r3, #19
 80024c8:	ddec      	ble.n	80024a4 <drawHero1+0x6a>
	}
	for(int i=0; i<20; i++){
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	e00f      	b.n	80024f0 <drawHero1+0xb6>
		LCD_Draw_Vertical_Line(x+i,y+60,20,LCD_COLOR_MAGENTA);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4413      	add	r3, r2
 80024d8:	b298      	uxth	r0, r3
 80024da:	88bb      	ldrh	r3, [r7, #4]
 80024dc:	333c      	adds	r3, #60	@ 0x3c
 80024de:	b299      	uxth	r1, r3
 80024e0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80024e4:	2214      	movs	r2, #20
 80024e6:	f7fe fae7 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3301      	adds	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b13      	cmp	r3, #19
 80024f4:	ddec      	ble.n	80024d0 <drawHero1+0x96>
	}
};
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <drawOrangeRicky0>:

void drawOrangeRicky0(uint16_t x, uint16_t y){
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	460a      	mov	r2, r1
 800250a:	80fb      	strh	r3, [r7, #6]
 800250c:	4613      	mov	r3, r2
 800250e:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e00f      	b.n	8002536 <drawOrangeRicky0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_ORANGE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	b29a      	uxth	r2, r3
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4413      	add	r3, r2
 800251e:	b298      	uxth	r0, r3
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	3314      	adds	r3, #20
 8002524:	b299      	uxth	r1, r3
 8002526:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800252a:	2214      	movs	r2, #20
 800252c:	f7fe fac4 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3301      	adds	r3, #1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b3b      	cmp	r3, #59	@ 0x3b
 800253a:	ddec      	ble.n	8002516 <drawOrangeRicky0+0x16>
	}
	for(int i=40; i<60; i++){
 800253c:	2328      	movs	r3, #40	@ 0x28
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e00d      	b.n	800255e <drawOrangeRicky0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_ORANGE);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	b29a      	uxth	r2, r3
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4413      	add	r3, r2
 800254a:	b298      	uxth	r0, r3
 800254c:	88b9      	ldrh	r1, [r7, #4]
 800254e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002552:	2214      	movs	r2, #20
 8002554:	f7fe fab0 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=40; i<60; i++){
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b3b      	cmp	r3, #59	@ 0x3b
 8002562:	ddee      	ble.n	8002542 <drawOrangeRicky0+0x42>
	}
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <drawOrangeRicky1>:

void drawOrangeRicky1(uint16_t x, uint16_t y){
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	460a      	mov	r2, r1
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	4613      	mov	r3, r2
 800257c:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e00d      	b.n	80025a0 <drawOrangeRicky1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_ORANGE);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	b29a      	uxth	r2, r3
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	4413      	add	r3, r2
 800258c:	b298      	uxth	r0, r3
 800258e:	88b9      	ldrh	r1, [r7, #4]
 8002590:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002594:	2214      	movs	r2, #20
 8002596:	f7fe fa8f 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3301      	adds	r3, #1
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b13      	cmp	r3, #19
 80025a4:	ddee      	ble.n	8002584 <drawOrangeRicky1+0x16>
	}
	for(int i=0; i<20; i++){
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e00f      	b.n	80025cc <drawOrangeRicky1+0x5e>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_ORANGE);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4413      	add	r3, r2
 80025b4:	b298      	uxth	r0, r3
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	3314      	adds	r3, #20
 80025ba:	b299      	uxth	r1, r3
 80025bc:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80025c0:	2214      	movs	r2, #20
 80025c2:	f7fe fa79 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3301      	adds	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b13      	cmp	r3, #19
 80025d0:	ddec      	ble.n	80025ac <drawOrangeRicky1+0x3e>
	}
	for(int i=0; i<40; i++){
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e00f      	b.n	80025f8 <drawOrangeRicky1+0x8a>
		LCD_Draw_Vertical_Line(x+i, y+40, 20, LCD_COLOR_ORANGE);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	4413      	add	r3, r2
 80025e0:	b298      	uxth	r0, r3
 80025e2:	88bb      	ldrh	r3, [r7, #4]
 80025e4:	3328      	adds	r3, #40	@ 0x28
 80025e6:	b299      	uxth	r1, r3
 80025e8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80025ec:	2214      	movs	r2, #20
 80025ee:	f7fe fa63 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b27      	cmp	r3, #39	@ 0x27
 80025fc:	ddec      	ble.n	80025d8 <drawOrangeRicky1+0x6a>
	}
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <drawOrangeRicky2>:

void drawOrangeRicky2(uint16_t x, uint16_t y){
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	460a      	mov	r2, r1
 8002612:	80fb      	strh	r3, [r7, #6]
 8002614:	4613      	mov	r3, r2
 8002616:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e00d      	b.n	800263a <drawOrangeRicky2+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_ORANGE);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	b29a      	uxth	r2, r3
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	4413      	add	r3, r2
 8002626:	b298      	uxth	r0, r3
 8002628:	88b9      	ldrh	r1, [r7, #4]
 800262a:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800262e:	2214      	movs	r2, #20
 8002630:	f7fe fa42 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b3b      	cmp	r3, #59	@ 0x3b
 800263e:	ddee      	ble.n	800261e <drawOrangeRicky2+0x16>
	}
	for(int i=0; i<20; i++){
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	e00f      	b.n	8002666 <drawOrangeRicky2+0x5e>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_ORANGE);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	b29a      	uxth	r2, r3
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	4413      	add	r3, r2
 800264e:	b298      	uxth	r0, r3
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	3314      	adds	r3, #20
 8002654:	b299      	uxth	r1, r3
 8002656:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800265a:	2214      	movs	r2, #20
 800265c:	f7fe fa2c 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3301      	adds	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b13      	cmp	r3, #19
 800266a:	ddec      	ble.n	8002646 <drawOrangeRicky2+0x3e>
	}
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <drawOrangeRicky3>:

void drawOrangeRicky3(uint16_t x, uint16_t y){
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	460a      	mov	r2, r1
 8002680:	80fb      	strh	r3, [r7, #6]
 8002682:	4613      	mov	r3, r2
 8002684:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e00d      	b.n	80026a8 <drawOrangeRicky3+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_ORANGE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	b29a      	uxth	r2, r3
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	4413      	add	r3, r2
 8002694:	b298      	uxth	r0, r3
 8002696:	88b9      	ldrh	r1, [r7, #4]
 8002698:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800269c:	2214      	movs	r2, #20
 800269e:	f7fe fa0b 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b27      	cmp	r3, #39	@ 0x27
 80026ac:	ddee      	ble.n	800268c <drawOrangeRicky3+0x16>
	}
	for(int i=0; i<20; i++){
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	e011      	b.n	80026d8 <drawOrangeRicky3+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 40, LCD_COLOR_ORANGE);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	4413      	add	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3314      	adds	r3, #20
 80026c0:	b298      	uxth	r0, r3
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	3314      	adds	r3, #20
 80026c6:	b299      	uxth	r1, r3
 80026c8:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80026cc:	2228      	movs	r2, #40	@ 0x28
 80026ce:	f7fe f9f3 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b13      	cmp	r3, #19
 80026dc:	ddea      	ble.n	80026b4 <drawOrangeRicky3+0x3e>
	}
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <drawBlueRicky0>:



void drawBlueRicky0(uint16_t x, uint16_t y){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	460a      	mov	r2, r1
 80026f2:	80fb      	strh	r3, [r7, #6]
 80026f4:	4613      	mov	r3, r2
 80026f6:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e00e      	b.n	800271c <drawBlueRicky0+0x34>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_BLUE);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	b29a      	uxth	r2, r3
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4413      	add	r3, r2
 8002706:	b298      	uxth	r0, r3
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	3314      	adds	r3, #20
 800270c:	b299      	uxth	r1, r3
 800270e:	231f      	movs	r3, #31
 8002710:	2214      	movs	r2, #20
 8002712:	f7fe f9d1 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3301      	adds	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002720:	dded      	ble.n	80026fe <drawBlueRicky0+0x16>
	}
	for(int i=0; i<20; i++){
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	e00c      	b.n	8002742 <drawBlueRicky0+0x5a>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_BLUE);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	b29a      	uxth	r2, r3
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	4413      	add	r3, r2
 8002730:	b298      	uxth	r0, r3
 8002732:	88b9      	ldrh	r1, [r7, #4]
 8002734:	231f      	movs	r3, #31
 8002736:	2214      	movs	r2, #20
 8002738:	f7fe f9be 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3301      	adds	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b13      	cmp	r3, #19
 8002746:	ddef      	ble.n	8002728 <drawBlueRicky0+0x40>
	}
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <drawBlueRicky1>:

void drawBlueRicky1(uint16_t x, uint16_t y){
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	460a      	mov	r2, r1
 800275c:	80fb      	strh	r3, [r7, #6]
 800275e:	4613      	mov	r3, r2
 8002760:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e00c      	b.n	8002782 <drawBlueRicky1+0x30>
		LCD_Draw_Vertical_Line(x+i, y, 60, LCD_COLOR_BLUE);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	b29a      	uxth	r2, r3
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	4413      	add	r3, r2
 8002770:	b298      	uxth	r0, r3
 8002772:	88b9      	ldrh	r1, [r7, #4]
 8002774:	231f      	movs	r3, #31
 8002776:	223c      	movs	r2, #60	@ 0x3c
 8002778:	f7fe f99e 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b13      	cmp	r3, #19
 8002786:	ddef      	ble.n	8002768 <drawBlueRicky1+0x16>
	}
	for(int i=0; i<20; i++){
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	e00e      	b.n	80027ac <drawBlueRicky1+0x5a>
		LCD_Draw_Vertical_Line(x+i+20, y, 20, LCD_COLOR_BLUE);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	b29a      	uxth	r2, r3
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	4413      	add	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	3314      	adds	r3, #20
 800279a:	b298      	uxth	r0, r3
 800279c:	88b9      	ldrh	r1, [r7, #4]
 800279e:	231f      	movs	r3, #31
 80027a0:	2214      	movs	r2, #20
 80027a2:	f7fe f989 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b13      	cmp	r3, #19
 80027b0:	dded      	ble.n	800278e <drawBlueRicky1+0x3c>
	}
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <drawBlueRicky2>:

void drawBlueRicky2(uint16_t x, uint16_t y){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	460a      	mov	r2, r1
 80027c6:	80fb      	strh	r3, [r7, #6]
 80027c8:	4613      	mov	r3, r2
 80027ca:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e00c      	b.n	80027ec <drawBlueRicky2+0x30>
			LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_BLUE);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4413      	add	r3, r2
 80027da:	b298      	uxth	r0, r3
 80027dc:	88b9      	ldrh	r1, [r7, #4]
 80027de:	231f      	movs	r3, #31
 80027e0:	2214      	movs	r2, #20
 80027e2:	f7fe f969 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3301      	adds	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80027f0:	ddef      	ble.n	80027d2 <drawBlueRicky2+0x16>
		}
	for(int i=0; i<20; i++){
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	e010      	b.n	800281a <drawBlueRicky2+0x5e>
			LCD_Draw_Vertical_Line(x+i+40, y+20, 20, LCD_COLOR_BLUE);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	4413      	add	r3, r2
 8002800:	b29b      	uxth	r3, r3
 8002802:	3328      	adds	r3, #40	@ 0x28
 8002804:	b298      	uxth	r0, r3
 8002806:	88bb      	ldrh	r3, [r7, #4]
 8002808:	3314      	adds	r3, #20
 800280a:	b299      	uxth	r1, r3
 800280c:	231f      	movs	r3, #31
 800280e:	2214      	movs	r2, #20
 8002810:	f7fe f952 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b13      	cmp	r3, #19
 800281e:	ddeb      	ble.n	80027f8 <drawBlueRicky2+0x3c>
		}
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <drawBlueRicky3>:

void drawBlueRicky3(uint16_t x, uint16_t y){
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	460a      	mov	r2, r1
 8002834:	80fb      	strh	r3, [r7, #6]
 8002836:	4613      	mov	r3, r2
 8002838:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e00e      	b.n	800285e <drawBlueRicky3+0x34>
			LCD_Draw_Vertical_Line(x+i+20, y, 60, LCD_COLOR_BLUE);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	b29a      	uxth	r2, r3
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	4413      	add	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	3314      	adds	r3, #20
 800284c:	b298      	uxth	r0, r3
 800284e:	88b9      	ldrh	r1, [r7, #4]
 8002850:	231f      	movs	r3, #31
 8002852:	223c      	movs	r2, #60	@ 0x3c
 8002854:	f7fe f930 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b13      	cmp	r3, #19
 8002862:	dded      	ble.n	8002840 <drawBlueRicky3+0x16>
		}
	for(int i=0; i<20; i++){
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	e00e      	b.n	8002888 <drawBlueRicky3+0x5e>
			LCD_Draw_Vertical_Line(x+i, y+40, 20, LCD_COLOR_BLUE);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	b29a      	uxth	r2, r3
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	4413      	add	r3, r2
 8002872:	b298      	uxth	r0, r3
 8002874:	88bb      	ldrh	r3, [r7, #4]
 8002876:	3328      	adds	r3, #40	@ 0x28
 8002878:	b299      	uxth	r1, r3
 800287a:	231f      	movs	r3, #31
 800287c:	2214      	movs	r2, #20
 800287e:	f7fe f91b 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b13      	cmp	r3, #19
 800288c:	dded      	ble.n	800286a <drawBlueRicky3+0x40>
		}
}
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <drawClevelandZ0>:


void drawClevelandZ0(uint16_t x, uint16_t y){
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	460a      	mov	r2, r1
 80028a2:	80fb      	strh	r3, [r7, #6]
 80028a4:	4613      	mov	r3, r2
 80028a6:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e00d      	b.n	80028ca <drawClevelandZ0+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_GREEN);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4413      	add	r3, r2
 80028b6:	b298      	uxth	r0, r3
 80028b8:	88b9      	ldrh	r1, [r7, #4]
 80028ba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80028be:	2214      	movs	r2, #20
 80028c0:	f7fe f8fa 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3301      	adds	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b27      	cmp	r3, #39	@ 0x27
 80028ce:	ddee      	ble.n	80028ae <drawClevelandZ0+0x16>
	}
	for(int i=20; i<60; i++){
 80028d0:	2314      	movs	r3, #20
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	e00f      	b.n	80028f6 <drawClevelandZ0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_GREEN);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	4413      	add	r3, r2
 80028de:	b298      	uxth	r0, r3
 80028e0:	88bb      	ldrh	r3, [r7, #4]
 80028e2:	3314      	adds	r3, #20
 80028e4:	b299      	uxth	r1, r3
 80028e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80028ea:	2214      	movs	r2, #20
 80028ec:	f7fe f8e4 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=20; i<60; i++){
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80028fa:	ddec      	ble.n	80028d6 <drawClevelandZ0+0x3e>
	}
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <drawClevelandZ1>:

void drawClevelandZ1(uint16_t x, uint16_t y){
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	460a      	mov	r2, r1
 8002910:	80fb      	strh	r3, [r7, #6]
 8002912:	4613      	mov	r3, r2
 8002914:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e00f      	b.n	800293c <drawClevelandZ1+0x36>
		LCD_Draw_Vertical_Line(x+i+20, y, 40, LCD_COLOR_GREEN);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	b29a      	uxth	r2, r3
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4413      	add	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	3314      	adds	r3, #20
 8002928:	b298      	uxth	r0, r3
 800292a:	88b9      	ldrh	r1, [r7, #4]
 800292c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002930:	2228      	movs	r2, #40	@ 0x28
 8002932:	f7fe f8c1 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b13      	cmp	r3, #19
 8002940:	ddec      	ble.n	800291c <drawClevelandZ1+0x16>
	}
	for(int i=0; i<20; i++){
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	e00f      	b.n	8002968 <drawClevelandZ1+0x62>
		LCD_Draw_Vertical_Line(x+i, y+20, 40, LCD_COLOR_GREEN);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	b29a      	uxth	r2, r3
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4413      	add	r3, r2
 8002950:	b298      	uxth	r0, r3
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	3314      	adds	r3, #20
 8002956:	b299      	uxth	r1, r3
 8002958:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800295c:	2228      	movs	r2, #40	@ 0x28
 800295e:	f7fe f8ab 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b13      	cmp	r3, #19
 800296c:	ddec      	ble.n	8002948 <drawClevelandZ1+0x42>
	}
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <drawRhodeIslandZ0>:

void drawRhodeIslandZ0(uint16_t x, uint16_t y){
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	460a      	mov	r2, r1
 8002982:	80fb      	strh	r3, [r7, #6]
 8002984:	4613      	mov	r3, r2
 8002986:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e00f      	b.n	80029ae <drawRhodeIslandZ0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_RED);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	b29a      	uxth	r2, r3
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	4413      	add	r3, r2
 8002996:	b298      	uxth	r0, r3
 8002998:	88bb      	ldrh	r3, [r7, #4]
 800299a:	3314      	adds	r3, #20
 800299c:	b299      	uxth	r1, r3
 800299e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029a2:	2214      	movs	r2, #20
 80029a4:	f7fe f888 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b27      	cmp	r3, #39	@ 0x27
 80029b2:	ddec      	ble.n	800298e <drawRhodeIslandZ0+0x16>
	}
	for(int i=20; i<60; i++){
 80029b4:	2314      	movs	r3, #20
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	e00d      	b.n	80029d6 <drawRhodeIslandZ0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_RED);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	4413      	add	r3, r2
 80029c2:	b298      	uxth	r0, r3
 80029c4:	88b9      	ldrh	r1, [r7, #4]
 80029c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029ca:	2214      	movs	r2, #20
 80029cc:	f7fe f874 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=20; i<60; i++){
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80029da:	ddee      	ble.n	80029ba <drawRhodeIslandZ0+0x42>
	}
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <drawRhodeIslandZ1>:

void drawRhodeIslandZ1(uint16_t x, uint16_t y){
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	460a      	mov	r2, r1
 80029f0:	80fb      	strh	r3, [r7, #6]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e00d      	b.n	8002a18 <drawRhodeIslandZ1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 40, LCD_COLOR_RED);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4413      	add	r3, r2
 8002a04:	b298      	uxth	r0, r3
 8002a06:	88b9      	ldrh	r1, [r7, #4]
 8002a08:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a0c:	2228      	movs	r2, #40	@ 0x28
 8002a0e:	f7fe f853 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b13      	cmp	r3, #19
 8002a1c:	ddee      	ble.n	80029fc <drawRhodeIslandZ1+0x16>
	}
	for(int i=0; i<20; i++){
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	e011      	b.n	8002a48 <drawRhodeIslandZ1+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 40, LCD_COLOR_RED);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3314      	adds	r3, #20
 8002a30:	b298      	uxth	r0, r3
 8002a32:	88bb      	ldrh	r3, [r7, #4]
 8002a34:	3314      	adds	r3, #20
 8002a36:	b299      	uxth	r1, r3
 8002a38:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002a3c:	2228      	movs	r2, #40	@ 0x28
 8002a3e:	f7fe f83b 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b13      	cmp	r3, #19
 8002a4c:	ddea      	ble.n	8002a24 <drawRhodeIslandZ1+0x3e>
	}
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <drawTeewee0>:

void drawTeewee0(uint16_t x, uint16_t y){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	460a      	mov	r2, r1
 8002a62:	80fb      	strh	r3, [r7, #6]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e00f      	b.n	8002a8e <drawTeewee0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_YELLOW);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4413      	add	r3, r2
 8002a76:	b298      	uxth	r0, r3
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	b299      	uxth	r1, r3
 8002a7e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a82:	2214      	movs	r2, #20
 8002a84:	f7fe f818 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b3b      	cmp	r3, #59	@ 0x3b
 8002a92:	ddec      	ble.n	8002a6e <drawTeewee0+0x16>
	}
	for(int i=20; i<40; i++){
 8002a94:	2314      	movs	r3, #20
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e00d      	b.n	8002ab6 <drawTeewee0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_YELLOW);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b298      	uxth	r0, r3
 8002aa4:	88b9      	ldrh	r1, [r7, #4]
 8002aa6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002aaa:	2214      	movs	r2, #20
 8002aac:	f7fe f804 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=20; i<40; i++){
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b27      	cmp	r3, #39	@ 0x27
 8002aba:	ddee      	ble.n	8002a9a <drawTeewee0+0x42>
	}
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <drawTeewee1>:

void drawTeewee1(uint16_t x, uint16_t y){
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	460a      	mov	r2, r1
 8002ad0:	80fb      	strh	r3, [r7, #6]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e00d      	b.n	8002af8 <drawTeewee1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 60, LCD_COLOR_YELLOW);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	88b9      	ldrh	r1, [r7, #4]
 8002ae8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002aec:	223c      	movs	r2, #60	@ 0x3c
 8002aee:	f7fd ffe3 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3301      	adds	r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b13      	cmp	r3, #19
 8002afc:	ddee      	ble.n	8002adc <drawTeewee1+0x16>
	}
	for(int i=0; i<20; i++){
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	e011      	b.n	8002b28 <drawTeewee1+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 20, LCD_COLOR_YELLOW);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3314      	adds	r3, #20
 8002b10:	b298      	uxth	r0, r3
 8002b12:	88bb      	ldrh	r3, [r7, #4]
 8002b14:	3314      	adds	r3, #20
 8002b16:	b299      	uxth	r1, r3
 8002b18:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002b1c:	2214      	movs	r2, #20
 8002b1e:	f7fd ffcb 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b13      	cmp	r3, #19
 8002b2c:	ddea      	ble.n	8002b04 <drawTeewee1+0x3e>
	}
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <drawTeewee2>:

void drawTeewee2(uint16_t x, uint16_t y){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460a      	mov	r2, r1
 8002b42:	80fb      	strh	r3, [r7, #6]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e00d      	b.n	8002b6a <drawTeewee2+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_YELLOW);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	4413      	add	r3, r2
 8002b56:	b298      	uxth	r0, r3
 8002b58:	88b9      	ldrh	r1, [r7, #4]
 8002b5a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002b5e:	2214      	movs	r2, #20
 8002b60:	f7fd ffaa 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b6e:	ddee      	ble.n	8002b4e <drawTeewee2+0x16>
	}
	for(int i=0; i<20; i++){
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	e011      	b.n	8002b9a <drawTeewee2+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 20, LCD_COLOR_YELLOW);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3314      	adds	r3, #20
 8002b82:	b298      	uxth	r0, r3
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	3314      	adds	r3, #20
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002b8e:	2214      	movs	r2, #20
 8002b90:	f7fd ff92 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	3301      	adds	r3, #1
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b13      	cmp	r3, #19
 8002b9e:	ddea      	ble.n	8002b76 <drawTeewee2+0x3e>
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <drawTeewee3>:

void drawTeewee3(uint16_t x, uint16_t y){
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	80fb      	strh	r3, [r7, #6]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e00f      	b.n	8002be0 <drawTeewee3+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_YELLOW);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	88bb      	ldrh	r3, [r7, #4]
 8002bcc:	3314      	adds	r3, #20
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002bd4:	2214      	movs	r2, #20
 8002bd6:	f7fd ff6f 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b13      	cmp	r3, #19
 8002be4:	ddec      	ble.n	8002bc0 <drawTeewee3+0x16>
	}
	for(int i=0; i<20; i++){
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	e00f      	b.n	8002c0c <drawTeewee3+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y, 60, LCD_COLOR_YELLOW);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	b298      	uxth	r0, r3
 8002bfa:	88b9      	ldrh	r1, [r7, #4]
 8002bfc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002c00:	223c      	movs	r2, #60	@ 0x3c
 8002c02:	f7fd ff59 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b13      	cmp	r3, #19
 8002c10:	ddec      	ble.n	8002bec <drawTeewee3+0x42>
	}
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <drawSmashboy0>:

void drawSmashboy0(uint16_t x, uint16_t y){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	460a      	mov	r2, r1
 8002c26:	80fb      	strh	r3, [r7, #6]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e00f      	b.n	8002c52 <drawSmashboy0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_GREY);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	4413      	add	r3, r2
 8002c3a:	b298      	uxth	r0, r3
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	b299      	uxth	r1, r3
 8002c42:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8002c46:	2214      	movs	r2, #20
 8002c48:	f7fd ff36 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b27      	cmp	r3, #39	@ 0x27
 8002c56:	ddec      	ble.n	8002c32 <drawSmashboy0+0x16>
	}
	for(int i=0; i<40; i++){
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	e00d      	b.n	8002c7a <drawSmashboy0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_GREY);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	4413      	add	r3, r2
 8002c66:	b298      	uxth	r0, r3
 8002c68:	88b9      	ldrh	r1, [r7, #4]
 8002c6a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8002c6e:	2214      	movs	r2, #20
 8002c70:	f7fd ff22 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3301      	adds	r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b27      	cmp	r3, #39	@ 0x27
 8002c7e:	ddee      	ble.n	8002c5e <drawSmashboy0+0x42>
	}
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <clearHero0>:





void clearHero0(uint16_t x, uint16_t y){
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	460a      	mov	r2, r1
 8002c94:	80fb      	strh	r3, [r7, #6]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<80; i++){
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e00d      	b.n	8002cbc <clearHero0+0x32>
		LCD_Draw_Vertical_Line(x+i,y,20,LCD_COLOR_WHITE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b298      	uxth	r0, r3
 8002caa:	88b9      	ldrh	r1, [r7, #4]
 8002cac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cb0:	2214      	movs	r2, #20
 8002cb2:	f7fd ff01 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<80; i++){
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b4f      	cmp	r3, #79	@ 0x4f
 8002cc0:	ddee      	ble.n	8002ca0 <clearHero0+0x16>
	}
};
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <clearHero1>:

void clearHero1(uint16_t x, uint16_t y){
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	80fb      	strh	r3, [r7, #6]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80bb      	strh	r3, [r7, #4]

	for(int i=0; i<20; i++){
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e00d      	b.n	8002cfe <clearHero1+0x32>
		LCD_Draw_Vertical_Line(x+i,y,20,LCD_COLOR_WHITE);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4413      	add	r3, r2
 8002cea:	b298      	uxth	r0, r3
 8002cec:	88b9      	ldrh	r1, [r7, #4]
 8002cee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cf2:	2214      	movs	r2, #20
 8002cf4:	f7fd fee0 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b13      	cmp	r3, #19
 8002d02:	ddee      	ble.n	8002ce2 <clearHero1+0x16>
	}
	for(int i=0; i<20; i++){
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	e00f      	b.n	8002d2a <clearHero1+0x5e>
		LCD_Draw_Vertical_Line(x+i,y+20,20,LCD_COLOR_WHITE);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	4413      	add	r3, r2
 8002d12:	b298      	uxth	r0, r3
 8002d14:	88bb      	ldrh	r3, [r7, #4]
 8002d16:	3314      	adds	r3, #20
 8002d18:	b299      	uxth	r1, r3
 8002d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d1e:	2214      	movs	r2, #20
 8002d20:	f7fd feca 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	3301      	adds	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b13      	cmp	r3, #19
 8002d2e:	ddec      	ble.n	8002d0a <clearHero1+0x3e>
	}
	for(int i=0; i<20; i++){
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e00f      	b.n	8002d56 <clearHero1+0x8a>
		LCD_Draw_Vertical_Line(x+i,y+40,20,LCD_COLOR_WHITE);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b298      	uxth	r0, r3
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	3328      	adds	r3, #40	@ 0x28
 8002d44:	b299      	uxth	r1, r3
 8002d46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d4a:	2214      	movs	r2, #20
 8002d4c:	f7fd feb4 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3301      	adds	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b13      	cmp	r3, #19
 8002d5a:	ddec      	ble.n	8002d36 <clearHero1+0x6a>
	}
	for(int i=0; i<20; i++){
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	e00f      	b.n	8002d82 <clearHero1+0xb6>
		LCD_Draw_Vertical_Line(x+i,y+60,20,LCD_COLOR_WHITE);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4413      	add	r3, r2
 8002d6a:	b298      	uxth	r0, r3
 8002d6c:	88bb      	ldrh	r3, [r7, #4]
 8002d6e:	333c      	adds	r3, #60	@ 0x3c
 8002d70:	b299      	uxth	r1, r3
 8002d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d76:	2214      	movs	r2, #20
 8002d78:	f7fd fe9e 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b13      	cmp	r3, #19
 8002d86:	ddec      	ble.n	8002d62 <clearHero1+0x96>
	}
};
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <clearOrangeRicky0>:

void clearOrangeRicky0(uint16_t x, uint16_t y){
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	460a      	mov	r2, r1
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e00f      	b.n	8002dc8 <clearOrangeRicky0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4413      	add	r3, r2
 8002db0:	b298      	uxth	r0, r3
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	3314      	adds	r3, #20
 8002db6:	b299      	uxth	r1, r3
 8002db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dbc:	2214      	movs	r2, #20
 8002dbe:	f7fd fe7b 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b3b      	cmp	r3, #59	@ 0x3b
 8002dcc:	ddec      	ble.n	8002da8 <clearOrangeRicky0+0x16>
	}
	for(int i=40; i<60; i++){
 8002dce:	2328      	movs	r3, #40	@ 0x28
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e00d      	b.n	8002df0 <clearOrangeRicky0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b298      	uxth	r0, r3
 8002dde:	88b9      	ldrh	r1, [r7, #4]
 8002de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002de4:	2214      	movs	r2, #20
 8002de6:	f7fd fe67 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=40; i<60; i++){
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3301      	adds	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b3b      	cmp	r3, #59	@ 0x3b
 8002df4:	ddee      	ble.n	8002dd4 <clearOrangeRicky0+0x42>
	}
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <clearOrangeRicky1>:

void clearOrangeRicky1(uint16_t x, uint16_t y){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	460a      	mov	r2, r1
 8002e0a:	80fb      	strh	r3, [r7, #6]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e00d      	b.n	8002e32 <clearOrangeRicky1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	b298      	uxth	r0, r3
 8002e20:	88b9      	ldrh	r1, [r7, #4]
 8002e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e26:	2214      	movs	r2, #20
 8002e28:	f7fd fe46 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b13      	cmp	r3, #19
 8002e36:	ddee      	ble.n	8002e16 <clearOrangeRicky1+0x16>
	}
	for(int i=0; i<20; i++){
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e00f      	b.n	8002e5e <clearOrangeRicky1+0x5e>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4413      	add	r3, r2
 8002e46:	b298      	uxth	r0, r3
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e52:	2214      	movs	r2, #20
 8002e54:	f7fd fe30 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b13      	cmp	r3, #19
 8002e62:	ddec      	ble.n	8002e3e <clearOrangeRicky1+0x3e>
	}
	for(int i=0; i<40; i++){
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e00f      	b.n	8002e8a <clearOrangeRicky1+0x8a>
		LCD_Draw_Vertical_Line(x+i, y+40, 20, LCD_COLOR_WHITE);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	4413      	add	r3, r2
 8002e72:	b298      	uxth	r0, r3
 8002e74:	88bb      	ldrh	r3, [r7, #4]
 8002e76:	3328      	adds	r3, #40	@ 0x28
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7e:	2214      	movs	r2, #20
 8002e80:	f7fd fe1a 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b27      	cmp	r3, #39	@ 0x27
 8002e8e:	ddec      	ble.n	8002e6a <clearOrangeRicky1+0x6a>
	}
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <clearOrangeRicky2>:

void clearOrangeRicky2(uint16_t x, uint16_t y){
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	80fb      	strh	r3, [r7, #6]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e00d      	b.n	8002ecc <clearOrangeRicky2+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b298      	uxth	r0, r3
 8002eba:	88b9      	ldrh	r1, [r7, #4]
 8002ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec0:	2214      	movs	r2, #20
 8002ec2:	f7fd fdf9 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b3b      	cmp	r3, #59	@ 0x3b
 8002ed0:	ddee      	ble.n	8002eb0 <clearOrangeRicky2+0x16>
	}
	for(int i=0; i<20; i++){
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	e00f      	b.n	8002ef8 <clearOrangeRicky2+0x5e>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4413      	add	r3, r2
 8002ee0:	b298      	uxth	r0, r3
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	b299      	uxth	r1, r3
 8002ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002eec:	2214      	movs	r2, #20
 8002eee:	f7fd fde3 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b13      	cmp	r3, #19
 8002efc:	ddec      	ble.n	8002ed8 <clearOrangeRicky2+0x3e>
	}
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <clearOrangeRicky3>:

void clearOrangeRicky3(uint16_t x, uint16_t y){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	460a      	mov	r2, r1
 8002f12:	80fb      	strh	r3, [r7, #6]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e00d      	b.n	8002f3a <clearOrangeRicky3+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	4413      	add	r3, r2
 8002f26:	b298      	uxth	r0, r3
 8002f28:	88b9      	ldrh	r1, [r7, #4]
 8002f2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f2e:	2214      	movs	r2, #20
 8002f30:	f7fd fdc2 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b27      	cmp	r3, #39	@ 0x27
 8002f3e:	ddee      	ble.n	8002f1e <clearOrangeRicky3+0x16>
	}
	for(int i=0; i<20; i++){
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	e011      	b.n	8002f6a <clearOrangeRicky3+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 40, LCD_COLOR_WHITE);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3314      	adds	r3, #20
 8002f52:	b298      	uxth	r0, r3
 8002f54:	88bb      	ldrh	r3, [r7, #4]
 8002f56:	3314      	adds	r3, #20
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	f7fd fdaa 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b13      	cmp	r3, #19
 8002f6e:	ddea      	ble.n	8002f46 <clearOrangeRicky3+0x3e>
	}
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <clearBlueRicky0>:



void clearBlueRicky0(uint16_t x, uint16_t y){
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	460a      	mov	r2, r1
 8002f84:	80fb      	strh	r3, [r7, #6]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e00f      	b.n	8002fb0 <clearBlueRicky0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	4413      	add	r3, r2
 8002f98:	b298      	uxth	r0, r3
 8002f9a:	88bb      	ldrh	r3, [r7, #4]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	b299      	uxth	r1, r3
 8002fa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fa4:	2214      	movs	r2, #20
 8002fa6:	f7fd fd87 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b3b      	cmp	r3, #59	@ 0x3b
 8002fb4:	ddec      	ble.n	8002f90 <clearBlueRicky0+0x16>
	}
	for(int i=0; i<20; i++){
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	e00d      	b.n	8002fd8 <clearBlueRicky0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b298      	uxth	r0, r3
 8002fc6:	88b9      	ldrh	r1, [r7, #4]
 8002fc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fcc:	2214      	movs	r2, #20
 8002fce:	f7fd fd73 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b13      	cmp	r3, #19
 8002fdc:	ddee      	ble.n	8002fbc <clearBlueRicky0+0x42>
	}
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <clearBlueRicky1>:

void clearBlueRicky1(uint16_t x, uint16_t y){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	80fb      	strh	r3, [r7, #6]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e00d      	b.n	800301a <clearBlueRicky1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 60, LCD_COLOR_WHITE);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	b29a      	uxth	r2, r3
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	4413      	add	r3, r2
 8003006:	b298      	uxth	r0, r3
 8003008:	88b9      	ldrh	r1, [r7, #4]
 800300a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800300e:	223c      	movs	r2, #60	@ 0x3c
 8003010:	f7fd fd52 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b13      	cmp	r3, #19
 800301e:	ddee      	ble.n	8002ffe <clearBlueRicky1+0x16>
	}
	for(int i=0; i<20; i++){
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	e00f      	b.n	8003046 <clearBlueRicky1+0x5e>
		LCD_Draw_Vertical_Line(x+i+20, y, 20, LCD_COLOR_WHITE);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	b29a      	uxth	r2, r3
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	4413      	add	r3, r2
 800302e:	b29b      	uxth	r3, r3
 8003030:	3314      	adds	r3, #20
 8003032:	b298      	uxth	r0, r3
 8003034:	88b9      	ldrh	r1, [r7, #4]
 8003036:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800303a:	2214      	movs	r2, #20
 800303c:	f7fd fd3c 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3301      	adds	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b13      	cmp	r3, #19
 800304a:	ddec      	ble.n	8003026 <clearBlueRicky1+0x3e>
	}
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <clearBlueRicky2>:

void clearBlueRicky2(uint16_t x, uint16_t y){
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	460a      	mov	r2, r1
 8003060:	80fb      	strh	r3, [r7, #6]
 8003062:	4613      	mov	r3, r2
 8003064:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e00d      	b.n	8003088 <clearBlueRicky2+0x32>
			LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b29a      	uxth	r2, r3
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4413      	add	r3, r2
 8003074:	b298      	uxth	r0, r3
 8003076:	88b9      	ldrh	r1, [r7, #4]
 8003078:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800307c:	2214      	movs	r2, #20
 800307e:	f7fd fd1b 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b3b      	cmp	r3, #59	@ 0x3b
 800308c:	ddee      	ble.n	800306c <clearBlueRicky2+0x16>
		}
	for(int i=0; i<20; i++){
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	e011      	b.n	80030b8 <clearBlueRicky2+0x62>
			LCD_Draw_Vertical_Line(x+i+40, y+20, 20, LCD_COLOR_WHITE);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	b29a      	uxth	r2, r3
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	4413      	add	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	3328      	adds	r3, #40	@ 0x28
 80030a0:	b298      	uxth	r0, r3
 80030a2:	88bb      	ldrh	r3, [r7, #4]
 80030a4:	3314      	adds	r3, #20
 80030a6:	b299      	uxth	r1, r3
 80030a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030ac:	2214      	movs	r2, #20
 80030ae:	f7fd fd03 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	3301      	adds	r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b13      	cmp	r3, #19
 80030bc:	ddea      	ble.n	8003094 <clearBlueRicky2+0x3e>
		}
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <clearBlueRicky3>:

void clearBlueRicky3(uint16_t x, uint16_t y){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	460a      	mov	r2, r1
 80030d2:	80fb      	strh	r3, [r7, #6]
 80030d4:	4613      	mov	r3, r2
 80030d6:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e00f      	b.n	80030fe <clearBlueRicky3+0x36>
			LCD_Draw_Vertical_Line(x+i+20, y, 60, LCD_COLOR_WHITE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4413      	add	r3, r2
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3314      	adds	r3, #20
 80030ea:	b298      	uxth	r0, r3
 80030ec:	88b9      	ldrh	r1, [r7, #4]
 80030ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030f2:	223c      	movs	r2, #60	@ 0x3c
 80030f4:	f7fd fce0 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b13      	cmp	r3, #19
 8003102:	ddec      	ble.n	80030de <clearBlueRicky3+0x16>
		}
	for(int i=0; i<20; i++){
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	e00f      	b.n	800312a <clearBlueRicky3+0x62>
			LCD_Draw_Vertical_Line(x+i, y+40, 20, LCD_COLOR_WHITE);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	b29a      	uxth	r2, r3
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4413      	add	r3, r2
 8003112:	b298      	uxth	r0, r3
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	3328      	adds	r3, #40	@ 0x28
 8003118:	b299      	uxth	r1, r3
 800311a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800311e:	2214      	movs	r2, #20
 8003120:	f7fd fcca 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3301      	adds	r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b13      	cmp	r3, #19
 800312e:	ddec      	ble.n	800310a <clearBlueRicky3+0x42>
		}
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <clearClevelandZ0>:


void clearClevelandZ0(uint16_t x, uint16_t y){
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	460a      	mov	r2, r1
 8003144:	80fb      	strh	r3, [r7, #6]
 8003146:	4613      	mov	r3, r2
 8003148:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e00d      	b.n	800316c <clearClevelandZ0+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	b29a      	uxth	r2, r3
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	4413      	add	r3, r2
 8003158:	b298      	uxth	r0, r3
 800315a:	88b9      	ldrh	r1, [r7, #4]
 800315c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003160:	2214      	movs	r2, #20
 8003162:	f7fd fca9 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3301      	adds	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b27      	cmp	r3, #39	@ 0x27
 8003170:	ddee      	ble.n	8003150 <clearClevelandZ0+0x16>
	}
	for(int i=20; i<60; i++){
 8003172:	2314      	movs	r3, #20
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	e00f      	b.n	8003198 <clearClevelandZ0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	b29a      	uxth	r2, r3
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4413      	add	r3, r2
 8003180:	b298      	uxth	r0, r3
 8003182:	88bb      	ldrh	r3, [r7, #4]
 8003184:	3314      	adds	r3, #20
 8003186:	b299      	uxth	r1, r3
 8003188:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800318c:	2214      	movs	r2, #20
 800318e:	f7fd fc93 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=20; i<60; i++){
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b3b      	cmp	r3, #59	@ 0x3b
 800319c:	ddec      	ble.n	8003178 <clearClevelandZ0+0x3e>
	}
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <clearClevelandZ1>:

void clearClevelandZ1(uint16_t x, uint16_t y){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	460a      	mov	r2, r1
 80031b2:	80fb      	strh	r3, [r7, #6]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e00f      	b.n	80031de <clearClevelandZ1+0x36>
		LCD_Draw_Vertical_Line(x+i+20, y, 40, LCD_COLOR_WHITE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	4413      	add	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3314      	adds	r3, #20
 80031ca:	b298      	uxth	r0, r3
 80031cc:	88b9      	ldrh	r1, [r7, #4]
 80031ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031d2:	2228      	movs	r2, #40	@ 0x28
 80031d4:	f7fd fc70 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3301      	adds	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b13      	cmp	r3, #19
 80031e2:	ddec      	ble.n	80031be <clearClevelandZ1+0x16>
	}
	for(int i=0; i<20; i++){
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e00f      	b.n	800320a <clearClevelandZ1+0x62>
		LCD_Draw_Vertical_Line(x+i, y+20, 40, LCD_COLOR_WHITE);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	4413      	add	r3, r2
 80031f2:	b298      	uxth	r0, r3
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	3314      	adds	r3, #20
 80031f8:	b299      	uxth	r1, r3
 80031fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031fe:	2228      	movs	r2, #40	@ 0x28
 8003200:	f7fd fc5a 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3301      	adds	r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b13      	cmp	r3, #19
 800320e:	ddec      	ble.n	80031ea <clearClevelandZ1+0x42>
	}
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <clearRhodeIslandZ0>:

void clearRhodeIslandZ0(uint16_t x, uint16_t y){
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	460a      	mov	r2, r1
 8003224:	80fb      	strh	r3, [r7, #6]
 8003226:	4613      	mov	r3, r2
 8003228:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e00f      	b.n	8003250 <clearRhodeIslandZ0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	b29a      	uxth	r2, r3
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	4413      	add	r3, r2
 8003238:	b298      	uxth	r0, r3
 800323a:	88bb      	ldrh	r3, [r7, #4]
 800323c:	3314      	adds	r3, #20
 800323e:	b299      	uxth	r1, r3
 8003240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003244:	2214      	movs	r2, #20
 8003246:	f7fd fc37 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3301      	adds	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b27      	cmp	r3, #39	@ 0x27
 8003254:	ddec      	ble.n	8003230 <clearRhodeIslandZ0+0x16>
	}
	for(int i=20; i<60; i++){
 8003256:	2314      	movs	r3, #20
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	e00d      	b.n	8003278 <clearRhodeIslandZ0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	b29a      	uxth	r2, r3
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	4413      	add	r3, r2
 8003264:	b298      	uxth	r0, r3
 8003266:	88b9      	ldrh	r1, [r7, #4]
 8003268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800326c:	2214      	movs	r2, #20
 800326e:	f7fd fc23 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=20; i<60; i++){
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3301      	adds	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b3b      	cmp	r3, #59	@ 0x3b
 800327c:	ddee      	ble.n	800325c <clearRhodeIslandZ0+0x42>
	}
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <clearRhodeIslandZ1>:

void clearRhodeIslandZ1(uint16_t x, uint16_t y){
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	460a      	mov	r2, r1
 8003292:	80fb      	strh	r3, [r7, #6]
 8003294:	4613      	mov	r3, r2
 8003296:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e00d      	b.n	80032ba <clearRhodeIslandZ1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 40, LCD_COLOR_WHITE);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	4413      	add	r3, r2
 80032a6:	b298      	uxth	r0, r3
 80032a8:	88b9      	ldrh	r1, [r7, #4]
 80032aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032ae:	2228      	movs	r2, #40	@ 0x28
 80032b0:	f7fd fc02 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b13      	cmp	r3, #19
 80032be:	ddee      	ble.n	800329e <clearRhodeIslandZ1+0x16>
	}
	for(int i=0; i<20; i++){
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	e011      	b.n	80032ea <clearRhodeIslandZ1+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 40, LCD_COLOR_WHITE);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	4413      	add	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3314      	adds	r3, #20
 80032d2:	b298      	uxth	r0, r3
 80032d4:	88bb      	ldrh	r3, [r7, #4]
 80032d6:	3314      	adds	r3, #20
 80032d8:	b299      	uxth	r1, r3
 80032da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032de:	2228      	movs	r2, #40	@ 0x28
 80032e0:	f7fd fbea 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b13      	cmp	r3, #19
 80032ee:	ddea      	ble.n	80032c6 <clearRhodeIslandZ1+0x3e>
	}
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <clearTeewee0>:

void clearTeewee0(uint16_t x, uint16_t y){
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	460a      	mov	r2, r1
 8003304:	80fb      	strh	r3, [r7, #6]
 8003306:	4613      	mov	r3, r2
 8003308:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e00f      	b.n	8003330 <clearTeewee0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	b29a      	uxth	r2, r3
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	4413      	add	r3, r2
 8003318:	b298      	uxth	r0, r3
 800331a:	88bb      	ldrh	r3, [r7, #4]
 800331c:	3314      	adds	r3, #20
 800331e:	b299      	uxth	r1, r3
 8003320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003324:	2214      	movs	r2, #20
 8003326:	f7fd fbc7 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3301      	adds	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b3b      	cmp	r3, #59	@ 0x3b
 8003334:	ddec      	ble.n	8003310 <clearTeewee0+0x16>
	}
	for(int i=20; i<40; i++){
 8003336:	2314      	movs	r3, #20
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	e00d      	b.n	8003358 <clearTeewee0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	b29a      	uxth	r2, r3
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	4413      	add	r3, r2
 8003344:	b298      	uxth	r0, r3
 8003346:	88b9      	ldrh	r1, [r7, #4]
 8003348:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800334c:	2214      	movs	r2, #20
 800334e:	f7fd fbb3 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=20; i<40; i++){
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3301      	adds	r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b27      	cmp	r3, #39	@ 0x27
 800335c:	ddee      	ble.n	800333c <clearTeewee0+0x42>
	}
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <clearTeewee1>:

void clearTeewee1(uint16_t x, uint16_t y){
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	460a      	mov	r2, r1
 8003372:	80fb      	strh	r3, [r7, #6]
 8003374:	4613      	mov	r3, r2
 8003376:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e00d      	b.n	800339a <clearTeewee1+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 60, LCD_COLOR_WHITE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	b29a      	uxth	r2, r3
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	4413      	add	r3, r2
 8003386:	b298      	uxth	r0, r3
 8003388:	88b9      	ldrh	r1, [r7, #4]
 800338a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800338e:	223c      	movs	r2, #60	@ 0x3c
 8003390:	f7fd fb92 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b13      	cmp	r3, #19
 800339e:	ddee      	ble.n	800337e <clearTeewee1+0x16>
	}
	for(int i=0; i<20; i++){
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	e011      	b.n	80033ca <clearTeewee1+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 20, LCD_COLOR_WHITE);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	4413      	add	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3314      	adds	r3, #20
 80033b2:	b298      	uxth	r0, r3
 80033b4:	88bb      	ldrh	r3, [r7, #4]
 80033b6:	3314      	adds	r3, #20
 80033b8:	b299      	uxth	r1, r3
 80033ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033be:	2214      	movs	r2, #20
 80033c0:	f7fd fb7a 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	3301      	adds	r3, #1
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b13      	cmp	r3, #19
 80033ce:	ddea      	ble.n	80033a6 <clearTeewee1+0x3e>
	}
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <clearTeewee2>:

void clearTeewee2(uint16_t x, uint16_t y){
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	460a      	mov	r2, r1
 80033e4:	80fb      	strh	r3, [r7, #6]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<60; i++){
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e00d      	b.n	800340c <clearTeewee2+0x32>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	4413      	add	r3, r2
 80033f8:	b298      	uxth	r0, r3
 80033fa:	88b9      	ldrh	r1, [r7, #4]
 80033fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003400:	2214      	movs	r2, #20
 8003402:	f7fd fb59 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<60; i++){
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3301      	adds	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003410:	ddee      	ble.n	80033f0 <clearTeewee2+0x16>
	}
	for(int i=0; i<20; i++){
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	e011      	b.n	800343c <clearTeewee2+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y+20, 20, LCD_COLOR_WHITE);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	b29a      	uxth	r2, r3
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	4413      	add	r3, r2
 8003420:	b29b      	uxth	r3, r3
 8003422:	3314      	adds	r3, #20
 8003424:	b298      	uxth	r0, r3
 8003426:	88bb      	ldrh	r3, [r7, #4]
 8003428:	3314      	adds	r3, #20
 800342a:	b299      	uxth	r1, r3
 800342c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003430:	2214      	movs	r2, #20
 8003432:	f7fd fb41 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3301      	adds	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b13      	cmp	r3, #19
 8003440:	ddea      	ble.n	8003418 <clearTeewee2+0x3e>
	}
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <clearTeewee3>:

void clearTeewee3(uint16_t x, uint16_t y){
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	460a      	mov	r2, r1
 8003456:	80fb      	strh	r3, [r7, #6]
 8003458:	4613      	mov	r3, r2
 800345a:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e00f      	b.n	8003482 <clearTeewee3+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	b29a      	uxth	r2, r3
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4413      	add	r3, r2
 800346a:	b298      	uxth	r0, r3
 800346c:	88bb      	ldrh	r3, [r7, #4]
 800346e:	3314      	adds	r3, #20
 8003470:	b299      	uxth	r1, r3
 8003472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003476:	2214      	movs	r2, #20
 8003478:	f7fd fb1e 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b13      	cmp	r3, #19
 8003486:	ddec      	ble.n	8003462 <clearTeewee3+0x16>
	}
	for(int i=0; i<20; i++){
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	e00f      	b.n	80034ae <clearTeewee3+0x62>
		LCD_Draw_Vertical_Line(x+i+20, y, 60, LCD_COLOR_WHITE);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	b29a      	uxth	r2, r3
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4413      	add	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	3314      	adds	r3, #20
 800349a:	b298      	uxth	r0, r3
 800349c:	88b9      	ldrh	r1, [r7, #4]
 800349e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a2:	223c      	movs	r2, #60	@ 0x3c
 80034a4:	f7fd fb08 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<20; i++){
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b13      	cmp	r3, #19
 80034b2:	ddec      	ble.n	800348e <clearTeewee3+0x42>
	}
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <clearSmashboy0>:

void clearSmashboy0(uint16_t x, uint16_t y){
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	460a      	mov	r2, r1
 80034c8:	80fb      	strh	r3, [r7, #6]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80bb      	strh	r3, [r7, #4]
	for(int i=0; i<40; i++){
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e00f      	b.n	80034f4 <clearSmashboy0+0x36>
		LCD_Draw_Vertical_Line(x+i, y+20, 20, LCD_COLOR_WHITE);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	4413      	add	r3, r2
 80034dc:	b298      	uxth	r0, r3
 80034de:	88bb      	ldrh	r3, [r7, #4]
 80034e0:	3314      	adds	r3, #20
 80034e2:	b299      	uxth	r1, r3
 80034e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034e8:	2214      	movs	r2, #20
 80034ea:	f7fd fae5 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b27      	cmp	r3, #39	@ 0x27
 80034f8:	ddec      	ble.n	80034d4 <clearSmashboy0+0x16>
	}
	for(int i=0; i<40; i++){
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	e00d      	b.n	800351c <clearSmashboy0+0x5e>
		LCD_Draw_Vertical_Line(x+i, y, 20, LCD_COLOR_WHITE);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	b29a      	uxth	r2, r3
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	4413      	add	r3, r2
 8003508:	b298      	uxth	r0, r3
 800350a:	88b9      	ldrh	r1, [r7, #4]
 800350c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003510:	2214      	movs	r2, #20
 8003512:	f7fd fad1 	bl	8000ab8 <LCD_Draw_Vertical_Line>
	for(int i=0; i<40; i++){
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b27      	cmp	r3, #39	@ 0x27
 8003520:	ddee      	ble.n	8003500 <clearSmashboy0+0x42>
	}
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <getTimerRollover>:


uint16_t getTimerRollover(){
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
	return timerRolloverCount;
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <getTimerRollover+0x14>)
 8003532:	881b      	ldrh	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20025d3c 	.word	0x20025d3c

08003544 <addToTimerRollover>:

void addToTimerRollover(){
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	timerRolloverCount++;
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <addToTimerRollover+0x1c>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <addToTimerRollover+0x1c>)
 8003552:	801a      	strh	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20025d3c 	.word	0x20025d3c

08003564 <timerInit>:
 *      Author: derek
 */

#include <Timer_Driver.h>

void timerInit(GPTIMR_RegDef_t* gptimr, GPTimer_Config_t timr_config){
 8003564:	b084      	sub	sp, #16
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	f107 0014 	add.w	r0, r7, #20
 8003572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	gptimr->CR1 &= ~(0x3 << CLK_DIV_SEL_OFFSET);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
	gptimr->CR1 |= (timr_config.ClkDivSel << CLK_DIV_SEL_OFFSET);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]
	gptimr->CR1 &= ~(0x1 << AUTO_RELOAD_BUFF_OFFSET);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
	gptimr->CR1 |= (timr_config.AutoReloadBuffEn << AUTO_RELOAD_BUFF_OFFSET);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035a4:	01db      	lsls	r3, r3, #7
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	601a      	str	r2, [r3, #0]
	gptimr->CR1 &= ~(0x3 << CENTER_ALIGN_MODE_SEL_OFFSET);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
	gptimr->CR1 |= (timr_config.CenterAlignModeSel << CENTER_ALIGN_MODE_SEL_OFFSET);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
	gptimr->CR1 &= ~(0x1 << COUNT_DOWN_EN_OFFSET);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 0210 	bic.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
	gptimr->CR1 |= (timr_config.CountDownEn << COUNT_DOWN_EN_OFFSET);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
	gptimr->CR1 &= ~(0x1 << ONE_PULSE_MODE_OFFSET);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0208 	bic.w	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
	gptimr->CR1 |= (timr_config.OnePulseMode << ONE_PULSE_MODE_OFFSET);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
	gptimr->CR1 &= ~(0x1 << DISABLE_UPDATE_EVENT_OFFSET);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0202 	bic.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
	gptimr->CR1 |=(timr_config.DisableUpdateEvent << DISABLE_UPDATE_EVENT_OFFSET);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	601a      	str	r2, [r3, #0]

	//gptimr->CR2 &= ~(0x7 << MASTER_MODE_SEL_OFFSET);
	//gptimr->CR2 |= (timr_config.MasterModeSel << MASTER_MODE_SEL_OFFSET);

	gptimr->DIER &= ~(0x1 << UPDATE_INTERRUPT_EN_OFFSET);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
	gptimr->DIER |= (timr_config.InterruptUpdateEn << UPDATE_INTERRUPT_EN_OFFSET);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]

	gptimr->PSC = (timr_config.PrescalerVal);
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	629a      	str	r2, [r3, #40]	@ 0x28

	gptimr->ARR = (timr_config.AutoReloadVal);
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	@ 0x2c

	// if timer's interrupt update is enabled in config, enable the interrupt
	if((gptimr->DIER) & (0x1 << UPDATE_INTERRUPT_EN_OFFSET)){
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <timerInit+0xf0>
		timerInterruptEnableDisable(gptimr, ENABLE);
 800364c:	2101      	movs	r1, #1
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f872 	bl	8003738 <timerInterruptEnableDisable>
	}
};
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800365e:	b004      	add	sp, #16
 8003660:	4770      	bx	lr
	...

08003664 <LEDTimer7Init>:

void LEDTimer7Init(){
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b08d      	sub	sp, #52	@ 0x34
 8003668:	af04      	add	r7, sp, #16
	GPTimer_Config_t timr7_config = {0};
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	615a      	str	r2, [r3, #20]
 800367a:	619a      	str	r2, [r3, #24]
	timr7_config.AutoReloadVal = 0xFFFF;
 800367c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003680:	607b      	str	r3, [r7, #4]
	timr7_config.ClkDivSel = CLK_DIV_RAT_4;
 8003682:	2302      	movs	r3, #2
 8003684:	60fb      	str	r3, [r7, #12]
	timr7_config.PrescalerVal = 0xFFFF;
 8003686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800368a:	613b      	str	r3, [r7, #16]
	timr7_config.MasterModeSel = MASTER_MODE_RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]
	timr7_config.CenterAlignModeSel = EDGE_ALIGNED_MODE;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
	timr7_config.AutoReloadBuffEn = NON_ACTIVE;
 8003694:	2300      	movs	r3, #0
 8003696:	763b      	strb	r3, [r7, #24]
	timr7_config.CountDownEn = NON_ACTIVE;
 8003698:	2300      	movs	r3, #0
 800369a:	767b      	strb	r3, [r7, #25]
	timr7_config.InterruptUpdateEn = ACTIVE;
 800369c:	2301      	movs	r3, #1
 800369e:	76bb      	strb	r3, [r7, #26]
	timr7_config.DisableUpdateEvent = NON_ACTIVE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	76fb      	strb	r3, [r7, #27]
	timr7_config.OnePulseMode = NON_ACTIVE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	773b      	strb	r3, [r7, #28]

	TIM_CLK_ENABLE(TIM7_RCC_CLK_OFFSET);
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <LEDTimer7Init+0x70>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <LEDTimer7Init+0x70>)
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	6413      	str	r3, [r2, #64]	@ 0x40
	timerInit(TIM7_0, timr7_config);
 80036b4:	466c      	mov	r4, sp
 80036b6:	f107 0310 	add.w	r3, r7, #16
 80036ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c4:	4804      	ldr	r0, [pc, #16]	@ (80036d8 <LEDTimer7Init+0x74>)
 80036c6:	f7ff ff4d 	bl	8003564 <timerInit>
};
 80036ca:	bf00      	nop
 80036cc:	3724      	adds	r7, #36	@ 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd90      	pop	{r4, r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40001400 	.word	0x40001400

080036dc <timerStart>:
		TIM_CLK_ENABLE(TIM7_RCC_CLK_OFFSET);
	}
};


void timerStart(GPTIMR_RegDef_t* gptimr){
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	gptimr->CR1 |= (0x1<< COUNTER_ENABLE_OFFSET);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
};
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <timerStop>:


void timerStop(GPTIMR_RegDef_t* gptimr){
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	gptimr->CR1 &= ~(0x1<< COUNTER_ENABLE_OFFSET);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 0201 	bic.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	601a      	str	r2, [r3, #0]
};
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <timerReset>:


void timerReset(GPTIMR_RegDef_t* gptimr){
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	gptimr->CNT = 0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	625a      	str	r2, [r3, #36]	@ 0x24
};
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <timerInterruptEnableDisable>:
uint32_t timerCountValue(GPTIMR_RegDef_t* gptimr){
	return gptimr->CNT;
};


void timerInterruptEnableDisable(GPTIMR_RegDef_t* gptimr, uint8_t enable_disable){
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
	if(enable_disable == ENABLE){
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d114      	bne.n	8003774 <timerInterruptEnableDisable+0x3c>
		if(gptimr == TIM5_0){
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <timerInterruptEnableDisable+0x74>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d102      	bne.n	8003758 <timerInterruptEnableDisable+0x20>
			interruptEnable(TIM5_IRQ);
 8003752:	2032      	movs	r0, #50	@ 0x32
 8003754:	f7fc ffa8 	bl	80006a8 <interruptEnable>
		}
		if(gptimr == TIM2_0){
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375e:	d102      	bne.n	8003766 <timerInterruptEnableDisable+0x2e>
			interruptEnable(TIM2_IRQ);
 8003760:	201c      	movs	r0, #28
 8003762:	f7fc ffa1 	bl	80006a8 <interruptEnable>
		}
		if(gptimr == TIM7_0){
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a11      	ldr	r2, [pc, #68]	@ (80037b0 <timerInterruptEnableDisable+0x78>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d102      	bne.n	8003774 <timerInterruptEnableDisable+0x3c>
			interruptEnable(TIM7_IRQ);
 800376e:	2037      	movs	r0, #55	@ 0x37
 8003770:	f7fc ff9a 	bl	80006a8 <interruptEnable>
		}
	}

	if(enable_disable == DISABLE){
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d114      	bne.n	80037a4 <timerInterruptEnableDisable+0x6c>
		if(gptimr == TIM5_0){
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a0b      	ldr	r2, [pc, #44]	@ (80037ac <timerInterruptEnableDisable+0x74>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d102      	bne.n	8003788 <timerInterruptEnableDisable+0x50>
			interruptDisable(TIM5_IRQ);
 8003782:	2032      	movs	r0, #50	@ 0x32
 8003784:	f7fc ffbc 	bl	8000700 <interruptDisable>
		}
		if(gptimr == TIM2_0){
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378e:	d102      	bne.n	8003796 <timerInterruptEnableDisable+0x5e>
			interruptDisable(TIM2_IRQ);
 8003790:	201c      	movs	r0, #28
 8003792:	f7fc ffb5 	bl	8000700 <interruptDisable>
		}
		if(gptimr == TIM7_0){
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a05      	ldr	r2, [pc, #20]	@ (80037b0 <timerInterruptEnableDisable+0x78>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d102      	bne.n	80037a4 <timerInterruptEnableDisable+0x6c>
			interruptDisable(TIM7_IRQ);
 800379e:	2037      	movs	r0, #55	@ 0x37
 80037a0:	f7fc ffae 	bl	8000700 <interruptDisable>
		}
	}
};
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40001400 	.word	0x40001400

080037b4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80037b8:	f000 f9fe 	bl	8003bb8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80037bc:	20ca      	movs	r0, #202	@ 0xca
 80037be:	f000 f943 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80037c2:	20c3      	movs	r0, #195	@ 0xc3
 80037c4:	f000 f94d 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80037c8:	2008      	movs	r0, #8
 80037ca:	f000 f94a 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80037ce:	2050      	movs	r0, #80	@ 0x50
 80037d0:	f000 f947 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80037d4:	20cf      	movs	r0, #207	@ 0xcf
 80037d6:	f000 f937 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80037da:	2000      	movs	r0, #0
 80037dc:	f000 f941 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80037e0:	20c1      	movs	r0, #193	@ 0xc1
 80037e2:	f000 f93e 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80037e6:	2030      	movs	r0, #48	@ 0x30
 80037e8:	f000 f93b 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80037ec:	20ed      	movs	r0, #237	@ 0xed
 80037ee:	f000 f92b 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80037f2:	2064      	movs	r0, #100	@ 0x64
 80037f4:	f000 f935 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80037f8:	2003      	movs	r0, #3
 80037fa:	f000 f932 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80037fe:	2012      	movs	r0, #18
 8003800:	f000 f92f 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003804:	2081      	movs	r0, #129	@ 0x81
 8003806:	f000 f92c 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800380a:	20e8      	movs	r0, #232	@ 0xe8
 800380c:	f000 f91c 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003810:	2085      	movs	r0, #133	@ 0x85
 8003812:	f000 f926 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003816:	2000      	movs	r0, #0
 8003818:	f000 f923 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800381c:	2078      	movs	r0, #120	@ 0x78
 800381e:	f000 f920 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003822:	20cb      	movs	r0, #203	@ 0xcb
 8003824:	f000 f910 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003828:	2039      	movs	r0, #57	@ 0x39
 800382a:	f000 f91a 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800382e:	202c      	movs	r0, #44	@ 0x2c
 8003830:	f000 f917 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003834:	2000      	movs	r0, #0
 8003836:	f000 f914 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800383a:	2034      	movs	r0, #52	@ 0x34
 800383c:	f000 f911 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003840:	2002      	movs	r0, #2
 8003842:	f000 f90e 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003846:	20f7      	movs	r0, #247	@ 0xf7
 8003848:	f000 f8fe 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800384c:	2020      	movs	r0, #32
 800384e:	f000 f908 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003852:	20ea      	movs	r0, #234	@ 0xea
 8003854:	f000 f8f8 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003858:	2000      	movs	r0, #0
 800385a:	f000 f902 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800385e:	2000      	movs	r0, #0
 8003860:	f000 f8ff 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003864:	20b1      	movs	r0, #177	@ 0xb1
 8003866:	f000 f8ef 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800386a:	2000      	movs	r0, #0
 800386c:	f000 f8f9 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003870:	201b      	movs	r0, #27
 8003872:	f000 f8f6 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003876:	20b6      	movs	r0, #182	@ 0xb6
 8003878:	f000 f8e6 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800387c:	200a      	movs	r0, #10
 800387e:	f000 f8f0 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003882:	20a2      	movs	r0, #162	@ 0xa2
 8003884:	f000 f8ed 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003888:	20c0      	movs	r0, #192	@ 0xc0
 800388a:	f000 f8dd 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800388e:	2010      	movs	r0, #16
 8003890:	f000 f8e7 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003894:	20c1      	movs	r0, #193	@ 0xc1
 8003896:	f000 f8d7 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800389a:	2010      	movs	r0, #16
 800389c:	f000 f8e1 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80038a0:	20c5      	movs	r0, #197	@ 0xc5
 80038a2:	f000 f8d1 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80038a6:	2045      	movs	r0, #69	@ 0x45
 80038a8:	f000 f8db 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80038ac:	2015      	movs	r0, #21
 80038ae:	f000 f8d8 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80038b2:	20c7      	movs	r0, #199	@ 0xc7
 80038b4:	f000 f8c8 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80038b8:	2090      	movs	r0, #144	@ 0x90
 80038ba:	f000 f8d2 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80038be:	2036      	movs	r0, #54	@ 0x36
 80038c0:	f000 f8c2 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80038c4:	20c8      	movs	r0, #200	@ 0xc8
 80038c6:	f000 f8cc 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80038ca:	20f2      	movs	r0, #242	@ 0xf2
 80038cc:	f000 f8bc 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80038d0:	2000      	movs	r0, #0
 80038d2:	f000 f8c6 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80038d6:	20b0      	movs	r0, #176	@ 0xb0
 80038d8:	f000 f8b6 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80038dc:	20c2      	movs	r0, #194	@ 0xc2
 80038de:	f000 f8c0 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80038e2:	20b6      	movs	r0, #182	@ 0xb6
 80038e4:	f000 f8b0 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80038e8:	200a      	movs	r0, #10
 80038ea:	f000 f8ba 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80038ee:	20a7      	movs	r0, #167	@ 0xa7
 80038f0:	f000 f8b7 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80038f4:	2027      	movs	r0, #39	@ 0x27
 80038f6:	f000 f8b4 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80038fa:	2004      	movs	r0, #4
 80038fc:	f000 f8b1 	bl	8003a62 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003900:	202a      	movs	r0, #42	@ 0x2a
 8003902:	f000 f8a1 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003906:	2000      	movs	r0, #0
 8003908:	f000 f8ab 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800390c:	2000      	movs	r0, #0
 800390e:	f000 f8a8 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003912:	2000      	movs	r0, #0
 8003914:	f000 f8a5 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003918:	20ef      	movs	r0, #239	@ 0xef
 800391a:	f000 f8a2 	bl	8003a62 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800391e:	202b      	movs	r0, #43	@ 0x2b
 8003920:	f000 f892 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003924:	2000      	movs	r0, #0
 8003926:	f000 f89c 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800392a:	2000      	movs	r0, #0
 800392c:	f000 f899 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8003930:	2001      	movs	r0, #1
 8003932:	f000 f896 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003936:	203f      	movs	r0, #63	@ 0x3f
 8003938:	f000 f893 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800393c:	20f6      	movs	r0, #246	@ 0xf6
 800393e:	f000 f883 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003942:	2001      	movs	r0, #1
 8003944:	f000 f88d 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003948:	2000      	movs	r0, #0
 800394a:	f000 f88a 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800394e:	2006      	movs	r0, #6
 8003950:	f000 f887 	bl	8003a62 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003954:	202c      	movs	r0, #44	@ 0x2c
 8003956:	f000 f877 	bl	8003a48 <ili9341_Write_Reg>
  LCD_Delay(200);
 800395a:	20c8      	movs	r0, #200	@ 0xc8
 800395c:	f000 f9e8 	bl	8003d30 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003960:	2026      	movs	r0, #38	@ 0x26
 8003962:	f000 f871 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003966:	2001      	movs	r0, #1
 8003968:	f000 f87b 	bl	8003a62 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800396c:	20e0      	movs	r0, #224	@ 0xe0
 800396e:	f000 f86b 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003972:	200f      	movs	r0, #15
 8003974:	f000 f875 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003978:	2029      	movs	r0, #41	@ 0x29
 800397a:	f000 f872 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800397e:	2024      	movs	r0, #36	@ 0x24
 8003980:	f000 f86f 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003984:	200c      	movs	r0, #12
 8003986:	f000 f86c 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800398a:	200e      	movs	r0, #14
 800398c:	f000 f869 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003990:	2009      	movs	r0, #9
 8003992:	f000 f866 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003996:	204e      	movs	r0, #78	@ 0x4e
 8003998:	f000 f863 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800399c:	2078      	movs	r0, #120	@ 0x78
 800399e:	f000 f860 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80039a2:	203c      	movs	r0, #60	@ 0x3c
 80039a4:	f000 f85d 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80039a8:	2009      	movs	r0, #9
 80039aa:	f000 f85a 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80039ae:	2013      	movs	r0, #19
 80039b0:	f000 f857 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80039b4:	2005      	movs	r0, #5
 80039b6:	f000 f854 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80039ba:	2017      	movs	r0, #23
 80039bc:	f000 f851 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80039c0:	2011      	movs	r0, #17
 80039c2:	f000 f84e 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80039c6:	2000      	movs	r0, #0
 80039c8:	f000 f84b 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80039cc:	20e1      	movs	r0, #225	@ 0xe1
 80039ce:	f000 f83b 	bl	8003a48 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80039d2:	2000      	movs	r0, #0
 80039d4:	f000 f845 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80039d8:	2016      	movs	r0, #22
 80039da:	f000 f842 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80039de:	201b      	movs	r0, #27
 80039e0:	f000 f83f 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80039e4:	2004      	movs	r0, #4
 80039e6:	f000 f83c 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80039ea:	2011      	movs	r0, #17
 80039ec:	f000 f839 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80039f0:	2007      	movs	r0, #7
 80039f2:	f000 f836 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80039f6:	2031      	movs	r0, #49	@ 0x31
 80039f8:	f000 f833 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80039fc:	2033      	movs	r0, #51	@ 0x33
 80039fe:	f000 f830 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003a02:	2042      	movs	r0, #66	@ 0x42
 8003a04:	f000 f82d 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003a08:	2005      	movs	r0, #5
 8003a0a:	f000 f82a 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003a0e:	200c      	movs	r0, #12
 8003a10:	f000 f827 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003a14:	200a      	movs	r0, #10
 8003a16:	f000 f824 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003a1a:	2028      	movs	r0, #40	@ 0x28
 8003a1c:	f000 f821 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003a20:	202f      	movs	r0, #47	@ 0x2f
 8003a22:	f000 f81e 	bl	8003a62 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003a26:	200f      	movs	r0, #15
 8003a28:	f000 f81b 	bl	8003a62 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003a2c:	2011      	movs	r0, #17
 8003a2e:	f000 f80b 	bl	8003a48 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003a32:	20c8      	movs	r0, #200	@ 0xc8
 8003a34:	f000 f97c 	bl	8003d30 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003a38:	2029      	movs	r0, #41	@ 0x29
 8003a3a:	f000 f805 	bl	8003a48 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003a3e:	202c      	movs	r0, #44	@ 0x2c
 8003a40:	f000 f802 	bl	8003a48 <ili9341_Write_Reg>
}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f949 	bl	8003cec <LCD_IO_WriteReg>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f91a 	bl	8003ca8 <LCD_IO_WriteData>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003a80:	4819      	ldr	r0, [pc, #100]	@ (8003ae8 <SPI_Init+0x6c>)
 8003a82:	f002 fcd2 	bl	800642a <HAL_SPI_GetState>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d12b      	bne.n	8003ae4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003a8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <SPI_Init+0x6c>)
 8003a8e:	4a17      	ldr	r2, [pc, #92]	@ (8003aec <SPI_Init+0x70>)
 8003a90:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <SPI_Init+0x6c>)
 8003a94:	2218      	movs	r2, #24
 8003a96:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003a98:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <SPI_Init+0x6c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <SPI_Init+0x6c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003aa4:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <SPI_Init+0x6c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <SPI_Init+0x6c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <SPI_Init+0x6c>)
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <SPI_Init+0x6c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <SPI_Init+0x6c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <SPI_Init+0x6c>)
 8003ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <SPI_Init+0x6c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <SPI_Init+0x6c>)
 8003ad2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ad6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003ad8:	4803      	ldr	r0, [pc, #12]	@ (8003ae8 <SPI_Init+0x6c>)
 8003ada:	f000 f833 	bl	8003b44 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003ade:	4802      	ldr	r0, [pc, #8]	@ (8003ae8 <SPI_Init+0x6c>)
 8003ae0:	f002 faae 	bl	8006040 <HAL_SPI_Init>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20025d40 	.word	0x20025d40
 8003aec:	40015000 	.word	0x40015000

08003af0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003afe:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <SPI_Write+0x34>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	1db9      	adds	r1, r7, #6
 8003b04:	2201      	movs	r2, #1
 8003b06:	4808      	ldr	r0, [pc, #32]	@ (8003b28 <SPI_Write+0x38>)
 8003b08:	f002 fb4b 	bl	80061a2 <HAL_SPI_Transmit>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003b16:	f000 f809 	bl	8003b2c <SPI_Error>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	20025d40 	.word	0x20025d40

08003b2c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003b30:	4803      	ldr	r0, [pc, #12]	@ (8003b40 <SPI_Error+0x14>)
 8003b32:	f002 fb0e 	bl	8006152 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003b36:	f7ff ffa1 	bl	8003a7c <SPI_Init>
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20025d40 	.word	0x20025d40

08003b44 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <SPI_MspInit+0x6c>)
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <SPI_MspInit+0x6c>)
 8003b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5c:	4b14      	ldr	r3, [pc, #80]	@ (8003bb0 <SPI_MspInit+0x6c>)
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <SPI_MspInit+0x6c>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	4a0f      	ldr	r2, [pc, #60]	@ (8003bb0 <SPI_MspInit+0x6c>)
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b78:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <SPI_MspInit+0x6c>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003b84:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003b92:	2301      	movs	r3, #1
 8003b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003b96:	2305      	movs	r3, #5
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4804      	ldr	r0, [pc, #16]	@ (8003bb4 <SPI_MspInit+0x70>)
 8003ba2:	f000 fe31 	bl	8004808 <HAL_GPIO_Init>
}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	@ 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40021400 	.word	0x40021400

08003bb8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003bbe:	4b36      	ldr	r3, [pc, #216]	@ (8003c98 <LCD_IO_Init+0xe0>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d164      	bne.n	8003c90 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003bc6:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <LCD_IO_Init+0xe0>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	4b32      	ldr	r3, [pc, #200]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	4a31      	ldr	r2, [pc, #196]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003bd6:	f043 0308 	orr.w	r3, r3, #8
 8003bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4827      	ldr	r0, [pc, #156]	@ (8003ca0 <LCD_IO_Init+0xe8>)
 8003c02:	f000 fe01 	bl	8004808 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4a23      	ldr	r2, [pc, #140]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c30:	2302      	movs	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4819      	ldr	r0, [pc, #100]	@ (8003ca0 <LCD_IO_Init+0xe8>)
 8003c3c:	f000 fde4 	bl	8004808 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c40:	2300      	movs	r3, #0
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c50:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <LCD_IO_Init+0xe4>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003c60:	2301      	movs	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003c6c:	f107 030c 	add.w	r3, r7, #12
 8003c70:	4619      	mov	r1, r3
 8003c72:	480c      	ldr	r0, [pc, #48]	@ (8003ca4 <LCD_IO_Init+0xec>)
 8003c74:	f000 fdc8 	bl	8004808 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	4809      	ldr	r0, [pc, #36]	@ (8003ca4 <LCD_IO_Init+0xec>)
 8003c7e:	f001 f87b 	bl	8004d78 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003c82:	2201      	movs	r2, #1
 8003c84:	2104      	movs	r1, #4
 8003c86:	4807      	ldr	r0, [pc, #28]	@ (8003ca4 <LCD_IO_Init+0xec>)
 8003c88:	f001 f876 	bl	8004d78 <HAL_GPIO_WritePin>

    SPI_Init();
 8003c8c:	f7ff fef6 	bl	8003a7c <SPI_Init>
  }
}
 8003c90:	bf00      	nop
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20025d98 	.word	0x20025d98
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020c00 	.word	0x40020c00
 8003ca4:	40020800 	.word	0x40020800

08003ca8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cb8:	480a      	ldr	r0, [pc, #40]	@ (8003ce4 <LCD_IO_WriteData+0x3c>)
 8003cba:	f001 f85d 	bl	8004d78 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	4809      	ldr	r0, [pc, #36]	@ (8003ce8 <LCD_IO_WriteData+0x40>)
 8003cc4:	f001 f858 	bl	8004d78 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ff10 	bl	8003af0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2104      	movs	r1, #4
 8003cd4:	4804      	ldr	r0, [pc, #16]	@ (8003ce8 <LCD_IO_WriteData+0x40>)
 8003cd6:	f001 f84f 	bl	8004d78 <HAL_GPIO_WritePin>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40020800 	.word	0x40020800

08003cec <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cfc:	480a      	ldr	r0, [pc, #40]	@ (8003d28 <LCD_IO_WriteReg+0x3c>)
 8003cfe:	f001 f83b 	bl	8004d78 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003d02:	2200      	movs	r2, #0
 8003d04:	2104      	movs	r1, #4
 8003d06:	4809      	ldr	r0, [pc, #36]	@ (8003d2c <LCD_IO_WriteReg+0x40>)
 8003d08:	f001 f836 	bl	8004d78 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff feed 	bl	8003af0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003d16:	2201      	movs	r2, #1
 8003d18:	2104      	movs	r1, #4
 8003d1a:	4804      	ldr	r0, [pc, #16]	@ (8003d2c <LCD_IO_WriteReg+0x40>)
 8003d1c:	f001 f82c 	bl	8004d78 <HAL_GPIO_WritePin>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40020c00 	.word	0x40020c00
 8003d2c:	40020800 	.word	0x40020800

08003d30 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fbe5 	bl	8004508 <HAL_Delay>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d4c:	f000 fb6a 	bl	8004424 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8003d50:	f000 f834 	bl	8003dbc <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8003d54:	f7fc fc50 	bl	80005f8 <ApplicationInit>


  HAL_Delay(500);
 8003d58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d5c:	f000 fbd4 	bl	8004508 <HAL_Delay>
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {
	  mainMenu();
 8003d60:	f7fc fffa 	bl	8000d58 <mainMenu>
	  setGameState(GAME_STATE_MENU);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fd fa3d 	bl	80011e4 <setGameState>

	  while(getGameState()==GAME_STATE_MENU){
 8003d6a:	e002      	b.n	8003d72 <main+0x2a>
		  HAL_Delay(100);
 8003d6c:	2064      	movs	r0, #100	@ 0x64
 8003d6e:	f000 fbcb 	bl	8004508 <HAL_Delay>
	  while(getGameState()==GAME_STATE_MENU){
 8003d72:	f7fd fa47 	bl	8001204 <getGameState>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d0f7      	beq.n	8003d6c <main+0x24>
	  }

	  playGame();
 8003d7c:	f7fd f8f4 	bl	8000f68 <playGame>
	  while(getGameState()==GAME_STATE_PLAY){
 8003d80:	e008      	b.n	8003d94 <main+0x4c>
		  if( (getScheduledEvents() & (0x1 << 3)) ){
 8003d82:	f7fc ff99 	bl	8000cb8 <getScheduledEvents>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <main+0x4c>
			  updateTick();
 8003d90:	f7fd fa20 	bl	80011d4 <updateTick>
	  while(getGameState()==GAME_STATE_PLAY){
 8003d94:	f7fd fa36 	bl	8001204 <getGameState>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d0f1      	beq.n	8003d82 <main+0x3a>
		  }
	  }

	  while(getGameState()==GAME_STATE_END){
 8003d9e:	e004      	b.n	8003daa <main+0x62>
		  youLoseIdiot();
 8003da0:	f7fd f95c 	bl	800105c <youLoseIdiot>
		  HAL_Delay(100000);
 8003da4:	4804      	ldr	r0, [pc, #16]	@ (8003db8 <main+0x70>)
 8003da6:	f000 fbaf 	bl	8004508 <HAL_Delay>
	  while(getGameState()==GAME_STATE_END){
 8003daa:	f7fd fa2b 	bl	8001204 <getGameState>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d0f5      	beq.n	8003da0 <main+0x58>
	  mainMenu();
 8003db4:	e7d4      	b.n	8003d60 <main+0x18>
 8003db6:	bf00      	nop
 8003db8:	000186a0 	.word	0x000186a0

08003dbc <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b092      	sub	sp, #72	@ 0x48
 8003dc0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e38 <SystemClockOverride+0x7c>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	4a1b      	ldr	r2, [pc, #108]	@ (8003e38 <SystemClockOverride+0x7c>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd2:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <SystemClockOverride+0x7c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003de2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003de6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003de8:	2302      	movs	r3, #2
 8003dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003df0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003df2:	2308      	movs	r3, #8
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003df6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003e00:	2307      	movs	r3, #7
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fa76 	bl	80052f8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e10:	2302      	movs	r3, #2
 8003e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e14:	2300      	movs	r3, #0
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003e1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e22:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003e24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e28:	2105      	movs	r1, #5
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f001 fcdc 	bl	80057e8 <HAL_RCC_ClockConfig>
}
 8003e30:	bf00      	nop
 8003e32:	3748      	adds	r7, #72	@ 0x48
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800

08003e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e40:	b672      	cpsid	i
}
 8003e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <Error_Handler+0x8>

08003e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_MspInit+0x4c>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <HAL_MspInit+0x4c>)
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <HAL_MspInit+0x4c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <HAL_MspInit+0x4c>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	4a08      	ldr	r2, [pc, #32]	@ (8003e94 <HAL_MspInit+0x4c>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_MspInit+0x4c>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e86:	2007      	movs	r0, #7
 8003e88:	f000 fc56 	bl	8004738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800

08003e98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b09a      	sub	sp, #104	@ 0x68
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb4:	2230      	movs	r2, #48	@ 0x30
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fcb8 	bl	800682e <memset>
  if(hltdc->Instance==LTDC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a81      	ldr	r2, [pc, #516]	@ (80040c8 <HAL_LTDC_MspInit+0x230>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f040 80fa 	bne.w	80040be <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003ece:	2332      	movs	r3, #50	@ 0x32
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fe6e 	bl	8005bc0 <HAL_RCCEx_PeriphCLKConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003eea:	f7ff ffa7 	bl	8003e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003ef8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003efe:	4b73      	ldr	r3, [pc, #460]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f14:	f043 0320 	orr.w	r3, r3, #32
 8003f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f36:	4b65      	ldr	r3, [pc, #404]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	4a60      	ldr	r2, [pc, #384]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f52:	4b5e      	ldr	r3, [pc, #376]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	4b5a      	ldr	r3, [pc, #360]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	4a59      	ldr	r2, [pc, #356]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6e:	4b57      	ldr	r3, [pc, #348]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f8a:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_LTDC_MspInit+0x234>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fb6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fc4:	230e      	movs	r3, #14
 8003fc6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003fc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4840      	ldr	r0, [pc, #256]	@ (80040d0 <HAL_LTDC_MspInit+0x238>)
 8003fd0:	f000 fc1a 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003fd4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003fd8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fe6:	230e      	movs	r3, #14
 8003fe8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4838      	ldr	r0, [pc, #224]	@ (80040d4 <HAL_LTDC_MspInit+0x23c>)
 8003ff2:	f000 fc09 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004002:	2300      	movs	r3, #0
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004006:	2309      	movs	r3, #9
 8004008:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800400e:	4619      	mov	r1, r3
 8004010:	4831      	ldr	r0, [pc, #196]	@ (80040d8 <HAL_LTDC_MspInit+0x240>)
 8004012:	f000 fbf9 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004016:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004024:	2300      	movs	r3, #0
 8004026:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004028:	230e      	movs	r3, #14
 800402a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004030:	4619      	mov	r1, r3
 8004032:	4829      	ldr	r0, [pc, #164]	@ (80040d8 <HAL_LTDC_MspInit+0x240>)
 8004034:	f000 fbe8 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004038:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800403c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800404a:	230e      	movs	r3, #14
 800404c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800404e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004052:	4619      	mov	r1, r3
 8004054:	4821      	ldr	r0, [pc, #132]	@ (80040dc <HAL_LTDC_MspInit+0x244>)
 8004056:	f000 fbd7 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800405a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800405e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800406c:	230e      	movs	r3, #14
 800406e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004070:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004074:	4619      	mov	r1, r3
 8004076:	481a      	ldr	r0, [pc, #104]	@ (80040e0 <HAL_LTDC_MspInit+0x248>)
 8004078:	f000 fbc6 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800407c:	2348      	movs	r3, #72	@ 0x48
 800407e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004080:	2302      	movs	r3, #2
 8004082:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	2300      	movs	r3, #0
 8004086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004088:	2300      	movs	r3, #0
 800408a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800408c:	230e      	movs	r3, #14
 800408e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004090:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004094:	4619      	mov	r1, r3
 8004096:	4813      	ldr	r0, [pc, #76]	@ (80040e4 <HAL_LTDC_MspInit+0x24c>)
 8004098:	f000 fbb6 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800409c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80040ae:	2309      	movs	r3, #9
 80040b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040b6:	4619      	mov	r1, r3
 80040b8:	4808      	ldr	r0, [pc, #32]	@ (80040dc <HAL_LTDC_MspInit+0x244>)
 80040ba:	f000 fba5 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80040be:	bf00      	nop
 80040c0:	3768      	adds	r7, #104	@ 0x68
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40016800 	.word	0x40016800
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40021400 	.word	0x40021400
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40021800 	.word	0x40021800
 80040e0:	40020800 	.word	0x40020800
 80040e4:	40020c00 	.word	0x40020c00

080040e8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <HAL_RNG_MspInit+0x3c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10d      	bne.n	8004116 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_RNG_MspInit+0x40>)
 8004100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004102:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <HAL_RNG_MspInit+0x40>)
 8004104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004108:	6353      	str	r3, [r2, #52]	@ 0x34
 800410a:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <HAL_RNG_MspInit+0x40>)
 800410c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	50060800 	.word	0x50060800
 8004128:	40023800 	.word	0x40023800

0800412c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	@ 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	@ (80041b0 <HAL_SPI_MspInit+0x84>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12c      	bne.n	80041a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004158:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800415c:	6453      	str	r3, [r2, #68]	@ 0x44
 800415e:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a10      	ldr	r2, [pc, #64]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 8004174:	f043 0320 	orr.w	r3, r3, #32
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
 800417a:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <HAL_SPI_MspInit+0x88>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004186:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800418a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004198:	2305      	movs	r3, #5
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4805      	ldr	r0, [pc, #20]	@ (80041b8 <HAL_SPI_MspInit+0x8c>)
 80041a4:	f000 fb30 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80041a8:	bf00      	nop
 80041aa:	3728      	adds	r7, #40	@ 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40015000 	.word	0x40015000
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40021400 	.word	0x40021400

080041bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <HAL_SPI_MspDeInit+0x30>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10a      	bne.n	80041e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80041ce:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_SPI_MspDeInit+0x34>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <HAL_SPI_MspDeInit+0x34>)
 80041d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041d8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80041da:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80041de:	4805      	ldr	r0, [pc, #20]	@ (80041f4 <HAL_SPI_MspDeInit+0x38>)
 80041e0:	f000 fcbe 	bl	8004b60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40015000 	.word	0x40015000
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40021400 	.word	0x40021400

080041f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <NMI_Handler+0x4>

08004200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <HardFault_Handler+0x4>

08004208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800420c:	bf00      	nop
 800420e:	e7fd      	b.n	800420c <MemManage_Handler+0x4>

08004210 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <BusFault_Handler+0x4>

08004218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <UsageFault_Handler+0x4>

08004220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424e:	f000 f93b 	bl	80044c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}

08004256 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004256:	b480      	push	{r7}
 8004258:	af00      	add	r7, sp, #0
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e00a      	b.n	800428c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004276:	f3af 8000 	nop.w
 800427a:	4601      	mov	r1, r0
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	60ba      	str	r2, [r7, #8]
 8004282:	b2ca      	uxtb	r2, r1
 8004284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	3301      	adds	r3, #1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	dbf0      	blt.n	8004276 <_read+0x12>
  }

  return len;
 8004294:	687b      	ldr	r3, [r7, #4]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	e009      	b.n	80042c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	60ba      	str	r2, [r7, #8]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	3301      	adds	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	dbf1      	blt.n	80042b0 <_write+0x12>
  }
  return len;
 80042cc:	687b      	ldr	r3, [r7, #4]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_close>:

int _close(int file)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042fe:	605a      	str	r2, [r3, #4]
  return 0;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <_isatty>:

int _isatty(int file)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004316:	2301      	movs	r3, #1
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <_sbrk+0x5c>)
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <_sbrk+0x60>)
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004354:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <_sbrk+0x64>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <_sbrk+0x64>)
 800435e:	4a12      	ldr	r2, [pc, #72]	@ (80043a8 <_sbrk+0x68>)
 8004360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <_sbrk+0x64>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d207      	bcs.n	8004380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004370:	f002 faac 	bl	80068cc <__errno>
 8004374:	4603      	mov	r3, r0
 8004376:	220c      	movs	r2, #12
 8004378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e009      	b.n	8004394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004380:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <_sbrk+0x64>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <_sbrk+0x64>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <_sbrk+0x64>)
 8004390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20030000 	.word	0x20030000
 80043a0:	00000400 	.word	0x00000400
 80043a4:	20025d9c 	.word	0x20025d9c
 80043a8:	20025ef0 	.word	0x20025ef0

080043ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <SystemInit+0x20>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	4a05      	ldr	r2, [pc, #20]	@ (80043cc <SystemInit+0x20>)
 80043b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80043d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043d4:	f7ff ffea 	bl	80043ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043d8:	480c      	ldr	r0, [pc, #48]	@ (800440c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043da:	490d      	ldr	r1, [pc, #52]	@ (8004410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e0:	e002      	b.n	80043e8 <LoopCopyDataInit>

080043e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e6:	3304      	adds	r3, #4

080043e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043ec:	d3f9      	bcc.n	80043e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043f0:	4c0a      	ldr	r4, [pc, #40]	@ (800441c <LoopFillZerobss+0x22>)
  movs r3, #0
 80043f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f4:	e001      	b.n	80043fa <LoopFillZerobss>

080043f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f8:	3204      	adds	r2, #4

080043fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043fc:	d3fb      	bcc.n	80043f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80043fe:	f002 fa6b 	bl	80068d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004402:	f7ff fca1 	bl	8003d48 <main>
  bx  lr    
 8004406:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004408:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004414:	080086ac 	.word	0x080086ac
  ldr r2, =_sbss
 8004418:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800441c:	20025ef0 	.word	0x20025ef0

08004420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <ADC_IRQHandler>
	...

08004424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004428:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <HAL_Init+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_Init+0x40>)
 800442e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_Init+0x40>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0a      	ldr	r2, [pc, #40]	@ (8004464 <HAL_Init+0x40>)
 800443a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800443e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_Init+0x40>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <HAL_Init+0x40>)
 8004446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800444c:	2003      	movs	r0, #3
 800444e:	f000 f973 	bl	8004738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004452:	2000      	movs	r0, #0
 8004454:	f000 f808 	bl	8004468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004458:	f7ff fcf6 	bl	8003e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023c00 	.word	0x40023c00

08004468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004470:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_InitTick+0x54>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <HAL_InitTick+0x58>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800447e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f999 	bl	80047be <HAL_SYSTICK_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00e      	b.n	80044b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d80a      	bhi.n	80044b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800449c:	2200      	movs	r2, #0
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f000 f953 	bl	800474e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a8:	4a06      	ldr	r2, [pc, #24]	@ (80044c4 <HAL_InitTick+0x5c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000010 	.word	0x20000010
 80044c0:	20000018 	.word	0x20000018
 80044c4:	20000014 	.word	0x20000014

080044c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_IncTick+0x20>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_IncTick+0x24>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	4a04      	ldr	r2, [pc, #16]	@ (80044ec <HAL_IncTick+0x24>)
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000018 	.word	0x20000018
 80044ec:	20025da0 	.word	0x20025da0

080044f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return uwTick;
 80044f4:	4b03      	ldr	r3, [pc, #12]	@ (8004504 <HAL_GetTick+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20025da0 	.word	0x20025da0

08004508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff ffee 	bl	80044f0 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d005      	beq.n	800452e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_Delay+0x44>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800452e:	bf00      	nop
 8004530:	f7ff ffde 	bl	80044f0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d8f7      	bhi.n	8004530 <HAL_Delay+0x28>
  {
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000018 	.word	0x20000018

08004550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004560:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <__NVIC_SetPriorityGrouping+0x44>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800456c:	4013      	ands	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800457c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004582:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <__NVIC_SetPriorityGrouping+0x44>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	60d3      	str	r3, [r2, #12]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800459c:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <__NVIC_GetPriorityGrouping+0x18>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 0307 	and.w	r3, r3, #7
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	db0b      	blt.n	80045de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	f003 021f 	and.w	r2, r3, #31
 80045cc:	4907      	ldr	r1, [pc, #28]	@ (80045ec <__NVIC_EnableIRQ+0x38>)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2001      	movs	r0, #1
 80045d6:	fa00 f202 	lsl.w	r2, r0, r2
 80045da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000e100 	.word	0xe000e100

080045f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	db12      	blt.n	8004628 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	490a      	ldr	r1, [pc, #40]	@ (8004634 <__NVIC_DisableIRQ+0x44>)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2001      	movs	r0, #1
 8004612:	fa00 f202 	lsl.w	r2, r0, r2
 8004616:	3320      	adds	r3, #32
 8004618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800461c:	f3bf 8f4f 	dsb	sy
}
 8004620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004622:	f3bf 8f6f 	isb	sy
}
 8004626:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000e100 	.word	0xe000e100

08004638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	2b00      	cmp	r3, #0
 800464a:	db0a      	blt.n	8004662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	490c      	ldr	r1, [pc, #48]	@ (8004684 <__NVIC_SetPriority+0x4c>)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	0112      	lsls	r2, r2, #4
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	440b      	add	r3, r1
 800465c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004660:	e00a      	b.n	8004678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	4908      	ldr	r1, [pc, #32]	@ (8004688 <__NVIC_SetPriority+0x50>)
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	3b04      	subs	r3, #4
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	440b      	add	r3, r1
 8004676:	761a      	strb	r2, [r3, #24]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000e100 	.word	0xe000e100
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f1c3 0307 	rsb	r3, r3, #7
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	bf28      	it	cs
 80046aa:	2304      	movcs	r3, #4
 80046ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d902      	bls.n	80046bc <NVIC_EncodePriority+0x30>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3b03      	subs	r3, #3
 80046ba:	e000      	b.n	80046be <NVIC_EncodePriority+0x32>
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	401a      	ands	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d4:	f04f 31ff 	mov.w	r1, #4294967295
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	43d9      	mvns	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e4:	4313      	orrs	r3, r2
         );
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3724      	adds	r7, #36	@ 0x24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004704:	d301      	bcc.n	800470a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004706:	2301      	movs	r3, #1
 8004708:	e00f      	b.n	800472a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470a:	4a0a      	ldr	r2, [pc, #40]	@ (8004734 <SysTick_Config+0x40>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004712:	210f      	movs	r1, #15
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	f7ff ff8e 	bl	8004638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <SysTick_Config+0x40>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <SysTick_Config+0x40>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff05 	bl	8004550 <__NVIC_SetPriorityGrouping>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	4603      	mov	r3, r0
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004760:	f7ff ff1a 	bl	8004598 <__NVIC_GetPriorityGrouping>
 8004764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	6978      	ldr	r0, [r7, #20]
 800476c:	f7ff ff8e 	bl	800468c <NVIC_EncodePriority>
 8004770:	4602      	mov	r2, r0
 8004772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ff5d 	bl	8004638 <__NVIC_SetPriority>
}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff0d 	bl	80045b4 <__NVIC_EnableIRQ>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff1d 	bl	80045f0 <__NVIC_DisableIRQ>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ff94 	bl	80046f4 <SysTick_Config>
 80047cc:	4603      	mov	r3, r0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2201      	movs	r2, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80047f2:	4a04      	ldr	r2, [pc, #16]	@ (8004804 <HAL_EXTI_ClearPending+0x2c>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6153      	str	r3, [r2, #20]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40013c00 	.word	0x40013c00

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	@ 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e177      	b.n	8004b14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004824:	2201      	movs	r2, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	f040 8166 	bne.w	8004b0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d005      	beq.n	800485a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004856:	2b02      	cmp	r3, #2
 8004858:	d130      	bne.n	80048bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0201 	and.w	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d017      	beq.n	80048f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d123      	bne.n	800494c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	220f      	movs	r2, #15
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80c0 	beq.w	8004b0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	4b66      	ldr	r3, [pc, #408]	@ (8004b2c <HAL_GPIO_Init+0x324>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	4a65      	ldr	r2, [pc, #404]	@ (8004b2c <HAL_GPIO_Init+0x324>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800499c:	6453      	str	r3, [r2, #68]	@ 0x44
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_GPIO_Init+0x324>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049aa:	4a61      	ldr	r2, [pc, #388]	@ (8004b30 <HAL_GPIO_Init+0x328>)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a58      	ldr	r2, [pc, #352]	@ (8004b34 <HAL_GPIO_Init+0x32c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d037      	beq.n	8004a46 <HAL_GPIO_Init+0x23e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a57      	ldr	r2, [pc, #348]	@ (8004b38 <HAL_GPIO_Init+0x330>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_GPIO_Init+0x23a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a56      	ldr	r2, [pc, #344]	@ (8004b3c <HAL_GPIO_Init+0x334>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02b      	beq.n	8004a3e <HAL_GPIO_Init+0x236>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a55      	ldr	r2, [pc, #340]	@ (8004b40 <HAL_GPIO_Init+0x338>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d025      	beq.n	8004a3a <HAL_GPIO_Init+0x232>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a54      	ldr	r2, [pc, #336]	@ (8004b44 <HAL_GPIO_Init+0x33c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01f      	beq.n	8004a36 <HAL_GPIO_Init+0x22e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a53      	ldr	r2, [pc, #332]	@ (8004b48 <HAL_GPIO_Init+0x340>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d019      	beq.n	8004a32 <HAL_GPIO_Init+0x22a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a52      	ldr	r2, [pc, #328]	@ (8004b4c <HAL_GPIO_Init+0x344>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_GPIO_Init+0x226>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a51      	ldr	r2, [pc, #324]	@ (8004b50 <HAL_GPIO_Init+0x348>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00d      	beq.n	8004a2a <HAL_GPIO_Init+0x222>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a50      	ldr	r2, [pc, #320]	@ (8004b54 <HAL_GPIO_Init+0x34c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <HAL_GPIO_Init+0x21e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a4f      	ldr	r2, [pc, #316]	@ (8004b58 <HAL_GPIO_Init+0x350>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_GPIO_Init+0x21a>
 8004a1e:	2309      	movs	r3, #9
 8004a20:	e012      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a22:	230a      	movs	r3, #10
 8004a24:	e010      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a26:	2308      	movs	r3, #8
 8004a28:	e00e      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a2a:	2307      	movs	r3, #7
 8004a2c:	e00c      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a2e:	2306      	movs	r3, #6
 8004a30:	e00a      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a32:	2305      	movs	r3, #5
 8004a34:	e008      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a36:	2304      	movs	r3, #4
 8004a38:	e006      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e004      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e002      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_GPIO_Init+0x240>
 8004a46:	2300      	movs	r3, #0
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	f002 0203 	and.w	r2, r2, #3
 8004a4e:	0092      	lsls	r2, r2, #2
 8004a50:	4093      	lsls	r3, r2
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a58:	4935      	ldr	r1, [pc, #212]	@ (8004b30 <HAL_GPIO_Init+0x328>)
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	3302      	adds	r3, #2
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a66:	4b3d      	ldr	r3, [pc, #244]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a8a:	4a34      	ldr	r2, [pc, #208]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a90:	4b32      	ldr	r3, [pc, #200]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ab4:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aba:	4b28      	ldr	r3, [pc, #160]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ade:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b08:	4a14      	ldr	r2, [pc, #80]	@ (8004b5c <HAL_GPIO_Init+0x354>)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3301      	adds	r3, #1
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	f67f ae84 	bls.w	8004824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	3724      	adds	r7, #36	@ 0x24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40013800 	.word	0x40013800
 8004b34:	40020000 	.word	0x40020000
 8004b38:	40020400 	.word	0x40020400
 8004b3c:	40020800 	.word	0x40020800
 8004b40:	40020c00 	.word	0x40020c00
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40021400 	.word	0x40021400
 8004b4c:	40021800 	.word	0x40021800
 8004b50:	40021c00 	.word	0x40021c00
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40022400 	.word	0x40022400
 8004b5c:	40013c00 	.word	0x40013c00

08004b60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e0d9      	b.n	8004d30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	f040 80c9 	bne.w	8004d2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b98:	4a6b      	ldr	r2, [pc, #428]	@ (8004d48 <HAL_GPIO_DeInit+0x1e8>)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	220f      	movs	r2, #15
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a63      	ldr	r2, [pc, #396]	@ (8004d4c <HAL_GPIO_DeInit+0x1ec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d037      	beq.n	8004c32 <HAL_GPIO_DeInit+0xd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a62      	ldr	r2, [pc, #392]	@ (8004d50 <HAL_GPIO_DeInit+0x1f0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_GPIO_DeInit+0xce>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a61      	ldr	r2, [pc, #388]	@ (8004d54 <HAL_GPIO_DeInit+0x1f4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02b      	beq.n	8004c2a <HAL_GPIO_DeInit+0xca>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a60      	ldr	r2, [pc, #384]	@ (8004d58 <HAL_GPIO_DeInit+0x1f8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d025      	beq.n	8004c26 <HAL_GPIO_DeInit+0xc6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a5f      	ldr	r2, [pc, #380]	@ (8004d5c <HAL_GPIO_DeInit+0x1fc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <HAL_GPIO_DeInit+0xc2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a5e      	ldr	r2, [pc, #376]	@ (8004d60 <HAL_GPIO_DeInit+0x200>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d019      	beq.n	8004c1e <HAL_GPIO_DeInit+0xbe>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a5d      	ldr	r2, [pc, #372]	@ (8004d64 <HAL_GPIO_DeInit+0x204>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_GPIO_DeInit+0xba>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8004d68 <HAL_GPIO_DeInit+0x208>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00d      	beq.n	8004c16 <HAL_GPIO_DeInit+0xb6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a5b      	ldr	r2, [pc, #364]	@ (8004d6c <HAL_GPIO_DeInit+0x20c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <HAL_GPIO_DeInit+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a5a      	ldr	r2, [pc, #360]	@ (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_GPIO_DeInit+0xae>
 8004c0a:	2309      	movs	r3, #9
 8004c0c:	e012      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e010      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c12:	2308      	movs	r3, #8
 8004c14:	e00e      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c16:	2307      	movs	r3, #7
 8004c18:	e00c      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c1a:	2306      	movs	r3, #6
 8004c1c:	e00a      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c1e:	2305      	movs	r3, #5
 8004c20:	e008      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c22:	2304      	movs	r3, #4
 8004c24:	e006      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c26:	2303      	movs	r3, #3
 8004c28:	e004      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e002      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c32:	2300      	movs	r3, #0
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	f002 0203 	and.w	r2, r2, #3
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	4093      	lsls	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d132      	bne.n	8004caa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c44:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	4949      	ldr	r1, [pc, #292]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c52:	4b48      	ldr	r3, [pc, #288]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	4946      	ldr	r1, [pc, #280]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c60:	4b44      	ldr	r3, [pc, #272]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	4942      	ldr	r1, [pc, #264]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c6e:	4b41      	ldr	r3, [pc, #260]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	493f      	ldr	r1, [pc, #252]	@ (8004d74 <HAL_GPIO_DeInit+0x214>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	220f      	movs	r2, #15
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <HAL_GPIO_DeInit+0x1e8>)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	3302      	adds	r3, #2
 8004c94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	482a      	ldr	r0, [pc, #168]	@ (8004d48 <HAL_GPIO_DeInit+0x1e8>)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	08da      	lsrs	r2, r3, #3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3208      	adds	r2, #8
 8004cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	08d2      	lsrs	r2, r2, #3
 8004ce0:	4019      	ands	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3208      	adds	r2, #8
 8004ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2103      	movs	r1, #3
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	2101      	movs	r1, #1
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	401a      	ands	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2103      	movs	r1, #3
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	f67f af22 	bls.w	8004b7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40020000 	.word	0x40020000
 8004d50:	40020400 	.word	0x40020400
 8004d54:	40020800 	.word	0x40020800
 8004d58:	40020c00 	.word	0x40020c00
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40021400 	.word	0x40021400
 8004d64:	40021800 	.word	0x40021800
 8004d68:	40021c00 	.word	0x40021c00
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	40022400 	.word	0x40022400
 8004d74:	40013c00 	.word	0x40013c00

08004d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d88:	787b      	ldrb	r3, [r7, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d94:	e003      	b.n	8004d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	041a      	lsls	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	619a      	str	r2, [r3, #24]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0bf      	b.n	8004f3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff f860 	bl	8003e98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004dee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6999      	ldr	r1, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f48 <HAL_LTDC_Init+0x19c>)
 8004e20:	400b      	ands	r3, r1
 8004e22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68d9      	ldr	r1, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f48 <HAL_LTDC_Init+0x19c>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68d9      	ldr	r1, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6919      	ldr	r1, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b33      	ldr	r3, [pc, #204]	@ (8004f48 <HAL_LTDC_Init+0x19c>)
 8004e7c:	400b      	ands	r3, r1
 8004e7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6919      	ldr	r1, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6959      	ldr	r1, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4b27      	ldr	r3, [pc, #156]	@ (8004f48 <HAL_LTDC_Init+0x19c>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	041b      	lsls	r3, r3, #16
 8004eb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6959      	ldr	r1, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0206 	orr.w	r2, r2, #6
 8004f1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	f000f800 	.word	0xf000f800

08004f4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f4c:	b5b0      	push	{r4, r5, r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_LTDC_ConfigLayer+0x1a>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e02c      	b.n	8004fc0 <HAL_LTDC_ConfigLayer+0x74>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2134      	movs	r1, #52	@ 0x34
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4614      	mov	r4, r2
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f811 	bl	8004fc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2201      	movs	r2, #1
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdb0      	pop	{r4, r5, r7, pc}

08004fc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b089      	sub	sp, #36	@ 0x24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe4:	4413      	add	r3, r2
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	01db      	lsls	r3, r3, #7
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3384      	adds	r3, #132	@ 0x84
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	4611      	mov	r1, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	01d2      	lsls	r2, r2, #7
 8005004:	440a      	add	r2, r1
 8005006:	3284      	adds	r2, #132	@ 0x84
 8005008:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800500c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800501e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005020:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	01db      	lsls	r3, r3, #7
 800502c:	440b      	add	r3, r1
 800502e:	3384      	adds	r3, #132	@ 0x84
 8005030:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005036:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005046:	4413      	add	r3, r2
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	4413      	add	r3, r2
 8005058:	3384      	adds	r3, #132	@ 0x84
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	4611      	mov	r1, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	01d2      	lsls	r2, r2, #7
 8005066:	440a      	add	r2, r1
 8005068:	3284      	adds	r2, #132	@ 0x84
 800506a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800506e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507e:	4413      	add	r3, r2
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4619      	mov	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	01db      	lsls	r3, r3, #7
 800508c:	440b      	add	r3, r1
 800508e:	3384      	adds	r3, #132	@ 0x84
 8005090:	4619      	mov	r1, r3
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4313      	orrs	r3, r2
 8005096:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	01db      	lsls	r3, r3, #7
 80050a2:	4413      	add	r3, r2
 80050a4:	3384      	adds	r3, #132	@ 0x84
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	4611      	mov	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	01d2      	lsls	r2, r2, #7
 80050b2:	440a      	add	r2, r1
 80050b4:	3284      	adds	r2, #132	@ 0x84
 80050b6:	f023 0307 	bic.w	r3, r3, #7
 80050ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	01db      	lsls	r3, r3, #7
 80050c6:	4413      	add	r3, r2
 80050c8:	3384      	adds	r3, #132	@ 0x84
 80050ca:	461a      	mov	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	01db      	lsls	r3, r3, #7
 80050f8:	4413      	add	r3, r2
 80050fa:	3384      	adds	r3, #132	@ 0x84
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	01db      	lsls	r3, r3, #7
 8005108:	4413      	add	r3, r2
 800510a:	3384      	adds	r3, #132	@ 0x84
 800510c:	461a      	mov	r2, r3
 800510e:	2300      	movs	r3, #0
 8005110:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005118:	461a      	mov	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	431a      	orrs	r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	431a      	orrs	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	440b      	add	r3, r1
 800512e:	3384      	adds	r3, #132	@ 0x84
 8005130:	4619      	mov	r1, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	01db      	lsls	r3, r3, #7
 8005142:	4413      	add	r3, r2
 8005144:	3384      	adds	r3, #132	@ 0x84
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	4611      	mov	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	01d2      	lsls	r2, r2, #7
 8005152:	440a      	add	r2, r1
 8005154:	3284      	adds	r2, #132	@ 0x84
 8005156:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800515a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	4413      	add	r3, r2
 8005168:	3384      	adds	r3, #132	@ 0x84
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	01db      	lsls	r3, r3, #7
 800517c:	4413      	add	r3, r2
 800517e:	3384      	adds	r3, #132	@ 0x84
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	4611      	mov	r1, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	01d2      	lsls	r2, r2, #7
 800518c:	440a      	add	r2, r1
 800518e:	3284      	adds	r2, #132	@ 0x84
 8005190:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	69da      	ldr	r2, [r3, #28]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	6809      	ldr	r1, [r1, #0]
 80051a6:	4608      	mov	r0, r1
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	01c9      	lsls	r1, r1, #7
 80051ac:	4401      	add	r1, r0
 80051ae:	3184      	adds	r1, #132	@ 0x84
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	01db      	lsls	r3, r3, #7
 80051be:	4413      	add	r3, r2
 80051c0:	3384      	adds	r3, #132	@ 0x84
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	01db      	lsls	r3, r3, #7
 80051ce:	4413      	add	r3, r2
 80051d0:	3384      	adds	r3, #132	@ 0x84
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	01db      	lsls	r3, r3, #7
 80051e2:	4413      	add	r3, r2
 80051e4:	3384      	adds	r3, #132	@ 0x84
 80051e6:	461a      	mov	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80051f6:	2304      	movs	r3, #4
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e01b      	b.n	8005234 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d102      	bne.n	800520a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005204:	2303      	movs	r3, #3
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e014      	b.n	8005234 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d00b      	beq.n	800522a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005216:	2b02      	cmp	r3, #2
 8005218:	d007      	beq.n	800522a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800521e:	2b03      	cmp	r3, #3
 8005220:	d003      	beq.n	800522a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005226:	2b07      	cmp	r3, #7
 8005228:	d102      	bne.n	8005230 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800522a:	2302      	movs	r3, #2
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	e001      	b.n	8005234 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005230:	2301      	movs	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	01db      	lsls	r3, r3, #7
 800523e:	4413      	add	r3, r2
 8005240:	3384      	adds	r3, #132	@ 0x84
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	4611      	mov	r1, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	01d2      	lsls	r2, r2, #7
 800524e:	440a      	add	r2, r1
 8005250:	3284      	adds	r2, #132	@ 0x84
 8005252:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005256:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1acb      	subs	r3, r1, r3
 800526e:	69f9      	ldr	r1, [r7, #28]
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	4608      	mov	r0, r1
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	01c9      	lsls	r1, r1, #7
 8005280:	4401      	add	r1, r0
 8005282:	3184      	adds	r1, #132	@ 0x84
 8005284:	4313      	orrs	r3, r2
 8005286:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	01db      	lsls	r3, r3, #7
 8005292:	4413      	add	r3, r2
 8005294:	3384      	adds	r3, #132	@ 0x84
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	4611      	mov	r1, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	01d2      	lsls	r2, r2, #7
 80052a2:	440a      	add	r2, r1
 80052a4:	3284      	adds	r2, #132	@ 0x84
 80052a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	01db      	lsls	r3, r3, #7
 80052ba:	4413      	add	r3, r2
 80052bc:	3384      	adds	r3, #132	@ 0x84
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	01db      	lsls	r3, r3, #7
 80052d0:	4413      	add	r3, r2
 80052d2:	3384      	adds	r3, #132	@ 0x84
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	4611      	mov	r1, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	01d2      	lsls	r2, r2, #7
 80052e0:	440a      	add	r2, r1
 80052e2:	3284      	adds	r2, #132	@ 0x84
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6013      	str	r3, [r2, #0]
}
 80052ea:	bf00      	nop
 80052ec:	3724      	adds	r7, #36	@ 0x24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e267      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d075      	beq.n	8005402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005316:	4b88      	ldr	r3, [pc, #544]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b04      	cmp	r3, #4
 8005320:	d00c      	beq.n	800533c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005322:	4b85      	ldr	r3, [pc, #532]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800532a:	2b08      	cmp	r3, #8
 800532c:	d112      	bne.n	8005354 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800532e:	4b82      	ldr	r3, [pc, #520]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800533a:	d10b      	bne.n	8005354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533c:	4b7e      	ldr	r3, [pc, #504]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d05b      	beq.n	8005400 <HAL_RCC_OscConfig+0x108>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d157      	bne.n	8005400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e242      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800535c:	d106      	bne.n	800536c <HAL_RCC_OscConfig+0x74>
 800535e:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a75      	ldr	r2, [pc, #468]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e01d      	b.n	80053a8 <HAL_RCC_OscConfig+0xb0>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0x98>
 8005376:	4b70      	ldr	r3, [pc, #448]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6f      	ldr	r2, [pc, #444]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800537c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	4b6d      	ldr	r3, [pc, #436]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a6c      	ldr	r2, [pc, #432]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e00b      	b.n	80053a8 <HAL_RCC_OscConfig+0xb0>
 8005390:	4b69      	ldr	r3, [pc, #420]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a68      	ldr	r2, [pc, #416]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b66      	ldr	r3, [pc, #408]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a65      	ldr	r2, [pc, #404]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 80053a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d013      	beq.n	80053d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7ff f89e 	bl	80044f0 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b8:	f7ff f89a 	bl	80044f0 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	@ 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e207      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0xc0>
 80053d6:	e014      	b.n	8005402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d8:	f7ff f88a 	bl	80044f0 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e0:	f7ff f886 	bl	80044f0 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	@ 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e1f3      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f2:	4b51      	ldr	r3, [pc, #324]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0xe8>
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d063      	beq.n	80054d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800540e:	4b4a      	ldr	r3, [pc, #296]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541a:	4b47      	ldr	r3, [pc, #284]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005422:	2b08      	cmp	r3, #8
 8005424:	d11c      	bne.n	8005460 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005426:	4b44      	ldr	r3, [pc, #272]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	4b41      	ldr	r3, [pc, #260]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x152>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d001      	beq.n	800544a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e1c7      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544a:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4937      	ldr	r1, [pc, #220]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545e:	e03a      	b.n	80054d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d020      	beq.n	80054aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005468:	4b34      	ldr	r3, [pc, #208]	@ (800553c <HAL_RCC_OscConfig+0x244>)
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546e:	f7ff f83f 	bl	80044f0 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005476:	f7ff f83b 	bl	80044f0 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e1a8      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005494:	4b28      	ldr	r3, [pc, #160]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4925      	ldr	r1, [pc, #148]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]
 80054a8:	e015      	b.n	80054d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054aa:	4b24      	ldr	r3, [pc, #144]	@ (800553c <HAL_RCC_OscConfig+0x244>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7ff f81e 	bl	80044f0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b8:	f7ff f81a 	bl	80044f0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e187      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d036      	beq.n	8005550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <HAL_RCC_OscConfig+0x248>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f0:	f7fe fffe 	bl	80044f0 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f8:	f7fe fffa 	bl	80044f0 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e167      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550a:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCC_OscConfig+0x240>)
 800550c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x200>
 8005516:	e01b      	b.n	8005550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005518:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <HAL_RCC_OscConfig+0x248>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551e:	f7fe ffe7 	bl	80044f0 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005524:	e00e      	b.n	8005544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005526:	f7fe ffe3 	bl	80044f0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d907      	bls.n	8005544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e150      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
 8005538:	40023800 	.word	0x40023800
 800553c:	42470000 	.word	0x42470000
 8005540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005544:	4b88      	ldr	r3, [pc, #544]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1ea      	bne.n	8005526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8097 	beq.w	800568c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005562:	4b81      	ldr	r3, [pc, #516]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	4b7d      	ldr	r3, [pc, #500]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	4a7c      	ldr	r2, [pc, #496]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800557c:	6413      	str	r3, [r2, #64]	@ 0x40
 800557e:	4b7a      	ldr	r3, [pc, #488]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558e:	4b77      	ldr	r3, [pc, #476]	@ (800576c <HAL_RCC_OscConfig+0x474>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d118      	bne.n	80055cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800559a:	4b74      	ldr	r3, [pc, #464]	@ (800576c <HAL_RCC_OscConfig+0x474>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a73      	ldr	r2, [pc, #460]	@ (800576c <HAL_RCC_OscConfig+0x474>)
 80055a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a6:	f7fe ffa3 	bl	80044f0 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fe ff9f 	bl	80044f0 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e10c      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c0:	4b6a      	ldr	r3, [pc, #424]	@ (800576c <HAL_RCC_OscConfig+0x474>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d106      	bne.n	80055e2 <HAL_RCC_OscConfig+0x2ea>
 80055d4:	4b64      	ldr	r3, [pc, #400]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d8:	4a63      	ldr	r2, [pc, #396]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e0:	e01c      	b.n	800561c <HAL_RCC_OscConfig+0x324>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b05      	cmp	r3, #5
 80055e8:	d10c      	bne.n	8005604 <HAL_RCC_OscConfig+0x30c>
 80055ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80055f0:	f043 0304 	orr.w	r3, r3, #4
 80055f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	6713      	str	r3, [r2, #112]	@ 0x70
 8005602:	e00b      	b.n	800561c <HAL_RCC_OscConfig+0x324>
 8005604:	4b58      	ldr	r3, [pc, #352]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005608:	4a57      	ldr	r2, [pc, #348]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005610:	4b55      	ldr	r3, [pc, #340]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005614:	4a54      	ldr	r2, [pc, #336]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005616:	f023 0304 	bic.w	r3, r3, #4
 800561a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fe ff64 	bl	80044f0 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562a:	e00a      	b.n	8005642 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562c:	f7fe ff60 	bl	80044f0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e0cb      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005642:	4b49      	ldr	r3, [pc, #292]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0ee      	beq.n	800562c <HAL_RCC_OscConfig+0x334>
 800564e:	e014      	b.n	800567a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005650:	f7fe ff4e 	bl	80044f0 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005656:	e00a      	b.n	800566e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005658:	f7fe ff4a 	bl	80044f0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e0b5      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566e:	4b3e      	ldr	r3, [pc, #248]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1ee      	bne.n	8005658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005680:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005684:	4a38      	ldr	r2, [pc, #224]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800568a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80a1 	beq.w	80057d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005696:	4b34      	ldr	r3, [pc, #208]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d05c      	beq.n	800575c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d141      	bne.n	800572e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056aa:	4b31      	ldr	r3, [pc, #196]	@ (8005770 <HAL_RCC_OscConfig+0x478>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b0:	f7fe ff1e 	bl	80044f0 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b8:	f7fe ff1a 	bl	80044f0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e087      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ca:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	3b01      	subs	r3, #1
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	491b      	ldr	r1, [pc, #108]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCC_OscConfig+0x478>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005706:	f7fe fef3 	bl	80044f0 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570e:	f7fe feef 	bl	80044f0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e05c      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x416>
 800572c:	e054      	b.n	80057d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <HAL_RCC_OscConfig+0x478>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fe fedc 	bl	80044f0 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fe fed8 	bl	80044f0 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e045      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574e:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <HAL_RCC_OscConfig+0x470>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x444>
 800575a:	e03d      	b.n	80057d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e038      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
 8005768:	40023800 	.word	0x40023800
 800576c:	40007000 	.word	0x40007000
 8005770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005774:	4b1b      	ldr	r3, [pc, #108]	@ (80057e4 <HAL_RCC_OscConfig+0x4ec>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d028      	beq.n	80057d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d121      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d11a      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d111      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	3b01      	subs	r3, #1
 80057be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d107      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800

080057e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0cc      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057fc:	4b68      	ldr	r3, [pc, #416]	@ (80059a0 <HAL_RCC_ClockConfig+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d90c      	bls.n	8005824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b65      	ldr	r3, [pc, #404]	@ (80059a0 <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b63      	ldr	r3, [pc, #396]	@ (80059a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0b8      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800583c:	4b59      	ldr	r3, [pc, #356]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a58      	ldr	r2, [pc, #352]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005854:	4b53      	ldr	r3, [pc, #332]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4a52      	ldr	r2, [pc, #328]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800585e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005860:	4b50      	ldr	r3, [pc, #320]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	494d      	ldr	r1, [pc, #308]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d044      	beq.n	8005908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005886:	4b47      	ldr	r3, [pc, #284]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d119      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07f      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d003      	beq.n	80058a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d107      	bne.n	80058b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a6:	4b3f      	ldr	r3, [pc, #252]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e06f      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b6:	4b3b      	ldr	r3, [pc, #236]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e067      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058c6:	4b37      	ldr	r3, [pc, #220]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f023 0203 	bic.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4934      	ldr	r1, [pc, #208]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058d8:	f7fe fe0a 	bl	80044f0 <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058de:	e00a      	b.n	80058f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e0:	f7fe fe06 	bl	80044f0 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e04f      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f6:	4b2b      	ldr	r3, [pc, #172]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 020c 	and.w	r2, r3, #12
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	429a      	cmp	r2, r3
 8005906:	d1eb      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005908:	4b25      	ldr	r3, [pc, #148]	@ (80059a0 <HAL_RCC_ClockConfig+0x1b8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d20c      	bcs.n	8005930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b22      	ldr	r3, [pc, #136]	@ (80059a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b20      	ldr	r3, [pc, #128]	@ (80059a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e032      	b.n	8005996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800593c:	4b19      	ldr	r3, [pc, #100]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4916      	ldr	r1, [pc, #88]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	4313      	orrs	r3, r2
 800594c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d009      	beq.n	800596e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800595a:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	490e      	ldr	r1, [pc, #56]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	4313      	orrs	r3, r2
 800596c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800596e:	f000 f821 	bl	80059b4 <HAL_RCC_GetSysClockFreq>
 8005972:	4602      	mov	r2, r0
 8005974:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	490a      	ldr	r1, [pc, #40]	@ (80059a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005980:	5ccb      	ldrb	r3, [r1, r3]
 8005982:	fa22 f303 	lsr.w	r3, r2, r3
 8005986:	4a09      	ldr	r2, [pc, #36]	@ (80059ac <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800598a:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <HAL_RCC_ClockConfig+0x1c8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fd6a 	bl	8004468 <HAL_InitTick>

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40023c00 	.word	0x40023c00
 80059a4:	40023800 	.word	0x40023800
 80059a8:	08008658 	.word	0x08008658
 80059ac:	20000010 	.word	0x20000010
 80059b0:	20000014 	.word	0x20000014

080059b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b8:	b094      	sub	sp, #80	@ 0x50
 80059ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059cc:	4b79      	ldr	r3, [pc, #484]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 030c 	and.w	r3, r3, #12
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d00d      	beq.n	80059f4 <HAL_RCC_GetSysClockFreq+0x40>
 80059d8:	2b08      	cmp	r3, #8
 80059da:	f200 80e1 	bhi.w	8005ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_RCC_GetSysClockFreq+0x34>
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d003      	beq.n	80059ee <HAL_RCC_GetSysClockFreq+0x3a>
 80059e6:	e0db      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059e8:	4b73      	ldr	r3, [pc, #460]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059ec:	e0db      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ee:	4b73      	ldr	r3, [pc, #460]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80059f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059f2:	e0d8      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059f4:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059fe:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d063      	beq.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	099b      	lsrs	r3, r3, #6
 8005a10:	2200      	movs	r2, #0
 8005a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1e:	2300      	movs	r3, #0
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	f04f 0000 	mov.w	r0, #0
 8005a2e:	f04f 0100 	mov.w	r1, #0
 8005a32:	0159      	lsls	r1, r3, #5
 8005a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a38:	0150      	lsls	r0, r2, #5
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4621      	mov	r1, r4
 8005a40:	1a51      	subs	r1, r2, r1
 8005a42:	6139      	str	r1, [r7, #16]
 8005a44:	4629      	mov	r1, r5
 8005a46:	eb63 0301 	sbc.w	r3, r3, r1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a58:	4659      	mov	r1, fp
 8005a5a:	018b      	lsls	r3, r1, #6
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a62:	4651      	mov	r1, sl
 8005a64:	018a      	lsls	r2, r1, #6
 8005a66:	4651      	mov	r1, sl
 8005a68:	ebb2 0801 	subs.w	r8, r2, r1
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a86:	4690      	mov	r8, r2
 8005a88:	4699      	mov	r9, r3
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	eb18 0303 	adds.w	r3, r8, r3
 8005a90:	60bb      	str	r3, [r7, #8]
 8005a92:	462b      	mov	r3, r5
 8005a94:	eb49 0303 	adc.w	r3, r9, r3
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	024b      	lsls	r3, r1, #9
 8005aaa:	4621      	mov	r1, r4
 8005aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	024a      	lsls	r2, r1, #9
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aba:	2200      	movs	r2, #0
 8005abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ac4:	f7fa fbe4 	bl	8000290 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4613      	mov	r3, r2
 8005ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad0:	e058      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad2:	4b38      	ldr	r3, [pc, #224]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	2200      	movs	r2, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	4611      	mov	r1, r2
 8005ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	f04f 0000 	mov.w	r0, #0
 8005af4:	f04f 0100 	mov.w	r1, #0
 8005af8:	0159      	lsls	r1, r3, #5
 8005afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005afe:	0150      	lsls	r0, r2, #5
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4641      	mov	r1, r8
 8005b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b24:	ebb2 040a 	subs.w	r4, r2, sl
 8005b28:	eb63 050b 	sbc.w	r5, r3, fp
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	00eb      	lsls	r3, r5, #3
 8005b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3a:	00e2      	lsls	r2, r4, #3
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	461d      	mov	r5, r3
 8005b40:	4643      	mov	r3, r8
 8005b42:	18e3      	adds	r3, r4, r3
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	464b      	mov	r3, r9
 8005b48:	eb45 0303 	adc.w	r3, r5, r3
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	028b      	lsls	r3, r1, #10
 8005b5e:	4621      	mov	r1, r4
 8005b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b64:	4621      	mov	r1, r4
 8005b66:	028a      	lsls	r2, r1, #10
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	61fa      	str	r2, [r7, #28]
 8005b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b78:	f7fa fb8a 	bl	8000290 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4613      	mov	r3, r2
 8005b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b84:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba0:	4b05      	ldr	r3, [pc, #20]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3750      	adds	r7, #80	@ 0x50
 8005bac:	46bd      	mov	sp, r7
 8005bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	00f42400 	.word	0x00f42400
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d075      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bf4:	4b91      	ldr	r3, [pc, #580]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bfa:	f7fe fc79 	bl	80044f0 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c02:	f7fe fc75 	bl	80044f0 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e189      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c14:	4b8a      	ldr	r3, [pc, #552]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f0      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	019a      	lsls	r2, r3, #6
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	071b      	lsls	r3, r3, #28
 8005c38:	4981      	ldr	r1, [pc, #516]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01f      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c52:	0f1b      	lsrs	r3, r3, #28
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	019a      	lsls	r2, r3, #6
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	061b      	lsls	r3, r3, #24
 8005c66:	431a      	orrs	r2, r3
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	071b      	lsls	r3, r3, #28
 8005c6c:	4974      	ldr	r1, [pc, #464]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c74:	4b72      	ldr	r3, [pc, #456]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c7a:	f023 021f 	bic.w	r2, r3, #31
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	496e      	ldr	r1, [pc, #440]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	019a      	lsls	r2, r3, #6
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	071b      	lsls	r3, r3, #28
 8005cac:	4964      	ldr	r1, [pc, #400]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cb4:	4b61      	ldr	r3, [pc, #388]	@ (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cba:	f7fe fc19 	bl	80044f0 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cc2:	f7fe fc15 	bl	80044f0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e129      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d079      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cf8:	4b52      	ldr	r3, [pc, #328]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cfe:	f7fe fbf7 	bl	80044f0 <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d04:	e008      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d06:	f7fe fbf3 	bl	80044f0 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e107      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d18:	4b49      	ldr	r3, [pc, #292]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d24:	d0ef      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d32:	4b43      	ldr	r3, [pc, #268]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d38:	0f1b      	lsrs	r3, r3, #28
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	019a      	lsls	r2, r3, #6
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	061b      	lsls	r3, r3, #24
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	493b      	ldr	r1, [pc, #236]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d5a:	4b39      	ldr	r3, [pc, #228]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d60:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	4934      	ldr	r1, [pc, #208]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d80:	4b2f      	ldr	r3, [pc, #188]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d86:	0e1b      	lsrs	r3, r3, #24
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	019a      	lsls	r2, r3, #6
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	061b      	lsls	r3, r3, #24
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	071b      	lsls	r3, r3, #28
 8005da0:	4927      	ldr	r1, [pc, #156]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005da8:	4b25      	ldr	r3, [pc, #148]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	4922      	ldr	r1, [pc, #136]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dbe:	4b21      	ldr	r3, [pc, #132]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc4:	f7fe fb94 	bl	80044f0 <HAL_GetTick>
 8005dc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dcc:	f7fe fb90 	bl	80044f0 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e0a4      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dde:	4b18      	ldr	r3, [pc, #96]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dea:	d1ef      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 808b 	beq.w	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	4a0f      	ldr	r2, [pc, #60]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e22:	f7fe fb65 	bl	80044f0 <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e28:	e010      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fe fb61 	bl	80044f0 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d909      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e075      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005e3c:	42470068 	.word	0x42470068
 8005e40:	40023800 	.word	0x40023800
 8005e44:	42470070 	.word	0x42470070
 8005e48:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005e4c:	4b38      	ldr	r3, [pc, #224]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0e8      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e58:	4b36      	ldr	r3, [pc, #216]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e60:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d02f      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d028      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e76:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e80:	4b2d      	ldr	r3, [pc, #180]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e86:	4b2c      	ldr	r3, [pc, #176]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e8c:	4a29      	ldr	r2, [pc, #164]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e92:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d114      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fe fb27 	bl	80044f0 <HAL_GetTick>
 8005ea2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea4:	e00a      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fe fb23 	bl	80044f0 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e035      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0ee      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ed6:	4b17      	ldr	r3, [pc, #92]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	4912      	ldr	r1, [pc, #72]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	608b      	str	r3, [r1, #8]
 8005ef0:	e005      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ef8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005efc:	6093      	str	r3, [r2, #8]
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0a:	490a      	ldr	r1, [pc, #40]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005f22:	4b06      	ldr	r3, [pc, #24]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005f24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40007000 	.word	0x40007000
 8005f34:	40023800 	.word	0x40023800
 8005f38:	42470e40 	.word	0x42470e40
 8005f3c:	424711e0 	.word	0x424711e0

08005f40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e01c      	b.n	8005f8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	795b      	ldrb	r3, [r3, #5]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fe f8c0 	bl	80040e8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0204 	orr.w	r2, r2, #4
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	791b      	ldrb	r3, [r3, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_RNG_GenerateRandomNumber+0x1a>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e044      	b.n	8006038 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	795b      	ldrb	r3, [r3, #5]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d133      	bne.n	8006026 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fc4:	f7fe fa94 	bl	80044f0 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005fca:	e018      	b.n	8005ffe <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005fcc:	f7fe fa90 	bl	80044f0 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d911      	bls.n	8005ffe <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e01c      	b.n	8006038 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d1df      	bne.n	8005fcc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	715a      	strb	r2, [r3, #5]
 8006024:	e004      	b.n	8006030 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2204      	movs	r2, #4
 800602a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	711a      	strb	r2, [r3, #4]

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e07b      	b.n	800614a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006062:	d009      	beq.n	8006078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	61da      	str	r2, [r3, #28]
 800606a:	e005      	b.n	8006078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fe f84a 	bl	800412c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	f003 0104 	and.w	r1, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611e:	f003 0210 	and.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006138:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e01a      	b.n	800619a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800617a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fe f81d 	bl	80041bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b2:	f7fe f99d 	bl	80044f0 <HAL_GetTick>
 80061b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
 80061ca:	e12a      	b.n	8006422 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <HAL_SPI_Transmit+0x36>
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e122      	b.n	8006422 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_SPI_Transmit+0x48>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e11b      	b.n	8006422 <HAL_SPI_Transmit+0x280>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2203      	movs	r2, #3
 80061f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006238:	d10f      	bne.n	800625a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d007      	beq.n	8006278 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006280:	d152      	bne.n	8006328 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_Transmit+0xee>
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d145      	bne.n	800631c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062b4:	e032      	b.n	800631c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d112      	bne.n	80062ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c8:	881a      	ldrh	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	1c9a      	adds	r2, r3, #2
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062e8:	e018      	b.n	800631c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ea:	f7fe f901 	bl	80044f0 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d803      	bhi.n	8006302 <HAL_SPI_Transmit+0x160>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d102      	bne.n	8006308 <HAL_SPI_Transmit+0x166>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e082      	b.n	8006422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1c7      	bne.n	80062b6 <HAL_SPI_Transmit+0x114>
 8006326:	e053      	b.n	80063d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Transmit+0x194>
 8006330:	8b7b      	ldrh	r3, [r7, #26]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d147      	bne.n	80063c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800635c:	e033      	b.n	80063c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d113      	bne.n	8006394 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006392:	e018      	b.n	80063c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006394:	f7fe f8ac 	bl	80044f0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d803      	bhi.n	80063ac <HAL_SPI_Transmit+0x20a>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x210>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e02d      	b.n	8006422 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1c6      	bne.n	800635e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f8bf 	bl	8006558 <SPI_EndRxTxTransaction>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006420:	2300      	movs	r3, #0
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006438:	b2db      	uxtb	r3, r3
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006458:	f7fe f84a 	bl	80044f0 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	4413      	add	r3, r2
 8006466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006468:	f7fe f842 	bl	80044f0 <HAL_GetTick>
 800646c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800646e:	4b39      	ldr	r3, [pc, #228]	@ (8006554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	015b      	lsls	r3, r3, #5
 8006474:	0d1b      	lsrs	r3, r3, #20
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	fb02 f303 	mul.w	r3, r2, r3
 800647c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800647e:	e054      	b.n	800652a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d050      	beq.n	800652a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006488:	f7fe f832 	bl	80044f0 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	429a      	cmp	r2, r3
 8006496:	d902      	bls.n	800649e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d13d      	bne.n	800651a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b6:	d111      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c0:	d004      	beq.n	80064cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ca:	d107      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e4:	d10f      	bne.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e017      	b.n	800654a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3b01      	subs	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4013      	ands	r3, r2
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	429a      	cmp	r2, r3
 8006538:	bf0c      	ite	eq
 800653a:	2301      	moveq	r3, #1
 800653c:	2300      	movne	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	429a      	cmp	r2, r3
 8006546:	d19b      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000010 	.word	0x20000010

08006558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2201      	movs	r2, #1
 800656c:	2102      	movs	r1, #2
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f7ff ff6a 	bl	8006448 <SPI_WaitFlagStateUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d007      	beq.n	800658a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657e:	f043 0220 	orr.w	r2, r3, #32
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e032      	b.n	80065f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800658a:	4b1b      	ldr	r3, [pc, #108]	@ (80065f8 <SPI_EndRxTxTransaction+0xa0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1b      	ldr	r2, [pc, #108]	@ (80065fc <SPI_EndRxTxTransaction+0xa4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	0d5b      	lsrs	r3, r3, #21
 8006596:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065a8:	d112      	bne.n	80065d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	2180      	movs	r1, #128	@ 0x80
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff ff47 	bl	8006448 <SPI_WaitFlagStateUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d016      	beq.n	80065ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e00f      	b.n	80065f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	3b01      	subs	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e6:	2b80      	cmp	r3, #128	@ 0x80
 80065e8:	d0f2      	beq.n	80065d0 <SPI_EndRxTxTransaction+0x78>
 80065ea:	e000      	b.n	80065ee <SPI_EndRxTxTransaction+0x96>
        break;
 80065ec:	bf00      	nop
  }

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000010 	.word	0x20000010
 80065fc:	165e9f81 	.word	0x165e9f81

08006600 <std>:
 8006600:	2300      	movs	r3, #0
 8006602:	b510      	push	{r4, lr}
 8006604:	4604      	mov	r4, r0
 8006606:	e9c0 3300 	strd	r3, r3, [r0]
 800660a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800660e:	6083      	str	r3, [r0, #8]
 8006610:	8181      	strh	r1, [r0, #12]
 8006612:	6643      	str	r3, [r0, #100]	@ 0x64
 8006614:	81c2      	strh	r2, [r0, #14]
 8006616:	6183      	str	r3, [r0, #24]
 8006618:	4619      	mov	r1, r3
 800661a:	2208      	movs	r2, #8
 800661c:	305c      	adds	r0, #92	@ 0x5c
 800661e:	f000 f906 	bl	800682e <memset>
 8006622:	4b0d      	ldr	r3, [pc, #52]	@ (8006658 <std+0x58>)
 8006624:	6263      	str	r3, [r4, #36]	@ 0x24
 8006626:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <std+0x5c>)
 8006628:	62a3      	str	r3, [r4, #40]	@ 0x28
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <std+0x60>)
 800662c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <std+0x64>)
 8006630:	6323      	str	r3, [r4, #48]	@ 0x30
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <std+0x68>)
 8006634:	6224      	str	r4, [r4, #32]
 8006636:	429c      	cmp	r4, r3
 8006638:	d006      	beq.n	8006648 <std+0x48>
 800663a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800663e:	4294      	cmp	r4, r2
 8006640:	d002      	beq.n	8006648 <std+0x48>
 8006642:	33d0      	adds	r3, #208	@ 0xd0
 8006644:	429c      	cmp	r4, r3
 8006646:	d105      	bne.n	8006654 <std+0x54>
 8006648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006650:	f000 b966 	b.w	8006920 <__retarget_lock_init_recursive>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	bf00      	nop
 8006658:	080067a9 	.word	0x080067a9
 800665c:	080067cb 	.word	0x080067cb
 8006660:	08006803 	.word	0x08006803
 8006664:	08006827 	.word	0x08006827
 8006668:	20025da4 	.word	0x20025da4

0800666c <stdio_exit_handler>:
 800666c:	4a02      	ldr	r2, [pc, #8]	@ (8006678 <stdio_exit_handler+0xc>)
 800666e:	4903      	ldr	r1, [pc, #12]	@ (800667c <stdio_exit_handler+0x10>)
 8006670:	4803      	ldr	r0, [pc, #12]	@ (8006680 <stdio_exit_handler+0x14>)
 8006672:	f000 b869 	b.w	8006748 <_fwalk_sglue>
 8006676:	bf00      	nop
 8006678:	2000001c 	.word	0x2000001c
 800667c:	080071c1 	.word	0x080071c1
 8006680:	2000002c 	.word	0x2000002c

08006684 <cleanup_stdio>:
 8006684:	6841      	ldr	r1, [r0, #4]
 8006686:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <cleanup_stdio+0x34>)
 8006688:	4299      	cmp	r1, r3
 800668a:	b510      	push	{r4, lr}
 800668c:	4604      	mov	r4, r0
 800668e:	d001      	beq.n	8006694 <cleanup_stdio+0x10>
 8006690:	f000 fd96 	bl	80071c0 <_fflush_r>
 8006694:	68a1      	ldr	r1, [r4, #8]
 8006696:	4b09      	ldr	r3, [pc, #36]	@ (80066bc <cleanup_stdio+0x38>)
 8006698:	4299      	cmp	r1, r3
 800669a:	d002      	beq.n	80066a2 <cleanup_stdio+0x1e>
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fd8f 	bl	80071c0 <_fflush_r>
 80066a2:	68e1      	ldr	r1, [r4, #12]
 80066a4:	4b06      	ldr	r3, [pc, #24]	@ (80066c0 <cleanup_stdio+0x3c>)
 80066a6:	4299      	cmp	r1, r3
 80066a8:	d004      	beq.n	80066b4 <cleanup_stdio+0x30>
 80066aa:	4620      	mov	r0, r4
 80066ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b0:	f000 bd86 	b.w	80071c0 <_fflush_r>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	bf00      	nop
 80066b8:	20025da4 	.word	0x20025da4
 80066bc:	20025e0c 	.word	0x20025e0c
 80066c0:	20025e74 	.word	0x20025e74

080066c4 <global_stdio_init.part.0>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <global_stdio_init.part.0+0x30>)
 80066c8:	4c0b      	ldr	r4, [pc, #44]	@ (80066f8 <global_stdio_init.part.0+0x34>)
 80066ca:	4a0c      	ldr	r2, [pc, #48]	@ (80066fc <global_stdio_init.part.0+0x38>)
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	4620      	mov	r0, r4
 80066d0:	2200      	movs	r2, #0
 80066d2:	2104      	movs	r1, #4
 80066d4:	f7ff ff94 	bl	8006600 <std>
 80066d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066dc:	2201      	movs	r2, #1
 80066de:	2109      	movs	r1, #9
 80066e0:	f7ff ff8e 	bl	8006600 <std>
 80066e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066e8:	2202      	movs	r2, #2
 80066ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ee:	2112      	movs	r1, #18
 80066f0:	f7ff bf86 	b.w	8006600 <std>
 80066f4:	20025edc 	.word	0x20025edc
 80066f8:	20025da4 	.word	0x20025da4
 80066fc:	0800666d 	.word	0x0800666d

08006700 <__sfp_lock_acquire>:
 8006700:	4801      	ldr	r0, [pc, #4]	@ (8006708 <__sfp_lock_acquire+0x8>)
 8006702:	f000 b90e 	b.w	8006922 <__retarget_lock_acquire_recursive>
 8006706:	bf00      	nop
 8006708:	20025ee5 	.word	0x20025ee5

0800670c <__sfp_lock_release>:
 800670c:	4801      	ldr	r0, [pc, #4]	@ (8006714 <__sfp_lock_release+0x8>)
 800670e:	f000 b909 	b.w	8006924 <__retarget_lock_release_recursive>
 8006712:	bf00      	nop
 8006714:	20025ee5 	.word	0x20025ee5

08006718 <__sinit>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4604      	mov	r4, r0
 800671c:	f7ff fff0 	bl	8006700 <__sfp_lock_acquire>
 8006720:	6a23      	ldr	r3, [r4, #32]
 8006722:	b11b      	cbz	r3, 800672c <__sinit+0x14>
 8006724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006728:	f7ff bff0 	b.w	800670c <__sfp_lock_release>
 800672c:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <__sinit+0x28>)
 800672e:	6223      	str	r3, [r4, #32]
 8006730:	4b04      	ldr	r3, [pc, #16]	@ (8006744 <__sinit+0x2c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f5      	bne.n	8006724 <__sinit+0xc>
 8006738:	f7ff ffc4 	bl	80066c4 <global_stdio_init.part.0>
 800673c:	e7f2      	b.n	8006724 <__sinit+0xc>
 800673e:	bf00      	nop
 8006740:	08006685 	.word	0x08006685
 8006744:	20025edc 	.word	0x20025edc

08006748 <_fwalk_sglue>:
 8006748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800674c:	4607      	mov	r7, r0
 800674e:	4688      	mov	r8, r1
 8006750:	4614      	mov	r4, r2
 8006752:	2600      	movs	r6, #0
 8006754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006758:	f1b9 0901 	subs.w	r9, r9, #1
 800675c:	d505      	bpl.n	800676a <_fwalk_sglue+0x22>
 800675e:	6824      	ldr	r4, [r4, #0]
 8006760:	2c00      	cmp	r4, #0
 8006762:	d1f7      	bne.n	8006754 <_fwalk_sglue+0xc>
 8006764:	4630      	mov	r0, r6
 8006766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676a:	89ab      	ldrh	r3, [r5, #12]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d907      	bls.n	8006780 <_fwalk_sglue+0x38>
 8006770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006774:	3301      	adds	r3, #1
 8006776:	d003      	beq.n	8006780 <_fwalk_sglue+0x38>
 8006778:	4629      	mov	r1, r5
 800677a:	4638      	mov	r0, r7
 800677c:	47c0      	blx	r8
 800677e:	4306      	orrs	r6, r0
 8006780:	3568      	adds	r5, #104	@ 0x68
 8006782:	e7e9      	b.n	8006758 <_fwalk_sglue+0x10>

08006784 <iprintf>:
 8006784:	b40f      	push	{r0, r1, r2, r3}
 8006786:	b507      	push	{r0, r1, r2, lr}
 8006788:	4906      	ldr	r1, [pc, #24]	@ (80067a4 <iprintf+0x20>)
 800678a:	ab04      	add	r3, sp, #16
 800678c:	6808      	ldr	r0, [r1, #0]
 800678e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006792:	6881      	ldr	r1, [r0, #8]
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	f000 f9e9 	bl	8006b6c <_vfiprintf_r>
 800679a:	b003      	add	sp, #12
 800679c:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a0:	b004      	add	sp, #16
 80067a2:	4770      	bx	lr
 80067a4:	20000028 	.word	0x20000028

080067a8 <__sread>:
 80067a8:	b510      	push	{r4, lr}
 80067aa:	460c      	mov	r4, r1
 80067ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b0:	f000 f868 	bl	8006884 <_read_r>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	bfab      	itete	ge
 80067b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ba:	89a3      	ldrhlt	r3, [r4, #12]
 80067bc:	181b      	addge	r3, r3, r0
 80067be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067c2:	bfac      	ite	ge
 80067c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067c6:	81a3      	strhlt	r3, [r4, #12]
 80067c8:	bd10      	pop	{r4, pc}

080067ca <__swrite>:
 80067ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ce:	461f      	mov	r7, r3
 80067d0:	898b      	ldrh	r3, [r1, #12]
 80067d2:	05db      	lsls	r3, r3, #23
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	4616      	mov	r6, r2
 80067da:	d505      	bpl.n	80067e8 <__swrite+0x1e>
 80067dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e0:	2302      	movs	r3, #2
 80067e2:	2200      	movs	r2, #0
 80067e4:	f000 f83c 	bl	8006860 <_lseek_r>
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	4632      	mov	r2, r6
 80067f6:	463b      	mov	r3, r7
 80067f8:	4628      	mov	r0, r5
 80067fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067fe:	f000 b853 	b.w	80068a8 <_write_r>

08006802 <__sseek>:
 8006802:	b510      	push	{r4, lr}
 8006804:	460c      	mov	r4, r1
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 f829 	bl	8006860 <_lseek_r>
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	bf15      	itete	ne
 8006814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800681a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800681e:	81a3      	strheq	r3, [r4, #12]
 8006820:	bf18      	it	ne
 8006822:	81a3      	strhne	r3, [r4, #12]
 8006824:	bd10      	pop	{r4, pc}

08006826 <__sclose>:
 8006826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682a:	f000 b809 	b.w	8006840 <_close_r>

0800682e <memset>:
 800682e:	4402      	add	r2, r0
 8006830:	4603      	mov	r3, r0
 8006832:	4293      	cmp	r3, r2
 8006834:	d100      	bne.n	8006838 <memset+0xa>
 8006836:	4770      	bx	lr
 8006838:	f803 1b01 	strb.w	r1, [r3], #1
 800683c:	e7f9      	b.n	8006832 <memset+0x4>
	...

08006840 <_close_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d06      	ldr	r5, [pc, #24]	@ (800685c <_close_r+0x1c>)
 8006844:	2300      	movs	r3, #0
 8006846:	4604      	mov	r4, r0
 8006848:	4608      	mov	r0, r1
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	f7fd fd43 	bl	80042d6 <_close>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_close_r+0x1a>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_close_r+0x1a>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	20025ee0 	.word	0x20025ee0

08006860 <_lseek_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d07      	ldr	r5, [pc, #28]	@ (8006880 <_lseek_r+0x20>)
 8006864:	4604      	mov	r4, r0
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	2200      	movs	r2, #0
 800686c:	602a      	str	r2, [r5, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f7fd fd58 	bl	8004324 <_lseek>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_lseek_r+0x1e>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_lseek_r+0x1e>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20025ee0 	.word	0x20025ee0

08006884 <_read_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	@ (80068a4 <_read_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fd fce6 	bl	8004264 <_read>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_read_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_read_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	20025ee0 	.word	0x20025ee0

080068a8 <_write_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	@ (80068c8 <_write_r+0x20>)
 80068ac:	4604      	mov	r4, r0
 80068ae:	4608      	mov	r0, r1
 80068b0:	4611      	mov	r1, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	602a      	str	r2, [r5, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f7fd fcf1 	bl	800429e <_write>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_write_r+0x1e>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_write_r+0x1e>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20025ee0 	.word	0x20025ee0

080068cc <__errno>:
 80068cc:	4b01      	ldr	r3, [pc, #4]	@ (80068d4 <__errno+0x8>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000028 	.word	0x20000028

080068d8 <__libc_init_array>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4d0d      	ldr	r5, [pc, #52]	@ (8006910 <__libc_init_array+0x38>)
 80068dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006914 <__libc_init_array+0x3c>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	2600      	movs	r6, #0
 80068e4:	42a6      	cmp	r6, r4
 80068e6:	d109      	bne.n	80068fc <__libc_init_array+0x24>
 80068e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006918 <__libc_init_array+0x40>)
 80068ea:	4c0c      	ldr	r4, [pc, #48]	@ (800691c <__libc_init_array+0x44>)
 80068ec:	f000 fdb8 	bl	8007460 <_init>
 80068f0:	1b64      	subs	r4, r4, r5
 80068f2:	10a4      	asrs	r4, r4, #2
 80068f4:	2600      	movs	r6, #0
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	d105      	bne.n	8006906 <__libc_init_array+0x2e>
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006900:	4798      	blx	r3
 8006902:	3601      	adds	r6, #1
 8006904:	e7ee      	b.n	80068e4 <__libc_init_array+0xc>
 8006906:	f855 3b04 	ldr.w	r3, [r5], #4
 800690a:	4798      	blx	r3
 800690c:	3601      	adds	r6, #1
 800690e:	e7f2      	b.n	80068f6 <__libc_init_array+0x1e>
 8006910:	080086a4 	.word	0x080086a4
 8006914:	080086a4 	.word	0x080086a4
 8006918:	080086a4 	.word	0x080086a4
 800691c:	080086a8 	.word	0x080086a8

08006920 <__retarget_lock_init_recursive>:
 8006920:	4770      	bx	lr

08006922 <__retarget_lock_acquire_recursive>:
 8006922:	4770      	bx	lr

08006924 <__retarget_lock_release_recursive>:
 8006924:	4770      	bx	lr
	...

08006928 <_free_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4605      	mov	r5, r0
 800692c:	2900      	cmp	r1, #0
 800692e:	d041      	beq.n	80069b4 <_free_r+0x8c>
 8006930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006934:	1f0c      	subs	r4, r1, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	bfb8      	it	lt
 800693a:	18e4      	addlt	r4, r4, r3
 800693c:	f000 f8e0 	bl	8006b00 <__malloc_lock>
 8006940:	4a1d      	ldr	r2, [pc, #116]	@ (80069b8 <_free_r+0x90>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	b933      	cbnz	r3, 8006954 <_free_r+0x2c>
 8006946:	6063      	str	r3, [r4, #4]
 8006948:	6014      	str	r4, [r2, #0]
 800694a:	4628      	mov	r0, r5
 800694c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006950:	f000 b8dc 	b.w	8006b0c <__malloc_unlock>
 8006954:	42a3      	cmp	r3, r4
 8006956:	d908      	bls.n	800696a <_free_r+0x42>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	1821      	adds	r1, r4, r0
 800695c:	428b      	cmp	r3, r1
 800695e:	bf01      	itttt	eq
 8006960:	6819      	ldreq	r1, [r3, #0]
 8006962:	685b      	ldreq	r3, [r3, #4]
 8006964:	1809      	addeq	r1, r1, r0
 8006966:	6021      	streq	r1, [r4, #0]
 8006968:	e7ed      	b.n	8006946 <_free_r+0x1e>
 800696a:	461a      	mov	r2, r3
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	b10b      	cbz	r3, 8006974 <_free_r+0x4c>
 8006970:	42a3      	cmp	r3, r4
 8006972:	d9fa      	bls.n	800696a <_free_r+0x42>
 8006974:	6811      	ldr	r1, [r2, #0]
 8006976:	1850      	adds	r0, r2, r1
 8006978:	42a0      	cmp	r0, r4
 800697a:	d10b      	bne.n	8006994 <_free_r+0x6c>
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	4401      	add	r1, r0
 8006980:	1850      	adds	r0, r2, r1
 8006982:	4283      	cmp	r3, r0
 8006984:	6011      	str	r1, [r2, #0]
 8006986:	d1e0      	bne.n	800694a <_free_r+0x22>
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	6053      	str	r3, [r2, #4]
 800698e:	4408      	add	r0, r1
 8006990:	6010      	str	r0, [r2, #0]
 8006992:	e7da      	b.n	800694a <_free_r+0x22>
 8006994:	d902      	bls.n	800699c <_free_r+0x74>
 8006996:	230c      	movs	r3, #12
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	e7d6      	b.n	800694a <_free_r+0x22>
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	1821      	adds	r1, r4, r0
 80069a0:	428b      	cmp	r3, r1
 80069a2:	bf04      	itt	eq
 80069a4:	6819      	ldreq	r1, [r3, #0]
 80069a6:	685b      	ldreq	r3, [r3, #4]
 80069a8:	6063      	str	r3, [r4, #4]
 80069aa:	bf04      	itt	eq
 80069ac:	1809      	addeq	r1, r1, r0
 80069ae:	6021      	streq	r1, [r4, #0]
 80069b0:	6054      	str	r4, [r2, #4]
 80069b2:	e7ca      	b.n	800694a <_free_r+0x22>
 80069b4:	bd38      	pop	{r3, r4, r5, pc}
 80069b6:	bf00      	nop
 80069b8:	20025eec 	.word	0x20025eec

080069bc <sbrk_aligned>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	4e0f      	ldr	r6, [pc, #60]	@ (80069fc <sbrk_aligned+0x40>)
 80069c0:	460c      	mov	r4, r1
 80069c2:	6831      	ldr	r1, [r6, #0]
 80069c4:	4605      	mov	r5, r0
 80069c6:	b911      	cbnz	r1, 80069ce <sbrk_aligned+0x12>
 80069c8:	f000 fcb6 	bl	8007338 <_sbrk_r>
 80069cc:	6030      	str	r0, [r6, #0]
 80069ce:	4621      	mov	r1, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	f000 fcb1 	bl	8007338 <_sbrk_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	d103      	bne.n	80069e2 <sbrk_aligned+0x26>
 80069da:	f04f 34ff 	mov.w	r4, #4294967295
 80069de:	4620      	mov	r0, r4
 80069e0:	bd70      	pop	{r4, r5, r6, pc}
 80069e2:	1cc4      	adds	r4, r0, #3
 80069e4:	f024 0403 	bic.w	r4, r4, #3
 80069e8:	42a0      	cmp	r0, r4
 80069ea:	d0f8      	beq.n	80069de <sbrk_aligned+0x22>
 80069ec:	1a21      	subs	r1, r4, r0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fca2 	bl	8007338 <_sbrk_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d1f2      	bne.n	80069de <sbrk_aligned+0x22>
 80069f8:	e7ef      	b.n	80069da <sbrk_aligned+0x1e>
 80069fa:	bf00      	nop
 80069fc:	20025ee8 	.word	0x20025ee8

08006a00 <_malloc_r>:
 8006a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a04:	1ccd      	adds	r5, r1, #3
 8006a06:	f025 0503 	bic.w	r5, r5, #3
 8006a0a:	3508      	adds	r5, #8
 8006a0c:	2d0c      	cmp	r5, #12
 8006a0e:	bf38      	it	cc
 8006a10:	250c      	movcc	r5, #12
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	4606      	mov	r6, r0
 8006a16:	db01      	blt.n	8006a1c <_malloc_r+0x1c>
 8006a18:	42a9      	cmp	r1, r5
 8006a1a:	d904      	bls.n	8006a26 <_malloc_r+0x26>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	2000      	movs	r0, #0
 8006a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006afc <_malloc_r+0xfc>
 8006a2a:	f000 f869 	bl	8006b00 <__malloc_lock>
 8006a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a32:	461c      	mov	r4, r3
 8006a34:	bb44      	cbnz	r4, 8006a88 <_malloc_r+0x88>
 8006a36:	4629      	mov	r1, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff ffbf 	bl	80069bc <sbrk_aligned>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	4604      	mov	r4, r0
 8006a42:	d158      	bne.n	8006af6 <_malloc_r+0xf6>
 8006a44:	f8d8 4000 	ldr.w	r4, [r8]
 8006a48:	4627      	mov	r7, r4
 8006a4a:	2f00      	cmp	r7, #0
 8006a4c:	d143      	bne.n	8006ad6 <_malloc_r+0xd6>
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	d04b      	beq.n	8006aea <_malloc_r+0xea>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	4639      	mov	r1, r7
 8006a56:	4630      	mov	r0, r6
 8006a58:	eb04 0903 	add.w	r9, r4, r3
 8006a5c:	f000 fc6c 	bl	8007338 <_sbrk_r>
 8006a60:	4581      	cmp	r9, r0
 8006a62:	d142      	bne.n	8006aea <_malloc_r+0xea>
 8006a64:	6821      	ldr	r1, [r4, #0]
 8006a66:	1a6d      	subs	r5, r5, r1
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7ff ffa6 	bl	80069bc <sbrk_aligned>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d03a      	beq.n	8006aea <_malloc_r+0xea>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	442b      	add	r3, r5
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	bb62      	cbnz	r2, 8006adc <_malloc_r+0xdc>
 8006a82:	f8c8 7000 	str.w	r7, [r8]
 8006a86:	e00f      	b.n	8006aa8 <_malloc_r+0xa8>
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	1b52      	subs	r2, r2, r5
 8006a8c:	d420      	bmi.n	8006ad0 <_malloc_r+0xd0>
 8006a8e:	2a0b      	cmp	r2, #11
 8006a90:	d917      	bls.n	8006ac2 <_malloc_r+0xc2>
 8006a92:	1961      	adds	r1, r4, r5
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	6025      	str	r5, [r4, #0]
 8006a98:	bf18      	it	ne
 8006a9a:	6059      	strne	r1, [r3, #4]
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	bf08      	it	eq
 8006aa0:	f8c8 1000 	streq.w	r1, [r8]
 8006aa4:	5162      	str	r2, [r4, r5]
 8006aa6:	604b      	str	r3, [r1, #4]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f82f 	bl	8006b0c <__malloc_unlock>
 8006aae:	f104 000b 	add.w	r0, r4, #11
 8006ab2:	1d23      	adds	r3, r4, #4
 8006ab4:	f020 0007 	bic.w	r0, r0, #7
 8006ab8:	1ac2      	subs	r2, r0, r3
 8006aba:	bf1c      	itt	ne
 8006abc:	1a1b      	subne	r3, r3, r0
 8006abe:	50a3      	strne	r3, [r4, r2]
 8006ac0:	e7af      	b.n	8006a22 <_malloc_r+0x22>
 8006ac2:	6862      	ldr	r2, [r4, #4]
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	bf0c      	ite	eq
 8006ac8:	f8c8 2000 	streq.w	r2, [r8]
 8006acc:	605a      	strne	r2, [r3, #4]
 8006ace:	e7eb      	b.n	8006aa8 <_malloc_r+0xa8>
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	6864      	ldr	r4, [r4, #4]
 8006ad4:	e7ae      	b.n	8006a34 <_malloc_r+0x34>
 8006ad6:	463c      	mov	r4, r7
 8006ad8:	687f      	ldr	r7, [r7, #4]
 8006ada:	e7b6      	b.n	8006a4a <_malloc_r+0x4a>
 8006adc:	461a      	mov	r2, r3
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d1fb      	bne.n	8006adc <_malloc_r+0xdc>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6053      	str	r3, [r2, #4]
 8006ae8:	e7de      	b.n	8006aa8 <_malloc_r+0xa8>
 8006aea:	230c      	movs	r3, #12
 8006aec:	6033      	str	r3, [r6, #0]
 8006aee:	4630      	mov	r0, r6
 8006af0:	f000 f80c 	bl	8006b0c <__malloc_unlock>
 8006af4:	e794      	b.n	8006a20 <_malloc_r+0x20>
 8006af6:	6005      	str	r5, [r0, #0]
 8006af8:	e7d6      	b.n	8006aa8 <_malloc_r+0xa8>
 8006afa:	bf00      	nop
 8006afc:	20025eec 	.word	0x20025eec

08006b00 <__malloc_lock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	@ (8006b08 <__malloc_lock+0x8>)
 8006b02:	f7ff bf0e 	b.w	8006922 <__retarget_lock_acquire_recursive>
 8006b06:	bf00      	nop
 8006b08:	20025ee4 	.word	0x20025ee4

08006b0c <__malloc_unlock>:
 8006b0c:	4801      	ldr	r0, [pc, #4]	@ (8006b14 <__malloc_unlock+0x8>)
 8006b0e:	f7ff bf09 	b.w	8006924 <__retarget_lock_release_recursive>
 8006b12:	bf00      	nop
 8006b14:	20025ee4 	.word	0x20025ee4

08006b18 <__sfputc_r>:
 8006b18:	6893      	ldr	r3, [r2, #8]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	b410      	push	{r4}
 8006b20:	6093      	str	r3, [r2, #8]
 8006b22:	da08      	bge.n	8006b36 <__sfputc_r+0x1e>
 8006b24:	6994      	ldr	r4, [r2, #24]
 8006b26:	42a3      	cmp	r3, r4
 8006b28:	db01      	blt.n	8006b2e <__sfputc_r+0x16>
 8006b2a:	290a      	cmp	r1, #10
 8006b2c:	d103      	bne.n	8006b36 <__sfputc_r+0x1e>
 8006b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b32:	f000 bb6d 	b.w	8007210 <__swbuf_r>
 8006b36:	6813      	ldr	r3, [r2, #0]
 8006b38:	1c58      	adds	r0, r3, #1
 8006b3a:	6010      	str	r0, [r2, #0]
 8006b3c:	7019      	strb	r1, [r3, #0]
 8006b3e:	4608      	mov	r0, r1
 8006b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <__sfputs_r>:
 8006b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	18d5      	adds	r5, r2, r3
 8006b50:	42ac      	cmp	r4, r5
 8006b52:	d101      	bne.n	8006b58 <__sfputs_r+0x12>
 8006b54:	2000      	movs	r0, #0
 8006b56:	e007      	b.n	8006b68 <__sfputs_r+0x22>
 8006b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5c:	463a      	mov	r2, r7
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff ffda 	bl	8006b18 <__sfputc_r>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d1f3      	bne.n	8006b50 <__sfputs_r+0xa>
 8006b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b6c <_vfiprintf_r>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	460d      	mov	r5, r1
 8006b72:	b09d      	sub	sp, #116	@ 0x74
 8006b74:	4614      	mov	r4, r2
 8006b76:	4698      	mov	r8, r3
 8006b78:	4606      	mov	r6, r0
 8006b7a:	b118      	cbz	r0, 8006b84 <_vfiprintf_r+0x18>
 8006b7c:	6a03      	ldr	r3, [r0, #32]
 8006b7e:	b90b      	cbnz	r3, 8006b84 <_vfiprintf_r+0x18>
 8006b80:	f7ff fdca 	bl	8006718 <__sinit>
 8006b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b86:	07d9      	lsls	r1, r3, #31
 8006b88:	d405      	bmi.n	8006b96 <_vfiprintf_r+0x2a>
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	059a      	lsls	r2, r3, #22
 8006b8e:	d402      	bmi.n	8006b96 <_vfiprintf_r+0x2a>
 8006b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b92:	f7ff fec6 	bl	8006922 <__retarget_lock_acquire_recursive>
 8006b96:	89ab      	ldrh	r3, [r5, #12]
 8006b98:	071b      	lsls	r3, r3, #28
 8006b9a:	d501      	bpl.n	8006ba0 <_vfiprintf_r+0x34>
 8006b9c:	692b      	ldr	r3, [r5, #16]
 8006b9e:	b99b      	cbnz	r3, 8006bc8 <_vfiprintf_r+0x5c>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 fb72 	bl	800728c <__swsetup_r>
 8006ba8:	b170      	cbz	r0, 8006bc8 <_vfiprintf_r+0x5c>
 8006baa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bac:	07dc      	lsls	r4, r3, #31
 8006bae:	d504      	bpl.n	8006bba <_vfiprintf_r+0x4e>
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	b01d      	add	sp, #116	@ 0x74
 8006bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bba:	89ab      	ldrh	r3, [r5, #12]
 8006bbc:	0598      	lsls	r0, r3, #22
 8006bbe:	d4f7      	bmi.n	8006bb0 <_vfiprintf_r+0x44>
 8006bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bc2:	f7ff feaf 	bl	8006924 <__retarget_lock_release_recursive>
 8006bc6:	e7f3      	b.n	8006bb0 <_vfiprintf_r+0x44>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bcc:	2320      	movs	r3, #32
 8006bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bd6:	2330      	movs	r3, #48	@ 0x30
 8006bd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d88 <_vfiprintf_r+0x21c>
 8006bdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006be0:	f04f 0901 	mov.w	r9, #1
 8006be4:	4623      	mov	r3, r4
 8006be6:	469a      	mov	sl, r3
 8006be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bec:	b10a      	cbz	r2, 8006bf2 <_vfiprintf_r+0x86>
 8006bee:	2a25      	cmp	r2, #37	@ 0x25
 8006bf0:	d1f9      	bne.n	8006be6 <_vfiprintf_r+0x7a>
 8006bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8006bf6:	d00b      	beq.n	8006c10 <_vfiprintf_r+0xa4>
 8006bf8:	465b      	mov	r3, fp
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7ff ffa1 	bl	8006b46 <__sfputs_r>
 8006c04:	3001      	adds	r0, #1
 8006c06:	f000 80a7 	beq.w	8006d58 <_vfiprintf_r+0x1ec>
 8006c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c0c:	445a      	add	r2, fp
 8006c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c10:	f89a 3000 	ldrb.w	r3, [sl]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 809f 	beq.w	8006d58 <_vfiprintf_r+0x1ec>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c24:	f10a 0a01 	add.w	sl, sl, #1
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	9307      	str	r3, [sp, #28]
 8006c2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c30:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c32:	4654      	mov	r4, sl
 8006c34:	2205      	movs	r2, #5
 8006c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3a:	4853      	ldr	r0, [pc, #332]	@ (8006d88 <_vfiprintf_r+0x21c>)
 8006c3c:	f7f9 fad8 	bl	80001f0 <memchr>
 8006c40:	9a04      	ldr	r2, [sp, #16]
 8006c42:	b9d8      	cbnz	r0, 8006c7c <_vfiprintf_r+0x110>
 8006c44:	06d1      	lsls	r1, r2, #27
 8006c46:	bf44      	itt	mi
 8006c48:	2320      	movmi	r3, #32
 8006c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c4e:	0713      	lsls	r3, r2, #28
 8006c50:	bf44      	itt	mi
 8006c52:	232b      	movmi	r3, #43	@ 0x2b
 8006c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c58:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c5e:	d015      	beq.n	8006c8c <_vfiprintf_r+0x120>
 8006c60:	9a07      	ldr	r2, [sp, #28]
 8006c62:	4654      	mov	r4, sl
 8006c64:	2000      	movs	r0, #0
 8006c66:	f04f 0c0a 	mov.w	ip, #10
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c70:	3b30      	subs	r3, #48	@ 0x30
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	d94b      	bls.n	8006d0e <_vfiprintf_r+0x1a2>
 8006c76:	b1b0      	cbz	r0, 8006ca6 <_vfiprintf_r+0x13a>
 8006c78:	9207      	str	r2, [sp, #28]
 8006c7a:	e014      	b.n	8006ca6 <_vfiprintf_r+0x13a>
 8006c7c:	eba0 0308 	sub.w	r3, r0, r8
 8006c80:	fa09 f303 	lsl.w	r3, r9, r3
 8006c84:	4313      	orrs	r3, r2
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	46a2      	mov	sl, r4
 8006c8a:	e7d2      	b.n	8006c32 <_vfiprintf_r+0xc6>
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	1d19      	adds	r1, r3, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	9103      	str	r1, [sp, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bfbb      	ittet	lt
 8006c98:	425b      	neglt	r3, r3
 8006c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c9e:	9307      	strge	r3, [sp, #28]
 8006ca0:	9307      	strlt	r3, [sp, #28]
 8006ca2:	bfb8      	it	lt
 8006ca4:	9204      	strlt	r2, [sp, #16]
 8006ca6:	7823      	ldrb	r3, [r4, #0]
 8006ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006caa:	d10a      	bne.n	8006cc2 <_vfiprintf_r+0x156>
 8006cac:	7863      	ldrb	r3, [r4, #1]
 8006cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cb0:	d132      	bne.n	8006d18 <_vfiprintf_r+0x1ac>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	1d1a      	adds	r2, r3, #4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	9203      	str	r2, [sp, #12]
 8006cba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cbe:	3402      	adds	r4, #2
 8006cc0:	9305      	str	r3, [sp, #20]
 8006cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d98 <_vfiprintf_r+0x22c>
 8006cc6:	7821      	ldrb	r1, [r4, #0]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	4650      	mov	r0, sl
 8006ccc:	f7f9 fa90 	bl	80001f0 <memchr>
 8006cd0:	b138      	cbz	r0, 8006ce2 <_vfiprintf_r+0x176>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	eba0 000a 	sub.w	r0, r0, sl
 8006cd8:	2240      	movs	r2, #64	@ 0x40
 8006cda:	4082      	lsls	r2, r0
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	3401      	adds	r4, #1
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce6:	4829      	ldr	r0, [pc, #164]	@ (8006d8c <_vfiprintf_r+0x220>)
 8006ce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cec:	2206      	movs	r2, #6
 8006cee:	f7f9 fa7f 	bl	80001f0 <memchr>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d03f      	beq.n	8006d76 <_vfiprintf_r+0x20a>
 8006cf6:	4b26      	ldr	r3, [pc, #152]	@ (8006d90 <_vfiprintf_r+0x224>)
 8006cf8:	bb1b      	cbnz	r3, 8006d42 <_vfiprintf_r+0x1d6>
 8006cfa:	9b03      	ldr	r3, [sp, #12]
 8006cfc:	3307      	adds	r3, #7
 8006cfe:	f023 0307 	bic.w	r3, r3, #7
 8006d02:	3308      	adds	r3, #8
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d08:	443b      	add	r3, r7
 8006d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d0c:	e76a      	b.n	8006be4 <_vfiprintf_r+0x78>
 8006d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d12:	460c      	mov	r4, r1
 8006d14:	2001      	movs	r0, #1
 8006d16:	e7a8      	b.n	8006c6a <_vfiprintf_r+0xfe>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	3401      	adds	r4, #1
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4620      	mov	r0, r4
 8006d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d2a:	3a30      	subs	r2, #48	@ 0x30
 8006d2c:	2a09      	cmp	r2, #9
 8006d2e:	d903      	bls.n	8006d38 <_vfiprintf_r+0x1cc>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0c6      	beq.n	8006cc2 <_vfiprintf_r+0x156>
 8006d34:	9105      	str	r1, [sp, #20]
 8006d36:	e7c4      	b.n	8006cc2 <_vfiprintf_r+0x156>
 8006d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e7f0      	b.n	8006d24 <_vfiprintf_r+0x1b8>
 8006d42:	ab03      	add	r3, sp, #12
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	462a      	mov	r2, r5
 8006d48:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <_vfiprintf_r+0x228>)
 8006d4a:	a904      	add	r1, sp, #16
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f3af 8000 	nop.w
 8006d52:	4607      	mov	r7, r0
 8006d54:	1c78      	adds	r0, r7, #1
 8006d56:	d1d6      	bne.n	8006d06 <_vfiprintf_r+0x19a>
 8006d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_vfiprintf_r+0x1fe>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_vfiprintf_r+0x1fe>
 8006d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d66:	f7ff fddd 	bl	8006924 <__retarget_lock_release_recursive>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	065b      	lsls	r3, r3, #25
 8006d6e:	f53f af1f 	bmi.w	8006bb0 <_vfiprintf_r+0x44>
 8006d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d74:	e71e      	b.n	8006bb4 <_vfiprintf_r+0x48>
 8006d76:	ab03      	add	r3, sp, #12
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <_vfiprintf_r+0x228>)
 8006d7e:	a904      	add	r1, sp, #16
 8006d80:	4630      	mov	r0, r6
 8006d82:	f000 f879 	bl	8006e78 <_printf_i>
 8006d86:	e7e4      	b.n	8006d52 <_vfiprintf_r+0x1e6>
 8006d88:	08008668 	.word	0x08008668
 8006d8c:	08008672 	.word	0x08008672
 8006d90:	00000000 	.word	0x00000000
 8006d94:	08006b47 	.word	0x08006b47
 8006d98:	0800866e 	.word	0x0800866e

08006d9c <_printf_common>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	4616      	mov	r6, r2
 8006da2:	4698      	mov	r8, r3
 8006da4:	688a      	ldr	r2, [r1, #8]
 8006da6:	690b      	ldr	r3, [r1, #16]
 8006da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	bfb8      	it	lt
 8006db0:	4613      	movlt	r3, r2
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006db8:	4607      	mov	r7, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b10a      	cbz	r2, 8006dc2 <_printf_common+0x26>
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	6033      	str	r3, [r6, #0]
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	0699      	lsls	r1, r3, #26
 8006dc6:	bf42      	ittt	mi
 8006dc8:	6833      	ldrmi	r3, [r6, #0]
 8006dca:	3302      	addmi	r3, #2
 8006dcc:	6033      	strmi	r3, [r6, #0]
 8006dce:	6825      	ldr	r5, [r4, #0]
 8006dd0:	f015 0506 	ands.w	r5, r5, #6
 8006dd4:	d106      	bne.n	8006de4 <_printf_common+0x48>
 8006dd6:	f104 0a19 	add.w	sl, r4, #25
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	6832      	ldr	r2, [r6, #0]
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dc26      	bgt.n	8006e32 <_printf_common+0x96>
 8006de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	3b00      	subs	r3, #0
 8006dec:	bf18      	it	ne
 8006dee:	2301      	movne	r3, #1
 8006df0:	0692      	lsls	r2, r2, #26
 8006df2:	d42b      	bmi.n	8006e4c <_printf_common+0xb0>
 8006df4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006df8:	4641      	mov	r1, r8
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c8      	blx	r9
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d01e      	beq.n	8006e40 <_printf_common+0xa4>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	6922      	ldr	r2, [r4, #16]
 8006e06:	f003 0306 	and.w	r3, r3, #6
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	bf02      	ittt	eq
 8006e0e:	68e5      	ldreq	r5, [r4, #12]
 8006e10:	6833      	ldreq	r3, [r6, #0]
 8006e12:	1aed      	subeq	r5, r5, r3
 8006e14:	68a3      	ldr	r3, [r4, #8]
 8006e16:	bf0c      	ite	eq
 8006e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e1c:	2500      	movne	r5, #0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfc4      	itt	gt
 8006e22:	1a9b      	subgt	r3, r3, r2
 8006e24:	18ed      	addgt	r5, r5, r3
 8006e26:	2600      	movs	r6, #0
 8006e28:	341a      	adds	r4, #26
 8006e2a:	42b5      	cmp	r5, r6
 8006e2c:	d11a      	bne.n	8006e64 <_printf_common+0xc8>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	e008      	b.n	8006e44 <_printf_common+0xa8>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4652      	mov	r2, sl
 8006e36:	4641      	mov	r1, r8
 8006e38:	4638      	mov	r0, r7
 8006e3a:	47c8      	blx	r9
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d103      	bne.n	8006e48 <_printf_common+0xac>
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	3501      	adds	r5, #1
 8006e4a:	e7c6      	b.n	8006dda <_printf_common+0x3e>
 8006e4c:	18e1      	adds	r1, r4, r3
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	2030      	movs	r0, #48	@ 0x30
 8006e52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e56:	4422      	add	r2, r4
 8006e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e60:	3302      	adds	r3, #2
 8006e62:	e7c7      	b.n	8006df4 <_printf_common+0x58>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4622      	mov	r2, r4
 8006e68:	4641      	mov	r1, r8
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c8      	blx	r9
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d0e6      	beq.n	8006e40 <_printf_common+0xa4>
 8006e72:	3601      	adds	r6, #1
 8006e74:	e7d9      	b.n	8006e2a <_printf_common+0x8e>
	...

08006e78 <_printf_i>:
 8006e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	7e0f      	ldrb	r7, [r1, #24]
 8006e7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e80:	2f78      	cmp	r7, #120	@ 0x78
 8006e82:	4691      	mov	r9, r2
 8006e84:	4680      	mov	r8, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	469a      	mov	sl, r3
 8006e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e8e:	d807      	bhi.n	8006ea0 <_printf_i+0x28>
 8006e90:	2f62      	cmp	r7, #98	@ 0x62
 8006e92:	d80a      	bhi.n	8006eaa <_printf_i+0x32>
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	f000 80d2 	beq.w	800703e <_printf_i+0x1c6>
 8006e9a:	2f58      	cmp	r7, #88	@ 0x58
 8006e9c:	f000 80b9 	beq.w	8007012 <_printf_i+0x19a>
 8006ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ea8:	e03a      	b.n	8006f20 <_printf_i+0xa8>
 8006eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eae:	2b15      	cmp	r3, #21
 8006eb0:	d8f6      	bhi.n	8006ea0 <_printf_i+0x28>
 8006eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006eb8 <_printf_i+0x40>)
 8006eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eb8:	08006f11 	.word	0x08006f11
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006ea1 	.word	0x08006ea1
 8006ec4:	08006ea1 	.word	0x08006ea1
 8006ec8:	08006ea1 	.word	0x08006ea1
 8006ecc:	08006ea1 	.word	0x08006ea1
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006ea1 	.word	0x08006ea1
 8006ed8:	08006ea1 	.word	0x08006ea1
 8006edc:	08006ea1 	.word	0x08006ea1
 8006ee0:	08006ea1 	.word	0x08006ea1
 8006ee4:	08007025 	.word	0x08007025
 8006ee8:	08006f4f 	.word	0x08006f4f
 8006eec:	08006fdf 	.word	0x08006fdf
 8006ef0:	08006ea1 	.word	0x08006ea1
 8006ef4:	08006ea1 	.word	0x08006ea1
 8006ef8:	08007047 	.word	0x08007047
 8006efc:	08006ea1 	.word	0x08006ea1
 8006f00:	08006f4f 	.word	0x08006f4f
 8006f04:	08006ea1 	.word	0x08006ea1
 8006f08:	08006ea1 	.word	0x08006ea1
 8006f0c:	08006fe7 	.word	0x08006fe7
 8006f10:	6833      	ldr	r3, [r6, #0]
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6032      	str	r2, [r6, #0]
 8006f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f20:	2301      	movs	r3, #1
 8006f22:	e09d      	b.n	8007060 <_printf_i+0x1e8>
 8006f24:	6833      	ldr	r3, [r6, #0]
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	1d19      	adds	r1, r3, #4
 8006f2a:	6031      	str	r1, [r6, #0]
 8006f2c:	0606      	lsls	r6, r0, #24
 8006f2e:	d501      	bpl.n	8006f34 <_printf_i+0xbc>
 8006f30:	681d      	ldr	r5, [r3, #0]
 8006f32:	e003      	b.n	8006f3c <_printf_i+0xc4>
 8006f34:	0645      	lsls	r5, r0, #25
 8006f36:	d5fb      	bpl.n	8006f30 <_printf_i+0xb8>
 8006f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	da03      	bge.n	8006f48 <_printf_i+0xd0>
 8006f40:	232d      	movs	r3, #45	@ 0x2d
 8006f42:	426d      	negs	r5, r5
 8006f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f48:	4859      	ldr	r0, [pc, #356]	@ (80070b0 <_printf_i+0x238>)
 8006f4a:	230a      	movs	r3, #10
 8006f4c:	e011      	b.n	8006f72 <_printf_i+0xfa>
 8006f4e:	6821      	ldr	r1, [r4, #0]
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	0608      	lsls	r0, r1, #24
 8006f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f58:	d402      	bmi.n	8006f60 <_printf_i+0xe8>
 8006f5a:	0649      	lsls	r1, r1, #25
 8006f5c:	bf48      	it	mi
 8006f5e:	b2ad      	uxthmi	r5, r5
 8006f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f62:	4853      	ldr	r0, [pc, #332]	@ (80070b0 <_printf_i+0x238>)
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	bf14      	ite	ne
 8006f68:	230a      	movne	r3, #10
 8006f6a:	2308      	moveq	r3, #8
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f72:	6866      	ldr	r6, [r4, #4]
 8006f74:	60a6      	str	r6, [r4, #8]
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	bfa2      	ittt	ge
 8006f7a:	6821      	ldrge	r1, [r4, #0]
 8006f7c:	f021 0104 	bicge.w	r1, r1, #4
 8006f80:	6021      	strge	r1, [r4, #0]
 8006f82:	b90d      	cbnz	r5, 8006f88 <_printf_i+0x110>
 8006f84:	2e00      	cmp	r6, #0
 8006f86:	d04b      	beq.n	8007020 <_printf_i+0x1a8>
 8006f88:	4616      	mov	r6, r2
 8006f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f92:	5dc7      	ldrb	r7, [r0, r7]
 8006f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f98:	462f      	mov	r7, r5
 8006f9a:	42bb      	cmp	r3, r7
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	d9f4      	bls.n	8006f8a <_printf_i+0x112>
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d10b      	bne.n	8006fbc <_printf_i+0x144>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	07df      	lsls	r7, r3, #31
 8006fa8:	d508      	bpl.n	8006fbc <_printf_i+0x144>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	6861      	ldr	r1, [r4, #4]
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	bfde      	ittt	le
 8006fb2:	2330      	movle	r3, #48	@ 0x30
 8006fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fbc:	1b92      	subs	r2, r2, r6
 8006fbe:	6122      	str	r2, [r4, #16]
 8006fc0:	f8cd a000 	str.w	sl, [sp]
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	aa03      	add	r2, sp, #12
 8006fc8:	4621      	mov	r1, r4
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7ff fee6 	bl	8006d9c <_printf_common>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d14a      	bne.n	800706a <_printf_i+0x1f2>
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	b004      	add	sp, #16
 8006fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	4833      	ldr	r0, [pc, #204]	@ (80070b4 <_printf_i+0x23c>)
 8006fe8:	2778      	movs	r7, #120	@ 0x78
 8006fea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	6831      	ldr	r1, [r6, #0]
 8006ff2:	061f      	lsls	r7, r3, #24
 8006ff4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ff8:	d402      	bmi.n	8007000 <_printf_i+0x188>
 8006ffa:	065f      	lsls	r7, r3, #25
 8006ffc:	bf48      	it	mi
 8006ffe:	b2ad      	uxthmi	r5, r5
 8007000:	6031      	str	r1, [r6, #0]
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	bf44      	itt	mi
 8007006:	f043 0320 	orrmi.w	r3, r3, #32
 800700a:	6023      	strmi	r3, [r4, #0]
 800700c:	b11d      	cbz	r5, 8007016 <_printf_i+0x19e>
 800700e:	2310      	movs	r3, #16
 8007010:	e7ac      	b.n	8006f6c <_printf_i+0xf4>
 8007012:	4827      	ldr	r0, [pc, #156]	@ (80070b0 <_printf_i+0x238>)
 8007014:	e7e9      	b.n	8006fea <_printf_i+0x172>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	f023 0320 	bic.w	r3, r3, #32
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	e7f6      	b.n	800700e <_printf_i+0x196>
 8007020:	4616      	mov	r6, r2
 8007022:	e7bd      	b.n	8006fa0 <_printf_i+0x128>
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	6825      	ldr	r5, [r4, #0]
 8007028:	6961      	ldr	r1, [r4, #20]
 800702a:	1d18      	adds	r0, r3, #4
 800702c:	6030      	str	r0, [r6, #0]
 800702e:	062e      	lsls	r6, r5, #24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	d501      	bpl.n	8007038 <_printf_i+0x1c0>
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	e002      	b.n	800703e <_printf_i+0x1c6>
 8007038:	0668      	lsls	r0, r5, #25
 800703a:	d5fb      	bpl.n	8007034 <_printf_i+0x1bc>
 800703c:	8019      	strh	r1, [r3, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	4616      	mov	r6, r2
 8007044:	e7bc      	b.n	8006fc0 <_printf_i+0x148>
 8007046:	6833      	ldr	r3, [r6, #0]
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	6032      	str	r2, [r6, #0]
 800704c:	681e      	ldr	r6, [r3, #0]
 800704e:	6862      	ldr	r2, [r4, #4]
 8007050:	2100      	movs	r1, #0
 8007052:	4630      	mov	r0, r6
 8007054:	f7f9 f8cc 	bl	80001f0 <memchr>
 8007058:	b108      	cbz	r0, 800705e <_printf_i+0x1e6>
 800705a:	1b80      	subs	r0, r0, r6
 800705c:	6060      	str	r0, [r4, #4]
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	2300      	movs	r3, #0
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007068:	e7aa      	b.n	8006fc0 <_printf_i+0x148>
 800706a:	6923      	ldr	r3, [r4, #16]
 800706c:	4632      	mov	r2, r6
 800706e:	4649      	mov	r1, r9
 8007070:	4640      	mov	r0, r8
 8007072:	47d0      	blx	sl
 8007074:	3001      	adds	r0, #1
 8007076:	d0ad      	beq.n	8006fd4 <_printf_i+0x15c>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	079b      	lsls	r3, r3, #30
 800707c:	d413      	bmi.n	80070a6 <_printf_i+0x22e>
 800707e:	68e0      	ldr	r0, [r4, #12]
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	4298      	cmp	r0, r3
 8007084:	bfb8      	it	lt
 8007086:	4618      	movlt	r0, r3
 8007088:	e7a6      	b.n	8006fd8 <_printf_i+0x160>
 800708a:	2301      	movs	r3, #1
 800708c:	4632      	mov	r2, r6
 800708e:	4649      	mov	r1, r9
 8007090:	4640      	mov	r0, r8
 8007092:	47d0      	blx	sl
 8007094:	3001      	adds	r0, #1
 8007096:	d09d      	beq.n	8006fd4 <_printf_i+0x15c>
 8007098:	3501      	adds	r5, #1
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	9903      	ldr	r1, [sp, #12]
 800709e:	1a5b      	subs	r3, r3, r1
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dcf2      	bgt.n	800708a <_printf_i+0x212>
 80070a4:	e7eb      	b.n	800707e <_printf_i+0x206>
 80070a6:	2500      	movs	r5, #0
 80070a8:	f104 0619 	add.w	r6, r4, #25
 80070ac:	e7f5      	b.n	800709a <_printf_i+0x222>
 80070ae:	bf00      	nop
 80070b0:	08008679 	.word	0x08008679
 80070b4:	0800868a 	.word	0x0800868a

080070b8 <__sflush_r>:
 80070b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c0:	0716      	lsls	r6, r2, #28
 80070c2:	4605      	mov	r5, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	d454      	bmi.n	8007172 <__sflush_r+0xba>
 80070c8:	684b      	ldr	r3, [r1, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dc02      	bgt.n	80070d4 <__sflush_r+0x1c>
 80070ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	dd48      	ble.n	8007166 <__sflush_r+0xae>
 80070d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070d6:	2e00      	cmp	r6, #0
 80070d8:	d045      	beq.n	8007166 <__sflush_r+0xae>
 80070da:	2300      	movs	r3, #0
 80070dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070e0:	682f      	ldr	r7, [r5, #0]
 80070e2:	6a21      	ldr	r1, [r4, #32]
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	d030      	beq.n	800714a <__sflush_r+0x92>
 80070e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	0759      	lsls	r1, r3, #29
 80070ee:	d505      	bpl.n	80070fc <__sflush_r+0x44>
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070f6:	b10b      	cbz	r3, 80070fc <__sflush_r+0x44>
 80070f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	2300      	movs	r3, #0
 80070fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007100:	6a21      	ldr	r1, [r4, #32]
 8007102:	4628      	mov	r0, r5
 8007104:	47b0      	blx	r6
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	d106      	bne.n	800711a <__sflush_r+0x62>
 800710c:	6829      	ldr	r1, [r5, #0]
 800710e:	291d      	cmp	r1, #29
 8007110:	d82b      	bhi.n	800716a <__sflush_r+0xb2>
 8007112:	4a2a      	ldr	r2, [pc, #168]	@ (80071bc <__sflush_r+0x104>)
 8007114:	410a      	asrs	r2, r1
 8007116:	07d6      	lsls	r6, r2, #31
 8007118:	d427      	bmi.n	800716a <__sflush_r+0xb2>
 800711a:	2200      	movs	r2, #0
 800711c:	6062      	str	r2, [r4, #4]
 800711e:	04d9      	lsls	r1, r3, #19
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	6022      	str	r2, [r4, #0]
 8007124:	d504      	bpl.n	8007130 <__sflush_r+0x78>
 8007126:	1c42      	adds	r2, r0, #1
 8007128:	d101      	bne.n	800712e <__sflush_r+0x76>
 800712a:	682b      	ldr	r3, [r5, #0]
 800712c:	b903      	cbnz	r3, 8007130 <__sflush_r+0x78>
 800712e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007132:	602f      	str	r7, [r5, #0]
 8007134:	b1b9      	cbz	r1, 8007166 <__sflush_r+0xae>
 8007136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800713a:	4299      	cmp	r1, r3
 800713c:	d002      	beq.n	8007144 <__sflush_r+0x8c>
 800713e:	4628      	mov	r0, r5
 8007140:	f7ff fbf2 	bl	8006928 <_free_r>
 8007144:	2300      	movs	r3, #0
 8007146:	6363      	str	r3, [r4, #52]	@ 0x34
 8007148:	e00d      	b.n	8007166 <__sflush_r+0xae>
 800714a:	2301      	movs	r3, #1
 800714c:	4628      	mov	r0, r5
 800714e:	47b0      	blx	r6
 8007150:	4602      	mov	r2, r0
 8007152:	1c50      	adds	r0, r2, #1
 8007154:	d1c9      	bne.n	80070ea <__sflush_r+0x32>
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0c6      	beq.n	80070ea <__sflush_r+0x32>
 800715c:	2b1d      	cmp	r3, #29
 800715e:	d001      	beq.n	8007164 <__sflush_r+0xac>
 8007160:	2b16      	cmp	r3, #22
 8007162:	d11e      	bne.n	80071a2 <__sflush_r+0xea>
 8007164:	602f      	str	r7, [r5, #0]
 8007166:	2000      	movs	r0, #0
 8007168:	e022      	b.n	80071b0 <__sflush_r+0xf8>
 800716a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716e:	b21b      	sxth	r3, r3
 8007170:	e01b      	b.n	80071aa <__sflush_r+0xf2>
 8007172:	690f      	ldr	r7, [r1, #16]
 8007174:	2f00      	cmp	r7, #0
 8007176:	d0f6      	beq.n	8007166 <__sflush_r+0xae>
 8007178:	0793      	lsls	r3, r2, #30
 800717a:	680e      	ldr	r6, [r1, #0]
 800717c:	bf08      	it	eq
 800717e:	694b      	ldreq	r3, [r1, #20]
 8007180:	600f      	str	r7, [r1, #0]
 8007182:	bf18      	it	ne
 8007184:	2300      	movne	r3, #0
 8007186:	eba6 0807 	sub.w	r8, r6, r7
 800718a:	608b      	str	r3, [r1, #8]
 800718c:	f1b8 0f00 	cmp.w	r8, #0
 8007190:	dde9      	ble.n	8007166 <__sflush_r+0xae>
 8007192:	6a21      	ldr	r1, [r4, #32]
 8007194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007196:	4643      	mov	r3, r8
 8007198:	463a      	mov	r2, r7
 800719a:	4628      	mov	r0, r5
 800719c:	47b0      	blx	r6
 800719e:	2800      	cmp	r0, #0
 80071a0:	dc08      	bgt.n	80071b4 <__sflush_r+0xfc>
 80071a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	4407      	add	r7, r0
 80071b6:	eba8 0800 	sub.w	r8, r8, r0
 80071ba:	e7e7      	b.n	800718c <__sflush_r+0xd4>
 80071bc:	dfbffffe 	.word	0xdfbffffe

080071c0 <_fflush_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	690b      	ldr	r3, [r1, #16]
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	b913      	cbnz	r3, 80071d0 <_fflush_r+0x10>
 80071ca:	2500      	movs	r5, #0
 80071cc:	4628      	mov	r0, r5
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	b118      	cbz	r0, 80071da <_fflush_r+0x1a>
 80071d2:	6a03      	ldr	r3, [r0, #32]
 80071d4:	b90b      	cbnz	r3, 80071da <_fflush_r+0x1a>
 80071d6:	f7ff fa9f 	bl	8006718 <__sinit>
 80071da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0f3      	beq.n	80071ca <_fflush_r+0xa>
 80071e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071e4:	07d0      	lsls	r0, r2, #31
 80071e6:	d404      	bmi.n	80071f2 <_fflush_r+0x32>
 80071e8:	0599      	lsls	r1, r3, #22
 80071ea:	d402      	bmi.n	80071f2 <_fflush_r+0x32>
 80071ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ee:	f7ff fb98 	bl	8006922 <__retarget_lock_acquire_recursive>
 80071f2:	4628      	mov	r0, r5
 80071f4:	4621      	mov	r1, r4
 80071f6:	f7ff ff5f 	bl	80070b8 <__sflush_r>
 80071fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071fc:	07da      	lsls	r2, r3, #31
 80071fe:	4605      	mov	r5, r0
 8007200:	d4e4      	bmi.n	80071cc <_fflush_r+0xc>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	059b      	lsls	r3, r3, #22
 8007206:	d4e1      	bmi.n	80071cc <_fflush_r+0xc>
 8007208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720a:	f7ff fb8b 	bl	8006924 <__retarget_lock_release_recursive>
 800720e:	e7dd      	b.n	80071cc <_fflush_r+0xc>

08007210 <__swbuf_r>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	460e      	mov	r6, r1
 8007214:	4614      	mov	r4, r2
 8007216:	4605      	mov	r5, r0
 8007218:	b118      	cbz	r0, 8007222 <__swbuf_r+0x12>
 800721a:	6a03      	ldr	r3, [r0, #32]
 800721c:	b90b      	cbnz	r3, 8007222 <__swbuf_r+0x12>
 800721e:	f7ff fa7b 	bl	8006718 <__sinit>
 8007222:	69a3      	ldr	r3, [r4, #24]
 8007224:	60a3      	str	r3, [r4, #8]
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	071a      	lsls	r2, r3, #28
 800722a:	d501      	bpl.n	8007230 <__swbuf_r+0x20>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	b943      	cbnz	r3, 8007242 <__swbuf_r+0x32>
 8007230:	4621      	mov	r1, r4
 8007232:	4628      	mov	r0, r5
 8007234:	f000 f82a 	bl	800728c <__swsetup_r>
 8007238:	b118      	cbz	r0, 8007242 <__swbuf_r+0x32>
 800723a:	f04f 37ff 	mov.w	r7, #4294967295
 800723e:	4638      	mov	r0, r7
 8007240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	6922      	ldr	r2, [r4, #16]
 8007246:	1a98      	subs	r0, r3, r2
 8007248:	6963      	ldr	r3, [r4, #20]
 800724a:	b2f6      	uxtb	r6, r6
 800724c:	4283      	cmp	r3, r0
 800724e:	4637      	mov	r7, r6
 8007250:	dc05      	bgt.n	800725e <__swbuf_r+0x4e>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f7ff ffb3 	bl	80071c0 <_fflush_r>
 800725a:	2800      	cmp	r0, #0
 800725c:	d1ed      	bne.n	800723a <__swbuf_r+0x2a>
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	3b01      	subs	r3, #1
 8007262:	60a3      	str	r3, [r4, #8]
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	701e      	strb	r6, [r3, #0]
 800726c:	6962      	ldr	r2, [r4, #20]
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	429a      	cmp	r2, r3
 8007272:	d004      	beq.n	800727e <__swbuf_r+0x6e>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	07db      	lsls	r3, r3, #31
 8007278:	d5e1      	bpl.n	800723e <__swbuf_r+0x2e>
 800727a:	2e0a      	cmp	r6, #10
 800727c:	d1df      	bne.n	800723e <__swbuf_r+0x2e>
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f7ff ff9d 	bl	80071c0 <_fflush_r>
 8007286:	2800      	cmp	r0, #0
 8007288:	d0d9      	beq.n	800723e <__swbuf_r+0x2e>
 800728a:	e7d6      	b.n	800723a <__swbuf_r+0x2a>

0800728c <__swsetup_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4b29      	ldr	r3, [pc, #164]	@ (8007334 <__swsetup_r+0xa8>)
 8007290:	4605      	mov	r5, r0
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	460c      	mov	r4, r1
 8007296:	b118      	cbz	r0, 80072a0 <__swsetup_r+0x14>
 8007298:	6a03      	ldr	r3, [r0, #32]
 800729a:	b90b      	cbnz	r3, 80072a0 <__swsetup_r+0x14>
 800729c:	f7ff fa3c 	bl	8006718 <__sinit>
 80072a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a4:	0719      	lsls	r1, r3, #28
 80072a6:	d422      	bmi.n	80072ee <__swsetup_r+0x62>
 80072a8:	06da      	lsls	r2, r3, #27
 80072aa:	d407      	bmi.n	80072bc <__swsetup_r+0x30>
 80072ac:	2209      	movs	r2, #9
 80072ae:	602a      	str	r2, [r5, #0]
 80072b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	e033      	b.n	8007324 <__swsetup_r+0x98>
 80072bc:	0758      	lsls	r0, r3, #29
 80072be:	d512      	bpl.n	80072e6 <__swsetup_r+0x5a>
 80072c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072c2:	b141      	cbz	r1, 80072d6 <__swsetup_r+0x4a>
 80072c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072c8:	4299      	cmp	r1, r3
 80072ca:	d002      	beq.n	80072d2 <__swsetup_r+0x46>
 80072cc:	4628      	mov	r0, r5
 80072ce:	f7ff fb2b 	bl	8006928 <_free_r>
 80072d2:	2300      	movs	r3, #0
 80072d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	2300      	movs	r3, #0
 80072e0:	6063      	str	r3, [r4, #4]
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	f043 0308 	orr.w	r3, r3, #8
 80072ec:	81a3      	strh	r3, [r4, #12]
 80072ee:	6923      	ldr	r3, [r4, #16]
 80072f0:	b94b      	cbnz	r3, 8007306 <__swsetup_r+0x7a>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072fc:	d003      	beq.n	8007306 <__swsetup_r+0x7a>
 80072fe:	4621      	mov	r1, r4
 8007300:	4628      	mov	r0, r5
 8007302:	f000 f84f 	bl	80073a4 <__smakebuf_r>
 8007306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730a:	f013 0201 	ands.w	r2, r3, #1
 800730e:	d00a      	beq.n	8007326 <__swsetup_r+0x9a>
 8007310:	2200      	movs	r2, #0
 8007312:	60a2      	str	r2, [r4, #8]
 8007314:	6962      	ldr	r2, [r4, #20]
 8007316:	4252      	negs	r2, r2
 8007318:	61a2      	str	r2, [r4, #24]
 800731a:	6922      	ldr	r2, [r4, #16]
 800731c:	b942      	cbnz	r2, 8007330 <__swsetup_r+0xa4>
 800731e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007322:	d1c5      	bne.n	80072b0 <__swsetup_r+0x24>
 8007324:	bd38      	pop	{r3, r4, r5, pc}
 8007326:	0799      	lsls	r1, r3, #30
 8007328:	bf58      	it	pl
 800732a:	6962      	ldrpl	r2, [r4, #20]
 800732c:	60a2      	str	r2, [r4, #8]
 800732e:	e7f4      	b.n	800731a <__swsetup_r+0x8e>
 8007330:	2000      	movs	r0, #0
 8007332:	e7f7      	b.n	8007324 <__swsetup_r+0x98>
 8007334:	20000028 	.word	0x20000028

08007338 <_sbrk_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	@ (8007354 <_sbrk_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fc fffc 	bl	8004340 <_sbrk>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_sbrk_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_sbrk_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20025ee0 	.word	0x20025ee0

08007358 <__swhatbuf_r>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	460c      	mov	r4, r1
 800735c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007360:	2900      	cmp	r1, #0
 8007362:	b096      	sub	sp, #88	@ 0x58
 8007364:	4615      	mov	r5, r2
 8007366:	461e      	mov	r6, r3
 8007368:	da0d      	bge.n	8007386 <__swhatbuf_r+0x2e>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	bf14      	ite	ne
 8007376:	2340      	movne	r3, #64	@ 0x40
 8007378:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800737c:	2000      	movs	r0, #0
 800737e:	6031      	str	r1, [r6, #0]
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	b016      	add	sp, #88	@ 0x58
 8007384:	bd70      	pop	{r4, r5, r6, pc}
 8007386:	466a      	mov	r2, sp
 8007388:	f000 f848 	bl	800741c <_fstat_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	dbec      	blt.n	800736a <__swhatbuf_r+0x12>
 8007390:	9901      	ldr	r1, [sp, #4]
 8007392:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007396:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800739a:	4259      	negs	r1, r3
 800739c:	4159      	adcs	r1, r3
 800739e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073a2:	e7eb      	b.n	800737c <__swhatbuf_r+0x24>

080073a4 <__smakebuf_r>:
 80073a4:	898b      	ldrh	r3, [r1, #12]
 80073a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073a8:	079d      	lsls	r5, r3, #30
 80073aa:	4606      	mov	r6, r0
 80073ac:	460c      	mov	r4, r1
 80073ae:	d507      	bpl.n	80073c0 <__smakebuf_r+0x1c>
 80073b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	6123      	str	r3, [r4, #16]
 80073b8:	2301      	movs	r3, #1
 80073ba:	6163      	str	r3, [r4, #20]
 80073bc:	b003      	add	sp, #12
 80073be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c0:	ab01      	add	r3, sp, #4
 80073c2:	466a      	mov	r2, sp
 80073c4:	f7ff ffc8 	bl	8007358 <__swhatbuf_r>
 80073c8:	9f00      	ldr	r7, [sp, #0]
 80073ca:	4605      	mov	r5, r0
 80073cc:	4639      	mov	r1, r7
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7ff fb16 	bl	8006a00 <_malloc_r>
 80073d4:	b948      	cbnz	r0, 80073ea <__smakebuf_r+0x46>
 80073d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073da:	059a      	lsls	r2, r3, #22
 80073dc:	d4ee      	bmi.n	80073bc <__smakebuf_r+0x18>
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0302 	orr.w	r3, r3, #2
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	e7e2      	b.n	80073b0 <__smakebuf_r+0xc>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	6020      	str	r0, [r4, #0]
 80073ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073fa:	b15b      	cbz	r3, 8007414 <__smakebuf_r+0x70>
 80073fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007400:	4630      	mov	r0, r6
 8007402:	f000 f81d 	bl	8007440 <_isatty_r>
 8007406:	b128      	cbz	r0, 8007414 <__smakebuf_r+0x70>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	f043 0301 	orr.w	r3, r3, #1
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	431d      	orrs	r5, r3
 8007418:	81a5      	strh	r5, [r4, #12]
 800741a:	e7cf      	b.n	80073bc <__smakebuf_r+0x18>

0800741c <_fstat_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d07      	ldr	r5, [pc, #28]	@ (800743c <_fstat_r+0x20>)
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	f7fc ff60 	bl	80042ee <_fstat>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	d102      	bne.n	8007438 <_fstat_r+0x1c>
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	b103      	cbz	r3, 8007438 <_fstat_r+0x1c>
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	bd38      	pop	{r3, r4, r5, pc}
 800743a:	bf00      	nop
 800743c:	20025ee0 	.word	0x20025ee0

08007440 <_isatty_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d06      	ldr	r5, [pc, #24]	@ (800745c <_isatty_r+0x1c>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7fc ff5f 	bl	800430e <_isatty>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_isatty_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_isatty_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	20025ee0 	.word	0x20025ee0

08007460 <_init>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	bf00      	nop
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr

0800746c <_fini>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr
